# Ruff configuration for Python code quality
# https://docs.astral.sh/ruff/

# Python 3.9+ support
target-version = "py39"

# Source code locations
src = ["sdk/python"]
exclude = [
    ".git",
    ".ruff_cache", 
    ".tox",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "node_modules",
    "frontend",
]

# Line length matching project standards  
line-length = 100
indent-width = 4

# Enable autofix for safe rules
fix = true
show-fixes = true

[lint]
# Enable comprehensive rule sets
select = [
    # Pyflakes
    "F",
    # pycodestyle
    "E", "W",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-annotations
    "ANN",
    # flake8-async
    "ASYNC",
    # flake8-bandit (security)
    "S",
    # flake8-blind-except
    "BLE",
    # flake8-boolean-trap
    "FBT",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-datetimez
    "DTZ",
    # flake8-debugger
    "T10",
    # flake8-django
    "DJ",
    # flake8-errmsg
    "EM",
    # flake8-executable
    "EXE",
    # flake8-future-annotations
    "FA",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-import-conventions
    "ICN",
    # flake8-logging-format
    "G",
    # flake8-no-pep420
    "INP",
    # flake8-pie
    "PIE",
    # flake8-print
    "T20",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # flake8-self
    "SLF",
    # flake8-simplify
    "SIM",
    # flake8-tidy-imports
    "TID",
    # flake8-type-checking
    "TCH",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # pandas-vet
    "PD",
    # pygrep-hooks
    "PGH",
    # Pylint
    "PL",
    # tryceratops
    "TRY",
    # flynt
    "FLY",
    # NumPy-specific rules
    "NPY",
    # Airflow
    "AIR",
    # Perflint
    "PERF",
    # Refurb
    "FURB",
    # flake8-logging
    "LOG",
    # Ruff-specific rules
    "RUF",
]

# Disable rules that are too strict or not applicable
ignore = [
    # Missing docstring in public module
    "D100",
    # Missing docstring in public class
    "D101", 
    # Missing docstring in public method
    "D102",
    # Missing docstring in public function
    "D103",
    # Missing docstring in public package
    "D104",
    # Missing docstring in magic method
    "D105",
    # Missing docstring in public nested class
    "D106",
    # Missing docstring in __init__
    "D107",
    # One-line docstring should fit on one line
    "D200",
    # No blank lines allowed before function docstring
    "D201",
    # No blank lines allowed after function docstring
    "D202",
    # 1 blank line required before class docstring
    "D203",
    # 1 blank line required after class docstring
    "D204",
    # 1 blank line required between summary line and description
    "D205",
    # Docstring should fit on one line
    "D206",
    # Docstring is under-indented
    "D207",
    # Docstring is over-indented
    "D208",
    # Multi-line docstring closing quotes should be on a separate line
    "D209",
    # No blank lines allowed before class docstring
    "D211",
    # Multi-line docstring summary should start at the first line
    "D212",
    # Multi-line docstring summary should start at the second line
    "D213",
    # Section is over-indented
    "D214",
    # Section underline is over-indented
    "D215",
    # First line should end with a period, question mark, or exclamation point
    "D400",
    # First line should be in imperative mood
    "D401",
    # First word of the first line should be capitalized
    "D403",
    # First word of the docstring should not be "This"
    "D404",
    # Section name should be properly capitalized
    "D405",
    # Section name should end with a newline
    "D406",
    # Missing dashed underline after section
    "D407",
    # Section underline should be in the line following the section's name
    "D408",
    # Section underline should match the length of its name
    "D409",
    # No blank lines allowed between a section header and its content
    "D410",
    # No blank lines allowed after the last section
    "D411",
    # No blank lines allowed between sections
    "D412",
    # Missing blank line after last section
    "D413",
    # Section has no content
    "D414",
    # Docstring should end with a period
    "D415",
    # Section name should end with a colon
    "D416",
    # Missing argument description in the docstring
    "D417",
    # Function decorated with @overload shouldn't contain a docstring
    "D418",

    # Type annotation rules that may be too strict
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in classmethod
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed

    # Boolean trap - may be too strict
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition

    # Print statements - may be needed for CLI tools
    "T201",   # print found

    # Exception handling - may be too strict
    "TRY003", # Avoid specifying long messages outside the exception class
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
# Tests can use magic values, assertions, print statements, etc.
"**/test_*.py" = [
    "S101",     # Use of assert detected
    "PLR2004",  # Magic value used in comparison
    "S106",     # Possible hardcoded password
    "ARG001",   # Unused function argument
    "PLR0913",  # Too many arguments to function call
]

# CLI entry points may need print statements  
"**/cli.py" = ["T201"]
"**/main.py" = ["T201"]

# __init__.py files
"**/__init__.py" = [
    "F401",    # Imported but unused
    "E402",    # Module level import not at top of file
]

# Configuration files
"**/config.py" = [
    "S105",    # Possible hardcoded password
]

[lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[lint.isort]
known-first-party = ["zerotrust_sdk"]
force-single-line = false
combine-as-imports = true

[lint.pydocstyle]
convention = "google"

[lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60
max-locals = 20

[format]
# Use double quotes for strings
quote-style = "double"

# Use spaces for indentation
indent-style = "space"

# Skip magic trailing comma
skip-magic-trailing-comma = false

# Automatically detect the appropriate line ending
line-ending = "auto"