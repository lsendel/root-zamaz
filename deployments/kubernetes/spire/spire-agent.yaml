apiVersion: v1
kind: ServiceAccount
metadata:
  name: spire-agent
  namespace: spire-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: spire-agent-role
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "nodes/proxy"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: spire-agent-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spire-agent-role
subjects:
- kind: ServiceAccount
  name: spire-agent
  namespace: spire-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-agent
  namespace: spire-system
data:
  agent.conf: |
    agent {
        data_dir = "/opt/spire/data"
        log_level = "INFO"
        log_format = "json"
        server_address = "spire-server"
        server_port = "8081"
        socket_path = "/tmp/spire-agent/public/api.sock"
        trust_domain = "mvp.local"
        trust_bundle_path = "/opt/spire/conf/agent/bootstrap.crt"
    }

    plugins {
        NodeAttestor "k8s_sat" {
            plugin_data {
                cluster = "mvp-cluster"
                token_path = "/var/run/secrets/tokens/spire-agent"
            }
        }

        NodeAttestor "docker" {
            plugin_data {
                # Docker socket for container attestation
                docker_socket_path = "/var/run/docker.sock"
            }
        }

        KeyManager "memory" {
            plugin_data = {}
        }

        WorkloadAttestor "k8s" {
            plugin_data {
                kubelet_read_only_port = 10255
            }
        }

        WorkloadAttestor "docker" {
            plugin_data {
                docker_socket_path = "/var/run/docker.sock"
            }
        }
    }

    health_checks {
        listener_enabled = true
        bind_address = "0.0.0.0"
        bind_port = "8080"
        live_path = "/live"
        ready_path = "/ready"
    }

    telemetry {
        Prometheus {
            port = 9989
        }
    }
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: spire-agent
  namespace: spire-system
  labels:
    app: spire-agent
spec:
  selector:
    matchLabels:
      app: spire-agent
  template:
    metadata:
      labels:
        app: spire-agent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9989"
        prometheus.io/path: "/metrics"
    spec:
      hostPID: true
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      serviceAccountName: spire-agent
      containers:
      - name: spire-agent
        image: ghcr.io/spiffe/spire-agent:1.8.5
        args:
          - -config
          - /run/spire/config/agent.conf
        ports:
        - containerPort: 8080
          name: health
        - containerPort: 9989
          name: metrics
        volumeMounts:
        - name: spire-config
          mountPath: /run/spire/config
          readOnly: true
        - name: spire-agent-socket
          mountPath: /tmp/spire-agent/public
        - name: spire-token
          mountPath: /var/run/secrets/tokens
        livenessProbe:
          httpGet:
            path: /live
            port: 8080
          failureThreshold: 2
          initialDelaySeconds: 15
          periodSeconds: 60
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: spire-config
        configMap:
          name: spire-agent
      - name: spire-agent-socket
        hostPath:
          path: /run/spire/sockets
          type: DirectoryOrCreate
      - name: spire-token
        projected:
          sources:
          - serviceAccountToken:
              path: spire-agent
              expirationSeconds: 7200
              audience: spire-server
