# SPIRE Agent Configuration for Zero Trust Authentication
# Part of Framework Integration Plan - Week 2

agent {
    data_dir = "/opt/spire/data/agent"
    log_level = "INFO"
    log_format = "json"
    server_address = "spire-server"
    server_port = "8081"
    socket_path = "/opt/spire/sockets/agent.sock"
    trust_domain = "zero-trust.dev"
    trust_bundle_path = "/opt/spire/conf/bootstrap.crt"
    
    # SDS (Secret Discovery Service) configuration for Envoy integration
    sds {
        default_svid_name = "default"
        default_bundle_name = "ROOTCA"
        default_all_bundles_name = "ALL"
    }
    
    # Allow setting of environment variables
    insecure_bootstrap = false
    join_token = ""
}

plugins {
    # Node attestation plugin matching server configuration
    NodeAttestor "k8s_sat" {
        plugin_data {
            cluster = "zero-trust-cluster"
            token_path = "/var/run/secrets/kubernetes.io/serviceaccount/token"
        }
    }
    
    # Key manager for local key storage
    KeyManager "memory" {
        plugin_data = {}
    }
    
    # Workload attestation plugins
    WorkloadAttestor "k8s" {
        plugin_data {
            # Skip kubelet verification for development
            skip_kubelet_verification = true
            # Kubelet configuration
            kubelet_read_only_port = 10255
            kubelet_secure_port = 10250
            # Disable container verification in development
            disable_container_selectors = false
            # Node name resolution
            use_new_container_locator = true
        }
    }
    
    # Unix domain socket workload attestation
    WorkloadAttestor "unix" {
        plugin_data {
            # Discover processes by examining /proc
            discover_workload_path = true
        }
    }
    
    # Docker workload attestation
    WorkloadAttestor "docker" {
        plugin_data {
            docker_socket_path = "/var/run/docker.sock"
            # Container label selectors
            container_id_cgroup_matchers = [
                "/docker/([0-9a-f]{64})",
                "/docker/([0-9a-f]{12})"
            ]
        }
    }
}

# Health check configuration
health_checks {
    listener_enabled = true
    bind_address = "0.0.0.0"
    bind_port = "8080"
    live_path = "/live"
    ready_path = "/ready"
}

# Telemetry configuration
telemetry {
    Prometheus {
        host = "0.0.0.0"
        port = 9989
    }
}