# golangci-lint configuration for 2025 best practices
# https://golangci-lint.run/usage/configuration/

run:
  timeout: 5m
  issues-exit-code: 1
  tests: true
  skip-dirs:
    - vendor
    - node_modules
    - frontend
  skip-files:
    - ".*\\.pb\\.go$"
    - ".*\\.gen\\.go$"
  allow-parallel-runners: true

output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  uniq-by-line: true
  sort-results: true

linters-settings:
  # Cyclomatic complexity
  cyclop:
    max-complexity: 15
    package-average: 10.0
    skip-tests: false

  # Cognitive complexity  
  gocognit:
    min-complexity: 20

  # Function length
  funlen:
    lines: 80
    statements: 50

  # Line length
  lll:
    line-length: 120

  # Naming conventions
  revive:
    rules:
      - name: exported
        severity: warning
        disabled: false
      - name: unreachable-code
        severity: warning
        disabled: false
      - name: redefines-builtin-id
        severity: warning
        disabled: false

  # Security checks
  gosec:
    severity: medium
    confidence: medium
    excludes:
      - G404 # Use of weak random number generator (math/rand) - allowed for tests
    config:
      G306: "0600" # Poor file permissions
      G101:
        pattern: "(?i)passwd|pass|password|pwd|secret|token|jwt|key"
        ignore_entropy: false
        entropy_threshold: "80.0"
        per_char_threshold: "3.0"
        truncate: "32"

  # Error handling
  errcheck:
    check-type-assertions: true
    check-blank: true
    exclude-functions:
      - (*github.com/gofiber/fiber/v2.Ctx).JSON
      - (*github.com/gofiber/fiber/v2.Ctx).SendStatus

  # Unused code
  unused:
    check-exported: true
    go: "1.23"

  # Import organization
  gci:
    sections:
      - standard
      - default
      - prefix(mvp.local)
    skip-generated: true

  # Test file patterns
  testpackage:
    skip-regexp: "(export|internal)_test\\.go"

  # SQL query security
  rowserrcheck:
    packages:
      - github.com/jmoiron/sqlx

  # Performance checks
  prealloc:
    simple: true
    range-loops: true
    for-loops: false

  # Documentation
  godot:
    scope: declarations
    exclude:
      - "^[ ]*[A-Z][A-Za-z ]*[a-z] (is|are|were) .*[^.]$"
    capital: true

  # Magic numbers
  gomnd:
    checks:
      - argument
      - case
      - condition
      - operation
      - return
      - assign
    ignored-numbers:
      - "0"
      - "1" 
      - "2"
      - "3"
      - "8"
      - "10"
      - "16"
      - "32"
      - "64"
      - "100"
      - "200"
      - "400"
      - "401"
      - "403"
      - "404"
      - "429"
      - "500"
      - "502"
      - "503"
    ignored-functions:
      - "math.*"
      - "http.StatusText"
      - "strconv.*"

linters:
  # Enable specific linters
  enable:
    # Bugs
    - errcheck          # Check for unchecked errors
    - gosimple         # Simplify code  
    - govet            # Vet examines Go source code
    - ineffassign      # Detect ineffectual assignments
    - staticcheck      # Go static analysis, detecting bugs
    - typecheck        # Parse and type-check Go code
    - unused           # Check for unused constants, variables, functions and types
    - asciicheck       # Check for non-ASCII identifiers
    - bidichk          # Check for dangerous unicode character sequences
    - bodyclose        # Check whether HTTP response body is closed successfully
    - contextcheck     # Check whether context.Context is properly used
    - cyclop           # Check cyclomatic complexity
    - dupl             # Tool for code clone detection
    - durationcheck    # Check for two durations multiplied together
    - errname          # Check that error types have meaningful names
    - errorlint        # Find code that will cause problems with the error wrapping scheme
    - execinquery      # Check query string in Query function
    - exhaustive       # Check exhaustiveness of enum switch statements
    - exportloopref    # Check for pointers to enclosing loop variables
    - forbidigo        # Forbid identifiers
    - funlen           # Tool for detection of long functions
    - gocheckcompilerdirectives # Validate go compiler directive comments
    - gochecknoglobals # Check that no global variables exist
    - gochecknoinits   # Check that no init functions are present
    - gocognit         # Compute and check cognitive complexity  
    - goconst          # Find repeated strings that could be replaced by a constant
    - gocritic         # Comprehensive Go source code linter
    - gocyclo          # Compute and check cyclomatic complexity
    - godot            # Check if comments end in a period
    - gofmt            # Check whether code was gofmted
    - gofumpt          # Check whether code was gofumpted
    - goheader         # Check file headers
    - goimports        # Check missing or unnecessary package imports
    - gomnd            # Detect magic numbers
    - gomoddirectives  # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod
    - gomodguard       # Allow and block list linter for direct Go module dependencies
    - goprintffuncname # Check that printf-like functions are named with 'f' at the end
    - gosec            # Inspects source code for security problems
    - lll              # Reports long lines
    - loggercheck      # Check key valur pairs for common logger libraries
    - makezero         # Find slice declarations with non-zero initial length
    - nakedret         # Find naked returns in functions greater than a specified function length
    - nestif           # Reports deeply nested if statements
    - nilerr           # Find the code that returns nil even if it checks that the error is not nil
    - nilnil           # Check there is no simultaneous return of nil error and an invalid value
    - noctx            # Find sending http request without context.Context
    - nolintlint       # Reports ill-formed or insufficient nolint directives
    - nonamedreturns   # Reports all named returns
    - nosprintfhostport # Check for misuse of Sprintf to construct a host with port in a URL
    - predeclared      # Find code that shadows one of Go's predeclared identifiers
    - promlinter       # Check Prometheus metrics naming via promlint
    - reassign         # Check that package variables are not reassigned
    - revive           # Fast, configurable, extensible, flexible, and beautiful linter for Go
    - rowserrcheck     # Check whether Err of rows is checked successfully
    - sqlclosecheck    # Check that sql.Rows and sql.Stmt are closed
    - stylecheck       # Replacement for golint
    - tenv             # Analyzer that detects using os.Setenv instead of t.Setenv
    - testableexamples # Check if examples are testable
    - testpackage      # Make your tests faster by avoiding unnecessary type assertions
    - thelper          # Detect golang test helpers without t.Helper()
    - tparallel        # Detect inappropriate usage of t.Parallel()
    - unconvert        # Remove unnecessary type conversions
    - unparam          # Report unused function parameters
    - usestdlibvars    # Detect the possibility to use variables/constants from the Go standard library
    - wastedassign     # Find wasted assignment statements
    - whitespace       # Detection of leading and trailing whitespace

  # Disable noisy or conflicting linters
  disable:
    - exhaustivestruct  # Too verbose for practical use
    - exhaustruct      # Too verbose for practical use  
    - gci              # Conflicts with goimports
    - godox            # Allow TODO comments
    - goerr113         # Too strict for practical use
    - ireturn          # Interface return conflicts with good design
    - nlreturn         # Too strict
    - paralleltest     # Not always applicable
    - tagliatelle      # Too opinionated
    - varnamelen       # Too strict for short variable names
    - wrapcheck        # Too verbose
    - wsl              # Too strict whitespace rules

issues:
  # Exclude common false positives
  exclude-rules:
    # Exclude lll issues for long lines of strings
    - linters:
        - lll
      source: "^//go:generate "

    # Exclude staticcheck issues for certain patterns
    - linters:
        - staticcheck
      text: "SA9003:"
      
    # Exclude gosec for certain security issues in tests
    - path: _test\.go
      linters:
        - gosec
        - gocyclo
        - errcheck
        - dupl
        - funlen
        - goconst
        - gocognit
        - cyclop

    # Exclude magic number detection for common HTTP status codes
    - linters:
        - gomnd
      text: "200|400|401|403|404|500|502|503"

    # Allow embedding in main.go files
    - path: main\.go
      linters:
        - gochecknoinits

  # Maximum issues count, 0 = unlimited
  max-issues-per-linter: 50
  max-same-issues: 10

  # Show only new issues if it's a PR
  new-from-rev: ""

severity:
  default-severity: warning
  case-sensitive: false
  rules:
    - linters:
        - gosec
        - errcheck
        - staticcheck
      severity: error