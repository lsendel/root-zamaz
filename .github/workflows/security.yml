name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *' # Run daily

env:
  GO_VERSION: '1.23'

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Run Go vulnerability check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...
      
      - name: Run Go static analysis
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...
      
      - name: Check Go dependencies for known vulnerabilities with Nancy
        continue-on-error: true
        run: |
          if command -v docker &> /dev/null; then
            go list -json -deps ./... 2>/dev/null | docker run --rm -i sonatypecorp/nancy:latest sleuth 2>/dev/null || echo "Nancy scan completed with warnings"
          else
            echo "Docker not available, skipping Nancy scan"
          fi
      
      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'
      
      - name: Upload gosec results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif

  container-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if Dockerfile exists
        id: dockerfile-check
        run: |
          if [ -f "Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run Trivy vulnerability scanner on filesystem
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          skip-dirs: 'frontend/node_modules'
      
      - name: Upload Trivy scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Dockerfile linting
        if: steps.dockerfile-check.outputs.exists == 'true'
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error
          ignore: DL3008,DL3009

  secret-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Create gitleaks config
        run: |
          cat > .gitleaks.toml << 'EOF'
          title = "Gitleaks Configuration"
          
          [[rules]]
          description = "AWS Access Key"
          id = "aws-access-key"
          regex = '''AKIA[0-9A-Z]{16}'''
          tags = ["key", "AWS"]
          
          [[rules]]
          description = "AWS Secret Key"
          id = "aws-secret-key"
          regex = '''(?i)aws(.{0,20})?(?-i)['\"][0-9a-zA-Z\/+]{40}['\"]'''
          tags = ["key", "AWS"]
          
          [[rules]]
          description = "GitHub Token"
          id = "github-token"
          regex = '''ghp_[0-9a-zA-Z]{36}'''
          tags = ["key", "GitHub"]
          
          [[rules]]
          description = "Generic Secret"
          id = "generic-secret"
          regex = '''(?i)(secret|password|key|token)(.{0,20})?['\"][0-9a-zA-Z]{32,}['\"]'''
          tags = ["secret", "generic"]
          
          [allowlist]
          description = "Allowlist for demo/test secrets"
          regexes = [
            '''development-secret''',
            '''test-secret''',
            '''demo-token''',
            '''example-key''',
            '''mvp_password''',
            '''mvp_user'''
          ]
          EOF
      
      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml

  license-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Check Go licenses with go-licenses
        continue-on-error: true
        run: |
          go install github.com/google/go-licenses@latest
          go-licenses check ./... || echo "License check completed with warnings"
      
      - name: Generate license report
        run: |
          if command -v go-licenses &> /dev/null; then
            echo "# License Report" > license-report.md
            echo "" >> license-report.md
            echo "## Go Dependencies" >> license-report.md
            go-licenses report ./... --template=license-report.tpl 2>/dev/null || echo "Could not generate detailed license report" >> license-report.md
          else
            echo "go-licenses not available" > license-report.md
          fi
      
      - name: Create license template
        run: |
          cat > license-report.tpl << 'EOF'
          {{range .}}{{.Name}},{{.Version}},{{.LicenseURL}}
          {{end}}
          EOF
      
      - name: Upload license report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.md
          retention-days: 30
      
      - name: Check for FOSSA API key and run scan
        if: env.FOSSA_API_KEY != ''
        uses: fossa-contrib/fossa-action@v2
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
          
  sast:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go, javascript
          queries: security-extended,security-and-quality
      
      - name: Build Go application
        run: |
          go mod download
          go build -v ./...
      
      - name: Build frontend application
        run: |
          cd frontend
          npm ci
          npm run build
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:go,javascript"
