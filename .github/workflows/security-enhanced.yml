name: Enhanced Security Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - secrets
          - containers
          - infrastructure

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # SECURITY SCAN MATRIX
  # =============================================================================
  
  security-scan:
    name: 🛡️ Security Scan (${{ matrix.scan_type }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      security-events: write
      contents: read
      actions: read
    
    strategy:
      fail-fast: false
      matrix:
        scan_type: [dependencies, secrets, sast, containers, infrastructure]
        include:
          - scan_type: dependencies
            tools: "govulncheck,nancy,npm-audit,trivy-fs"
          - scan_type: secrets  
            tools: "gitleaks,trufflesecurity"
          - scan_type: sast
            tools: "codeql,gosec,semgrep"
          - scan_type: containers
            tools: "trivy,hadolint,dockle"
          - scan_type: infrastructure
            tools: "checkov,tfsec,kics"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Go
        if: ${{ contains(matrix.tools, 'govulncheck') || contains(matrix.tools, 'gosec') }}
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        if: ${{ contains(matrix.tools, 'npm-audit') }}
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # DEPENDENCY VULNERABILITY SCANNING
      - name: Go Vulnerability Check
        if: ${{ matrix.scan_type == 'dependencies' && contains(matrix.tools, 'govulncheck') }}
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -json ./... > govuln-results.json || true
          
          # Generate SARIF format for GitHub Security tab
          go install github.com/securecodewarrior/govulncheck-sarif@latest
          govulncheck-sarif -i govuln-results.json -o govuln-results.sarif

      - name: Upload Go vulnerability results
        if: ${{ matrix.scan_type == 'dependencies' && contains(matrix.tools, 'govulncheck') }}
        uses: github/codeql-action/upload-sarif@v3.29.0
        with:
          sarif_file: govuln-results.sarif
          category: go-vulnerabilities

      - name: Nancy Dependency Check
        if: ${{ matrix.scan_type == 'dependencies' && contains(matrix.tools, 'nancy') }}
        continue-on-error: true
        run: |
          go list -json -deps ./... 2>/dev/null | docker run --rm -i sonatypecorp/nancy:latest sleuth --output=json > nancy-results.json || echo "Nancy scan completed with warnings"

      - name: NPM Security Audit
        if: ${{ matrix.scan_type == 'dependencies' && contains(matrix.tools, 'npm-audit') }}
        run: |
          cd frontend
          npm audit --audit-level=moderate --output=json > ../npm-audit-results.json || true
          # Convert to human-readable format
          npm audit --audit-level=moderate > ../npm-audit-report.txt || true

      - name: Trivy Filesystem Scan
        if: ${{ matrix.scan_type == 'dependencies' && contains(matrix.tools, 'trivy-fs') }}
        uses: aquasecurity/trivy-action@v0.31.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          skip-dirs: 'frontend/node_modules,vendor'

      - name: Upload Trivy FS results
        if: ${{ matrix.scan_type == 'dependencies' && contains(matrix.tools, 'trivy-fs') }}
        uses: github/codeql-action/upload-sarif@v3.29.0
        with:
          sarif_file: trivy-fs-results.sarif
          category: trivy-filesystem

      # SECRET SCANNING
      - name: GitLeaks Secret Scan
        if: ${{ matrix.scan_type == 'secrets' && contains(matrix.tools, 'gitleaks') }}
        uses: gitleaks/gitleaks-action@v2.3.9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: |
            title = "Enhanced Gitleaks Configuration"
            
            [[rules]]
            description = "AWS Access Key"
            id = "aws-access-key"
            regex = '''AKIA[0-9A-Z]{16}'''
            tags = ["key", "AWS"]
            
            [[rules]]
            description = "AWS Secret Key"
            id = "aws-secret-key"
            regex = '''(?i)aws(.{0,20})?(?-i)['\"][0-9a-zA-Z\/+]{40}['\"]'''
            tags = ["key", "AWS"]
            
            [[rules]]
            description = "GitHub Token"
            id = "github-token"
            regex = '''ghp_[0-9a-zA-Z]{36}'''
            tags = ["key", "GitHub"]
            
            [[rules]]
            description = "Private Key"
            id = "private-key"
            regex = '''-----BEGIN [A-Z]+ PRIVATE KEY-----'''
            tags = ["key", "private"]
            
            [[rules]]
            description = "Generic API Key"
            id = "generic-api-key"
            regex = '''(?i)(api|key|token|secret|password)(.{0,20})?['\"][0-9a-zA-Z]{32,}['\"]'''
            tags = ["secret", "generic"]
            
            [[rules]]
            description = "Database Connection String"
            id = "db-connection"
            regex = '''(postgresql|mysql|mongodb)://[^\s]+'''
            tags = ["secret", "database"]
            
            [allowlist]
            description = "Allowlist for demo/test secrets"
            regexes = [
              '''development-secret''',
              '''test-secret''',
              '''demo-token''',
              '''example-key''',
              '''mvp_password''',
              '''mvp_user''',
              '''-----BEGIN PUBLIC KEY-----''',
              '''localhost:'''
            ]

      - name: TruffleHog Secret Scan
        if: ${{ matrix.scan_type == 'secrets' && contains(matrix.tools, 'trufflesecurity') }}
        run: |
          docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --repo https://github.com/${{ github.repository }} --json > trufflehog-results.json || true

      # STATIC APPLICATION SECURITY TESTING
      - name: Initialize CodeQL
        if: ${{ matrix.scan_type == 'sast' && contains(matrix.tools, 'codeql') }}
        uses: github/codeql-action/init@v3.29.0
        with:
          languages: go, javascript
          queries: security-extended,security-and-quality
          config: |
            paths-ignore:
              - frontend/node_modules
              - vendor
              - "**/*.test.go"
              - "**/*.spec.ts"

      - name: Build for CodeQL
        if: ${{ matrix.scan_type == 'sast' && contains(matrix.tools, 'codeql') }}
        run: |
          go mod download
          go build -v ./...
          cd frontend && npm ci && npm run build

      - name: Perform CodeQL Analysis
        if: ${{ matrix.scan_type == 'sast' && contains(matrix.tools, 'codeql') }}
        uses: github/codeql-action/analyze@v3.29.0
        with:
          category: "/language:go,javascript"

      - name: GoSec Security Scanner
        if: ${{ matrix.scan_type == 'sast' && contains(matrix.tools, 'gosec') }}
        uses: securego/gosec@v2.22.5
        with:
          args: '-fmt sarif -out gosec-results.sarif -exclude-dir=frontend ./...'

      - name: Upload GoSec results
        if: ${{ matrix.scan_type == 'sast' && contains(matrix.tools, 'gosec') }}
        uses: github/codeql-action/upload-sarif@v3.29.0
        with:
          sarif_file: gosec-results.sarif
          category: gosec

      - name: Semgrep SAST Scan
        if: ${{ matrix.scan_type == 'sast' && contains(matrix.tools, 'semgrep') }}
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/go
            p/javascript
            p/typescript
            p/docker
            p/kubernetes
          generateRuleboard: true
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      # CONTAINER SECURITY SCANNING
      - name: Build test image for scanning
        if: ${{ matrix.scan_type == 'containers' }}
        run: |
          docker build -t test-image:latest .

      - name: Trivy Container Scan
        if: ${{ matrix.scan_type == 'containers' && contains(matrix.tools, 'trivy') }}
        uses: aquasecurity/trivy-action@v0.31.0
        with:
          image-ref: 'test-image:latest'
          format: 'sarif'
          output: 'trivy-container-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy container results
        if: ${{ matrix.scan_type == 'containers' && contains(matrix.tools, 'trivy') }}
        uses: github/codeql-action/upload-sarif@v3.29.0
        with:
          sarif_file: trivy-container-results.sarif
          category: trivy-container

      - name: Hadolint Dockerfile Linting
        if: ${{ matrix.scan_type == 'containers' && contains(matrix.tools, 'hadolint') }}
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error
          ignore: DL3008,DL3009,DL3018
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Hadolint results
        if: ${{ matrix.scan_type == 'containers' && contains(matrix.tools, 'hadolint') }}
        uses: github/codeql-action/upload-sarif@v3.29.0
        with:
          sarif_file: hadolint-results.sarif
          category: hadolint

      - name: Dockle Container Image Linter
        if: ${{ matrix.scan_type == 'containers' && contains(matrix.tools, 'dockle') }}
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            goodwithtech/dockle:latest -f json -o dockle-results.json test-image:latest || true

      # INFRASTRUCTURE SECURITY SCANNING
      - name: Checkov Infrastructure Scan
        if: ${{ matrix.scan_type == 'infrastructure' && contains(matrix.tools, 'checkov') }}
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: kubernetes,dockerfile,docker_compose
          output_format: sarif
          output_file_path: checkov-results.sarif
          skip_check: CKV_DOCKER_2,CKV_DOCKER_3
          soft_fail: true

      - name: Upload Checkov results
        if: ${{ matrix.scan_type == 'infrastructure' && contains(matrix.tools, 'checkov') }}
        uses: github/codeql-action/upload-sarif@v3.29.0
        with:
          sarif_file: checkov-results.sarif
          category: checkov

      - name: KICS Infrastructure Scan
        if: ${{ matrix.scan_type == 'infrastructure' && contains(matrix.tools, 'kics') }}
        uses: checkmarx/kics-github-action@v2.1.2
        with:
          path: 'k8s,istio,docker-compose*.yml'
          fail_on: high,medium
          output_path: kics-results/
          output_formats: sarif

      - name: Upload KICS results  
        if: ${{ matrix.scan_type == 'infrastructure' && contains(matrix.tools, 'kics') }}
        uses: github/codeql-action/upload-sarif@v3.29.0
        with:
          sarif_file: kics-results/results.sarif
          category: kics

      # UPLOAD ARTIFACTS
      - name: Upload security scan artifacts
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: security-results-${{ matrix.scan_type }}
          path: |
            *-results.json
            *-results.sarif
            *-report.txt
            kics-results/
          retention-days: 30

  # =============================================================================
  # SECURITY REPORT GENERATION
  # =============================================================================
  
  security-report:
    name: 📊 Generate Security Report
    runs-on: ubuntu-latest
    needs: security-scan
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Download all artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          path: security-artifacts/

      - name: Generate security summary
        run: |
          echo "# 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Generated on: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Scan Results by Category" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check each scan type
          for scan_type in dependencies secrets sast containers infrastructure; do
            if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
              echo "✅ **${scan_type^}**: Completed successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **${scan_type^}**: Issues detected or scan failed" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Detailed Reports" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Check the Security tab for detailed findings" >> $GITHUB_STEP_SUMMARY
          echo "- Download artifacts for raw scan results" >> $GITHUB_STEP_SUMMARY
          echo "- Review SARIF files for vulnerability details" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Quick Stats" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count SARIF files
          sarif_count=$(find security-artifacts/ -name "*.sarif" 2>/dev/null | wc -l || echo "0")
          echo "- SARIF reports generated: $sarif_count" >> $GITHUB_STEP_SUMMARY
          
          # Count JSON results
          json_count=$(find security-artifacts/ -name "*-results.json" 2>/dev/null | wc -l || echo "0")
          echo "- JSON reports generated: $json_count" >> $GITHUB_STEP_SUMMARY

      - name: Create consolidated report
        run: |
          mkdir -p reports
          
          cat > reports/security-summary.md << 'EOF'
          # Security Scan Summary Report
          
          ## Overview
          This report consolidates security scan results from multiple tools across different categories.
          
          ## Scan Categories
          
          ### 🔍 Dependency Vulnerabilities
          - **GoVulnCheck**: Go module vulnerability scanning
          - **Nancy**: Sonatype dependency vulnerability check
          - **NPM Audit**: Frontend dependency security audit
          - **Trivy FS**: Filesystem vulnerability scanning
          
          ### 🕵️ Secret Detection
          - **GitLeaks**: Git repository secret scanning
          - **TruffleHog**: Advanced secret detection
          
          ### 🔬 Static Analysis
          - **CodeQL**: GitHub's semantic code analysis
          - **GoSec**: Go security focused static analysis
          - **Semgrep**: Pattern-based static analysis
          
          ### 🐳 Container Security
          - **Trivy Container**: Container image vulnerability scanning
          - **Hadolint**: Dockerfile best practices linting
          - **Dockle**: Container image security linting
          
          ### 🏗️ Infrastructure Security
          - **Checkov**: Infrastructure as Code security scanning
          - **KICS**: Kubernetes and infrastructure security analysis
          
          ## Next Steps
          1. Review detailed findings in GitHub Security tab
          2. Address HIGH and CRITICAL severity issues
          3. Update dependencies with known vulnerabilities
          4. Implement security controls for identified risks
          
          ## Continuous Security
          - This pipeline runs on every push and PR
          - Daily scheduled scans detect new vulnerabilities
          - Security findings are tracked in GitHub Security tab
          EOF

      - name: Upload consolidated report
        uses: actions/upload-artifact@v4.6.2
        with:
          name: security-summary-report
          path: reports/security-summary.md
          retention-days: 90

  # =============================================================================
  # COMPLIANCE CHECK
  # =============================================================================
  
  compliance-check:
    name: 📋 Compliance Validation  
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Security baseline check
        run: |
          echo "🔍 Checking security baseline compliance..."
          
          # Check for required security files
          required_files=(
            ".github/workflows/security-enhanced.yml"
            "docker-compose.test.yml"
            "Dockerfile"
            "frontend/Dockerfile.production"
          )
          
          missing_files=()
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            fi
          done
          
          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "❌ Missing required security files:"
            printf ' - %s\n' "${missing_files[@]}"
            exit 1
          fi
          
          echo "✅ All required security files are present"

      - name: Docker security baseline
        run: |
          echo "🐳 Checking Docker security baseline..."
          
          # Check for non-root user in Dockerfile
          if ! grep -q "USER " Dockerfile; then
            echo "⚠️ Warning: Dockerfile should specify non-root user"
          fi
          
          # Check for HEALTHCHECK
          if ! grep -q "HEALTHCHECK" Dockerfile; then
            echo "⚠️ Warning: Dockerfile should include HEALTHCHECK instruction"
          fi
          
          echo "✅ Docker security baseline check completed"

      - name: Kubernetes security baseline
        run: |
          echo "⚓ Checking Kubernetes security baseline..."
          
          # Check for security contexts in K8s manifests
          k8s_files=$(find k8s/ -name "*.yaml" -o -name "*.yml" 2>/dev/null || true)
          
          if [[ -n "$k8s_files" ]]; then
            for file in $k8s_files; do
              if grep -q "kind: Deployment" "$file"; then
                if ! grep -q "securityContext" "$file"; then
                  echo "⚠️ Warning: $file should include securityContext"
                fi
              fi
            done
          fi
          
          echo "✅ Kubernetes security baseline check completed"