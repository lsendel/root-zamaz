name: Reusable Test Workflow

on:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version to use'
        required: false
        type: string
        default: '1.23'
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'
      run-security-scan:
        description: 'Run security scans'
        required: false
        type: boolean
        default: true
      run-integration-tests:
        description: 'Run integration tests'
        required: false
        type: boolean
        default: true
      timeout-minutes:
        description: 'Timeout in minutes'
        required: false
        type: number
        default: 20

permissions:
  contents: read
  security-events: write

jobs:
  go-tests:
    name: Go Tests and Quality
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    
    - name: Set up Go
      uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5.0.1
      with:
        go-version: ${{ inputs.go-version }}
        cache: true
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run unit tests
      run: go test -v -race -coverprofile=coverage.txt ./...
    
    - name: Run integration tests
      if: ${{ inputs.run-integration-tests }}
      run: |
        if [ -f "Makefile" ] && make -n test-integration >/dev/null 2>&1; then
          make test-integration
        else
          echo "No integration tests found"
        fi
    
    - name: Upload coverage
      uses: codecov/codecov-action@b9fd7d16f6d7d1b5d4895e2b2e9f33153e16e6b0 # v4.5.0
      with:
        file: ./coverage.txt
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ inputs.run-security-scan }}
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b9c9ac3c # v0.24.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@662472033e021d55d94146f66f6058822b0b39fd # v3.27.0
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: hashFiles('frontend/package.json') != ''
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    
    - name: Setup Node.js
      uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package*.json'
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run frontend tests
      working-directory: frontend
      run: |
        if npm run test --if-present; then
          echo "Frontend tests completed"
        else
          echo "No frontend tests found"
        fi
    
    - name: Run frontend linting
      working-directory: frontend
      run: |
        if npm run lint --if-present; then
          echo "Frontend linting completed"
        else
          echo "No frontend linting configured"
        fi