name: CI/CD Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  COVERAGE_THRESHOLD: 80

jobs:
  unit-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      nats:
        image: nats:2.10-alpine
        ports:
          - 4222:4222

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: Set up Go
      uses: actions/setup-go@v5.5.0
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v4.2.3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run unit tests
      run: make test-coverage
      env:
        POSTGRES_URL: postgres://postgres:postgres@localhost:5432/testdb?sslmode=disable
        REDIS_URL: redis://localhost:6379
        NATS_URL: nats://localhost:4222

    - name: Check code coverage threshold
      run: |
        coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: $coverage%"
        if (( $(echo "$coverage < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
          echo "❌ Coverage $coverage% is below ${{ env.COVERAGE_THRESHOLD }}% threshold"
          exit 1
        fi
        echo "✅ Coverage $coverage% meets ${{ env.COVERAGE_THRESHOLD }}% threshold"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v5.4.3
      with:
        file: ./coverage.out
        fail_ci_if_error: true

  integration-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      nats:
        image: nats:2.10-alpine
        ports:
          - 4222:4222

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: Set up Go
      uses: actions/setup-go@v5.5.0
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v4.2.3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run unit tests
      run: make test-coverage
      env:
        POSTGRES_URL: postgres://postgres:postgres@localhost:5432/testdb?sslmode=disable
        REDIS_URL: redis://localhost:6379
        NATS_URL: nats://localhost:4222

    - name: Check code coverage threshold
      run: |
        coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: $coverage%"
        if (( $(echo "$coverage < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
          echo "❌ Coverage $coverage% is below ${{ env.COVERAGE_THRESHOLD }}% threshold"
          exit 1
        fi
        echo "✅ Coverage $coverage% meets ${{ env.COVERAGE_THRESHOLD }}% threshold"

    - name: Run integration tests
      run: make test-integration
      env:
        POSTGRES_URL: postgres://postgres:postgres@localhost:5432/testdb?sslmode=disable
        REDIS_URL: redis://localhost:6379
        NATS_URL: nats://localhost:4222

  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: Set up Node.js
      uses: actions/setup-node@v4.4.0
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:coverage

    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint

    - name: Run frontend type checking
      run: |
        cd frontend
        npm run type-check

  build:
    needs: [unit-test, integration-test, frontend-test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [auth-service, tenant-service, user-service, notification-service]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.11.1

    - name: Log in to Container Registry
      uses: docker/login-action@v3.4.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5.7.0
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.sha }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6.18.0
      with:
        context: ./services/${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  frontend-build:
    needs: frontend-test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: Set up Node.js
      uses: actions/setup-node@v4.4.0
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4.6.2
      with:
        name: frontend-dist
        path: frontend/dist/
