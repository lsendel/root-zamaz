{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Zamaz Zero Trust Platform","text":"<p>Welcome to the comprehensive documentation for the Zamaz Zero Trust Authentication Platform - a modern authentication system implementing Zero Trust principles with GitOps deployment model.</p> <p></p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get up and running with Zamaz in minutes:</p> DevelopmentProductionDocker <pre><code># Clone and setup\ngit clone https://github.com/zamaz/root-zamaz.git\ncd root-zamaz\n\n# Development setup\nmake dev-setup\nmake dev-up\n\n# GitOps local environment\nmake dev-gitops\n</code></pre> <pre><code># Deploy to Kubernetes\nhelm repo add zamaz https://charts.zamaz.io\nhelm install zamaz zamaz/zamaz-platform\n\n# Or use GitOps\nkubectl apply -f deployments/argocd/\n</code></pre> <pre><code># Run with Docker Compose\ndocker-compose up -d\n\n# Access the platform\nopen http://localhost:8080\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p> Zero Trust Security</p> <p>Comprehensive security model with identity verification, device attestation, and continuous authorization</p> <p> Security Architecture</p> </li> <li> <p> GitOps-First</p> <p>Complete infrastructure and application lifecycle managed through Git with Argo CD and automated deployments</p> <p> GitOps Guide</p> </li> <li> <p> Full Observability</p> <p>Comprehensive monitoring, logging, and tracing with Prometheus, Grafana, and Jaeger integration</p> <p> Observability</p> </li> <li> <p> Service Mesh Ready</p> <p>Built-in Istio service mesh integration with advanced traffic management and security policies</p> <p> Service Discovery</p> </li> </ul>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"External\"\n        User[User/Client]\n        Admin[Administrator]\n    end\n\n    subgraph \"Ingress Layer\"\n        Gateway[Istio Gateway]\n        LB[Load Balancer]\n    end\n\n    subgraph \"Application Layer\"\n        Auth[Auth Service]\n        API[API Gateway]\n        Frontend[React Frontend]\n    end\n\n    subgraph \"Platform Layer\"\n        Istio[Istio Service Mesh]\n        Consul[Service Discovery]\n        Vault[HashiCorp Vault]\n    end\n\n    subgraph \"Data Layer\"\n        DB[(PostgreSQL)]\n        Cache[(Redis)]\n        Storage[Object Storage]\n    end\n\n    subgraph \"Observability\"\n        Prometheus[Prometheus]\n        Grafana[Grafana]\n        Jaeger[Jaeger]\n        Loki[Loki]\n    end\n\n    User --&gt; Gateway\n    Admin --&gt; Gateway\n    Gateway --&gt; Auth\n    Gateway --&gt; API\n    Gateway --&gt; Frontend\n\n    Auth --&gt; Vault\n    Auth --&gt; DB\n    API --&gt; Cache\n    API --&gt; DB\n\n    Istio --&gt; Auth\n    Istio --&gt; API\n    Consul --&gt; Auth\n    Consul --&gt; API\n\n    Auth --&gt; Prometheus\n    API --&gt; Prometheus\n    Frontend --&gt; Prometheus\n\n    Prometheus --&gt; Grafana\n    Istio --&gt; Jaeger\n    Auth --&gt; Loki</code></pre>"},{"location":"#documentation-sections","title":"Documentation Sections","text":"Section Description Key Topics Getting Started Installation and initial setup Quick start, configuration, first deployment Architecture System design and components Zero Trust, security, observability, service mesh Development Developer guides and tools Setup, testing, contributing, SDK generation Deployment Production deployment guides Kubernetes, Docker, GitOps, security API Reference Complete API documentation Authentication, devices, OpenAPI specifications Security Security policies and procedures Threat model, incident response, compliance Operations Operational procedures Troubleshooting, monitoring, maintenance"},{"location":"#whats-new","title":"What's New","text":"<p>Latest Updates</p> <ul> <li>v1.0.0 - Full Zero Trust implementation with Istio service mesh</li> <li>GitOps Pipeline - Complete CI/CD with Argo CD and automated deployments  </li> <li>Enhanced Security - SPIRE integration for workload identity</li> <li>Observability Stack - Comprehensive monitoring with Prometheus and Grafana</li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li> <p> GitHub</p> <p>Contribute to the project, report issues, and collaborate with the community</p> <p> GitHub Repository</p> </li> <li> <p> Documentation</p> <p>Comprehensive guides, API references, and best practices</p> <p> Developer Guide</p> </li> <li> <p> Security</p> <p>Security policies, vulnerability reporting, and compliance information</p> <p> Security Policy</p> </li> <li> <p> Container Registry</p> <p>Pre-built Docker images and Helm charts for easy deployment</p> <p> Docker Hub</p> </li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>API Documentation - Complete REST API reference</li> <li>Helm Charts - Kubernetes deployment with Helm</li> <li>Security Guidelines - Zero Trust security implementation</li> <li>Troubleshooting - Common issues and solutions</li> <li>Contributing - How to contribute to the project</li> </ul> <p>Need Help?</p> <ul> <li>\ud83d\udcd6 Check our comprehensive documentation</li> <li>\ud83d\udc1b Report issues on GitHub Issues</li> <li>\ud83d\udcac Join our community discussions</li> <li>\ud83d\udce7 Contact support at support@zamaz.io</li> </ul>"},{"location":"CI_CD_PIPELINE/","title":"Modern CI/CD Pipeline Documentation","text":""},{"location":"CI_CD_PIPELINE/#overview","title":"Overview","text":"<p>The Zamaz project implements a comprehensive, modern CI/CD pipeline with security-first principles, multi-architecture support, and full integration with the service discovery and Istio service mesh infrastructure.</p>"},{"location":"CI_CD_PIPELINE/#pipeline-architecture","title":"Pipeline Architecture","text":""},{"location":"CI_CD_PIPELINE/#modern-ci-pipeline-githubworkflowsci-modernyml","title":"\ud83d\udd04 Modern CI Pipeline (<code>.github/workflows/ci-modern.yml</code>)","text":""},{"location":"CI_CD_PIPELINE/#phase-1-preparation","title":"Phase 1: Preparation","text":"<ul> <li>Environment Detection: Auto-detects deployment environment and version</li> <li>Build Matrix Generation: Dynamic service discovery for build targets</li> <li>Safety Checks: Validation for production deployments</li> <li>Skip Conditions: Emergency deployment capabilities</li> </ul>"},{"location":"CI_CD_PIPELINE/#phase-2-quality-gates","title":"Phase 2: Quality Gates","text":"<ul> <li>Code Quality: Go linting, frontend linting, formatting checks</li> <li>Security Scans: Multi-tool security validation</li> <li>Test Coverage: Backend and frontend comprehensive testing</li> <li>Service Mesh Testing: Istio and service discovery validation</li> </ul>"},{"location":"CI_CD_PIPELINE/#phase-3-build-package","title":"Phase 3: Build &amp; Package","text":"<ul> <li>Multi-Architecture Builds: Linux (amd64/arm64), Darwin, Windows</li> <li>Container Images: Multi-platform Docker builds with security scanning</li> <li>Artifact Generation: Binaries, packages, and deployment manifests</li> </ul>"},{"location":"CI_CD_PIPELINE/#phase-4-deployment","title":"Phase 4: Deployment","text":"<ul> <li>Infrastructure Validation: Kubernetes manifests, Helm charts, docker-compose</li> <li>Service Discovery Testing: End-to-end service mesh validation</li> <li>Environment-Specific Deployment: Staging and production pipelines</li> </ul>"},{"location":"CI_CD_PIPELINE/#enhanced-security-pipeline-githubworkflowssecurity-enhancedyml","title":"\ud83d\udee1\ufe0f Enhanced Security Pipeline (<code>.github/workflows/security-enhanced.yml</code>)","text":""},{"location":"CI_CD_PIPELINE/#multi-stage-security-scanning","title":"Multi-Stage Security Scanning","text":"<ol> <li>Dependency Vulnerabilities</li> <li>GoVulnCheck: Go-specific vulnerability scanning</li> <li>Nancy: Sonatype dependency analysis</li> <li>NPM Audit: Frontend dependency security</li> <li> <p>Trivy FS: Filesystem vulnerability scanning</p> </li> <li> <p>Secret Detection</p> </li> <li>GitLeaks: Git repository secret scanning with custom rules</li> <li> <p>TruffleHog: Advanced pattern-based secret detection</p> </li> <li> <p>Static Application Security Testing (SAST)</p> </li> <li>CodeQL: GitHub's semantic code analysis</li> <li>GoSec: Go security-focused static analysis</li> <li> <p>Semgrep: Multi-language pattern-based scanning</p> </li> <li> <p>Container Security</p> </li> <li>Trivy Container: Container image vulnerability scanning</li> <li>Hadolint: Dockerfile best practices linting</li> <li> <p>Dockle: Container image security assessment</p> </li> <li> <p>Infrastructure Security</p> </li> <li>Checkov: Infrastructure as Code security scanning</li> <li>KICS: Kubernetes and infrastructure security analysis</li> </ol>"},{"location":"CI_CD_PIPELINE/#release-pipeline-githubworkflowsrelease-modernyml","title":"\ud83d\ude80 Release Pipeline (<code>.github/workflows/release-modern.yml</code>)","text":""},{"location":"CI_CD_PIPELINE/#automated-release-management","title":"Automated Release Management","text":"<ul> <li>Semantic Versioning: Automatic version validation and tagging</li> <li>Multi-Platform Builds: GoReleaser-powered cross-compilation</li> <li>Package Distribution: Multiple package managers (Homebrew, AUR, Snap, Winget, Nix)</li> <li>Container Registry: Multi-architecture container images</li> <li>Kubernetes Artifacts: Ready-to-deploy manifests and Helm charts</li> </ul>"},{"location":"CI_CD_PIPELINE/#security-compliance","title":"Security &amp; Compliance","text":"<ul> <li>SBOM Generation: Software Bill of Materials for all artifacts</li> <li>Vulnerability Scanning: Container and dependency security validation</li> <li>Signature Verification: Checksums and artifact integrity</li> <li>Compliance Reporting: Automated security baseline validation</li> </ul>"},{"location":"CI_CD_PIPELINE/#kubernetes-deployment-githubworkflowsdeploy-k8syml","title":"\u2693 Kubernetes Deployment (<code>.github/workflows/deploy-k8s.yml</code>)","text":""},{"location":"CI_CD_PIPELINE/#advanced-deployment-features","title":"Advanced Deployment Features","text":"<ul> <li>Multi-Environment Support: Staging and production pipelines</li> <li>Safety Validations: Production deployment guards and rollback capabilities</li> <li>Service Discovery Integration: Consul and Kubernetes DNS validation</li> <li>Istio Service Mesh: Traffic management and security policy deployment</li> <li>Health Monitoring: Comprehensive post-deployment validation</li> </ul>"},{"location":"CI_CD_PIPELINE/#configuration-files","title":"Configuration Files","text":""},{"location":"CI_CD_PIPELINE/#goreleaser-configuration-goreleaseryml","title":"GoReleaser Configuration (<code>.goreleaser.yml</code>)","text":"<pre><code># Modern release automation with:\nbuilds:\n  - Multi-platform binaries (Linux, macOS, Windows)\n  - ARM64 and AMD64 support\n  - Optimized build flags and linking\n\ndockers:\n  - Multi-architecture container images\n  - Comprehensive image labeling\n  - Security-optimized base images\n\nrelease:\n  - Automated changelog generation\n  - GitHub release integration\n  - Package manager distribution\n</code></pre>"},{"location":"CI_CD_PIPELINE/#make-commands-integration","title":"Make Commands Integration","text":"<p>The Makefile includes comprehensive CI/CD management commands:</p> <pre><code># Validation &amp; Testing\nmake cicd-validate         # Validate all CI/CD configurations\nmake cicd-test-workflows   # Test workflows locally with act\nmake cicd-security-test    # Test security scanning pipeline\nmake cicd-release-test     # Test release build process\nmake cicd-lint            # Lint CI/CD configuration files\n\n# Pipeline Management\nmake cicd-status          # Show current pipeline status\nmake cicd-monitor         # Monitor pipeline metrics\nmake cicd-rollback        # Rollback deployment\n\n# Deployment\nmake cicd-deploy-staging     # Deploy to staging environment\nmake cicd-deploy-production  # Deploy to production environment\n</code></pre>"},{"location":"CI_CD_PIPELINE/#key-features","title":"Key Features","text":""},{"location":"CI_CD_PIPELINE/#security-first-approach","title":"\ud83d\udd0d Security-First Approach","text":"<ol> <li>Multi-Tool Scanning</li> <li>Combines multiple security tools for comprehensive coverage</li> <li>SARIF format for unified reporting in GitHub Security tab</li> <li> <p>Fail-fast on critical vulnerabilities</p> </li> <li> <p>Container Security</p> </li> <li>Base image vulnerability scanning</li> <li>Dockerfile linting for best practices</li> <li> <p>Runtime security analysis</p> </li> <li> <p>Supply Chain Security</p> </li> <li>Dependency vulnerability tracking</li> <li>SBOM generation for transparency</li> <li>License compliance checking</li> </ol>"},{"location":"CI_CD_PIPELINE/#performance-optimizations","title":"\u26a1 Performance Optimizations","text":"<ol> <li>Parallel Execution</li> <li>Matrix builds for multiple platforms</li> <li>Concurrent security scans</li> <li> <p>Parallel test execution</p> </li> <li> <p>Intelligent Caching</p> </li> <li>Go module caching</li> <li>Docker layer caching</li> <li> <p>NPM dependency caching</p> </li> <li> <p>Conditional Execution</p> </li> <li>Path-based triggers</li> <li>Environment-specific workflows</li> <li>Emergency deployment options</li> </ol>"},{"location":"CI_CD_PIPELINE/#infrastructure-integration","title":"\ud83c\udfd7\ufe0f Infrastructure Integration","text":"<ol> <li>Service Discovery Testing</li> <li>Consul service registration validation</li> <li>Kubernetes DNS resolution testing</li> <li> <p>Load balancing verification</p> </li> <li> <p>Istio Service Mesh</p> </li> <li>Traffic management configuration</li> <li>Security policy validation</li> <li> <p>Observability integration</p> </li> <li> <p>Multi-Environment Support</p> </li> <li>Environment-specific configurations</li> <li>Progressive deployment strategies</li> <li>Automated rollback capabilities</li> </ol>"},{"location":"CI_CD_PIPELINE/#pipeline-triggers","title":"Pipeline Triggers","text":""},{"location":"CI_CD_PIPELINE/#automatic-triggers","title":"Automatic Triggers","text":"<ul> <li>Push to main/develop: Full CI pipeline with deployment to staging</li> <li>Pull Requests: CI pipeline with security scanning</li> <li>Tag Creation (<code>v*.*.*</code>): Release pipeline with multi-platform builds</li> <li>Schedule: Daily security scans at 2 AM UTC</li> </ul>"},{"location":"CI_CD_PIPELINE/#manual-triggers","title":"Manual Triggers","text":"<ul> <li>Workflow Dispatch: Manual deployment with environment selection</li> <li>Emergency Deploy: Skip tests for critical deployments</li> <li>Security Scan: On-demand security validation</li> </ul>"},{"location":"CI_CD_PIPELINE/#environment-configuration","title":"Environment Configuration","text":""},{"location":"CI_CD_PIPELINE/#staging-environment","title":"Staging Environment","text":"<ul> <li>Namespace: <code>zamaz-staging</code></li> <li>Replicas: 2 per service</li> <li>Resources: Standard allocations</li> <li>Monitoring: Full observability stack</li> <li>Auto-Deploy: On main branch pushes</li> </ul>"},{"location":"CI_CD_PIPELINE/#production-environment","title":"Production Environment","text":"<ul> <li>Namespace: <code>zamaz-production</code></li> <li>Replicas: 3 per service with HA</li> <li>Resources: Production-grade allocations</li> <li>Monitoring: Enhanced alerting and monitoring</li> <li>Deploy: Manual approval required</li> <li>Safety: Tagged versions only</li> </ul>"},{"location":"CI_CD_PIPELINE/#security-baseline","title":"Security Baseline","text":""},{"location":"CI_CD_PIPELINE/#required-security-controls","title":"Required Security Controls","text":"<ol> <li>Code Scanning: SAST tools for all languages</li> <li>Dependency Scanning: Vulnerability assessment for all dependencies</li> <li>Container Scanning: Base image and runtime security</li> <li>Secret Detection: Comprehensive secret scanning</li> <li>Infrastructure Scanning: IaC security validation</li> </ol>"},{"location":"CI_CD_PIPELINE/#compliance-validation","title":"Compliance Validation","text":"<ul> <li>Security Files: Required security configuration files</li> <li>Docker Security: Non-root users, health checks, minimal base images</li> <li>Kubernetes Security: Security contexts, RBAC, network policies</li> <li>Service Mesh: mTLS, authorization policies, traffic encryption</li> </ul>"},{"location":"CI_CD_PIPELINE/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"CI_CD_PIPELINE/#pipeline-metrics","title":"Pipeline Metrics","text":"<ul> <li>Build Times: Track build performance across environments</li> <li>Test Coverage: Maintain 80%+ code coverage</li> <li>Security Scores: Track vulnerability trends</li> <li>Deployment Success: Monitor deployment reliability</li> </ul>"},{"location":"CI_CD_PIPELINE/#alerting","title":"Alerting","text":"<ul> <li>Failed Builds: Immediate notification for pipeline failures</li> <li>Security Issues: Alert on new vulnerabilities</li> <li>Deployment Issues: Monitor post-deployment health</li> <li>Compliance Drift: Track security baseline changes</li> </ul>"},{"location":"CI_CD_PIPELINE/#rollback-procedures","title":"Rollback Procedures","text":""},{"location":"CI_CD_PIPELINE/#automated-rollback","title":"Automated Rollback","text":"<ul> <li>Health Check Failures: Automatic rollback on service health issues</li> <li>Circuit Breaker: Service mesh-level failure detection</li> <li>Resource Constraints: Rollback on resource exhaustion</li> </ul>"},{"location":"CI_CD_PIPELINE/#manual-rollback","title":"Manual Rollback","text":"<pre><code># Kubernetes rollback\nkubectl rollout undo deployment/zamaz-auth-service -n zamaz\n\n# Version-specific rollback\nkubectl set image deployment/zamaz-auth-service auth-service=ghcr.io/repo/auth-service:v1.2.3 -n zamaz\n\n# Emergency procedures\nmake cicd-rollback\n</code></pre>"},{"location":"CI_CD_PIPELINE/#package-distribution","title":"Package Distribution","text":""},{"location":"CI_CD_PIPELINE/#supported-package-managers","title":"Supported Package Managers","text":"<ul> <li>Homebrew (macOS/Linux): <code>brew install zamaz</code></li> <li>AUR (Arch Linux): <code>yay -S zamaz-bin</code></li> <li>Snap (Universal Linux): <code>snap install zamaz</code></li> <li>Winget (Windows): <code>winget install zamaz</code></li> <li>Nix (NixOS): <code>nix-env -iA nixpkgs.zamaz</code></li> </ul>"},{"location":"CI_CD_PIPELINE/#container-registries","title":"Container Registries","text":"<ul> <li>GitHub Container Registry: <code>ghcr.io/zamaz/root-zamaz/auth-service</code></li> <li>Multi-Architecture: AMD64 and ARM64 support</li> <li>Version Tags: Latest, semantic versions, and branch-specific tags</li> </ul>"},{"location":"CI_CD_PIPELINE/#development-workflow","title":"Development Workflow","text":""},{"location":"CI_CD_PIPELINE/#local-development","title":"Local Development","text":"<ol> <li>Pre-commit Hooks: Automated linting and testing</li> <li>Local Testing: <code>make cicd-test-workflows</code> for local validation</li> <li>Security Testing: <code>make cicd-security-test</code> for local security scanning</li> </ol>"},{"location":"CI_CD_PIPELINE/#contributing","title":"Contributing","text":"<ol> <li>Feature Branches: Create from develop branch</li> <li>Pull Requests: Trigger full CI pipeline</li> <li>Code Review: Required before merge</li> <li>Automated Testing: All tests must pass</li> </ol>"},{"location":"CI_CD_PIPELINE/#release-process","title":"Release Process","text":"<ol> <li>Version Tagging: Create semantic version tags</li> <li>Automated Build: GoReleaser builds all artifacts</li> <li>Security Validation: Comprehensive security scanning</li> <li>Distribution: Automatic package manager updates</li> </ol>"},{"location":"CI_CD_PIPELINE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"CI_CD_PIPELINE/#common-issues","title":"Common Issues","text":"<ol> <li>Build Failures</li> <li>Check Go module compatibility</li> <li>Verify dependency availability</li> <li> <p>Review build logs for specific errors</p> </li> <li> <p>Security Scan Failures</p> </li> <li>Review vulnerability reports</li> <li>Update dependencies with known vulnerabilities</li> <li> <p>Add exceptions for false positives</p> </li> <li> <p>Deployment Issues</p> </li> <li>Verify Kubernetes cluster connectivity</li> <li>Check namespace permissions</li> <li>Review service discovery configuration</li> </ol>"},{"location":"CI_CD_PIPELINE/#debug-commands","title":"Debug Commands","text":"<pre><code># Check pipeline status\nmake cicd-status\n\n# Validate configurations\nmake cicd-validate\n\n# Test locally\nmake cicd-test-workflows\n\n# Monitor metrics\nmake cicd-monitor\n</code></pre>"},{"location":"CI_CD_PIPELINE/#future-enhancements","title":"Future Enhancements","text":""},{"location":"CI_CD_PIPELINE/#planned-features","title":"Planned Features","text":"<ul> <li>GitOps Integration: ArgoCD deployment automation</li> <li>Chaos Engineering: Automated resilience testing</li> <li>Performance Testing: Load testing integration</li> <li>Multi-Cloud Deployment: Support for multiple cloud providers</li> </ul>"},{"location":"CI_CD_PIPELINE/#advanced-security","title":"Advanced Security","text":"<ul> <li>Runtime Security: Falco integration for runtime protection</li> <li>Policy as Code: OPA/Gatekeeper policy enforcement</li> <li>Zero Trust: Enhanced service mesh security policies</li> <li>Compliance Automation: Automated compliance reporting</li> </ul> <p>This modern CI/CD pipeline provides a robust, secure, and scalable foundation for the Zamaz platform, integrating seamlessly with the service discovery and Istio service mesh infrastructure while maintaining high security and operational standards.</p>"},{"location":"DEVELOPMENT/","title":"Development Guide - MVP Zero Trust Authentication","text":"<p>This comprehensive guide provides everything developers need to contribute to, extend, or integrate with the MVP Zero Trust Authentication system. It covers architecture, development workflows, testing strategies, and deployment procedures.</p>"},{"location":"DEVELOPMENT/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Quick Start</li> <li>Architecture Overview</li> <li>Development Environment</li> <li>Development Workflows</li> <li>Testing Strategy</li> <li>SDK Development</li> <li>API Documentation</li> <li>Database Management</li> <li>Monitoring &amp; Observability</li> <li>Security Guidelines</li> <li>Deployment</li> <li>Troubleshooting</li> <li>Contributing Guidelines</li> </ul>"},{"location":"DEVELOPMENT/#quick-start","title":"Quick Start","text":""},{"location":"DEVELOPMENT/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go: 1.23.8+ (with toolchain 1.23.10)</li> <li>Node.js: 18.20.4+ (see <code>.nvmrc</code>)</li> <li>Docker: 20.10+ with Docker Compose</li> <li>Make: For build automation</li> <li>Git: For version control</li> </ul>"},{"location":"DEVELOPMENT/#initial-setup","title":"Initial Setup","text":"<pre><code># Clone the repository\ngit clone https://github.com/mvp/zerotrust-auth.git\ncd zerotrust-auth\n\n# Setup development environment\nmake dev-setup\n\n# Start the development stack\nmake dev-up\n\n# Verify installation\nmake dev-validate\n\n# Run tests\nmake test-all\n\n# Build everything\nmake build-all\n</code></pre>"},{"location":"DEVELOPMENT/#quick-development-commands","title":"Quick Development Commands","text":"<pre><code># Development\nmake dev-up          # Start all services\nmake dev-down        # Stop all services\nmake dev-logs        # Follow all logs\nmake dev-frontend    # Start frontend dev server\n\n# Testing\nmake test            # Run all tests\nmake test-integration # Run integration tests\nmake test-coverage   # Generate coverage reports\n\n# Quality\nmake lint-all        # Run all linters\nmake security-scan   # Security vulnerability scan\nmake quality-gate    # Run quality checks\n\n# Build\nmake build-all       # Build all components\nmake build-docker    # Build Docker images\n</code></pre>"},{"location":"DEVELOPMENT/#architecture-overview","title":"Architecture Overview","text":""},{"location":"DEVELOPMENT/#system-components","title":"System Components","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Frontend      \u2502    \u2502   API Gateway   \u2502    \u2502  Auth Service   \u2502\n\u2502   (Vite/React)  \u2502\u2500\u2500\u2500\u25b6\u2502   (Envoy)      \u2502\u2500\u2500\u2500\u25b6\u2502   (Go/Fiber)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                       \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Monitoring    \u2502    \u2502    Message      \u2502    \u2502    Database     \u2502\n\u2502 (Grafana/Prom)  \u2502    \u2502 Queue (NATS)    \u2502    \u2502 (PostgreSQL)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                       \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Caching       \u2502    \u2502   Identity      \u2502    \u2502    Logging      \u2502\n\u2502   (Redis)       \u2502    \u2502  (SPIRE)        \u2502    \u2502   (Jaeger)      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"DEVELOPMENT/#key-design-principles","title":"Key Design Principles","text":"<ol> <li>Zero Trust Security: Never trust, always verify</li> <li>Microservices: Loosely coupled, independently deployable</li> <li>Observability First: Comprehensive logging, metrics, and tracing</li> <li>API-First: Well-defined interfaces and contracts</li> <li>Cloud Native: Kubernetes-ready with service mesh support</li> </ol>"},{"location":"DEVELOPMENT/#directory-structure","title":"Directory Structure","text":"<pre><code>root-zamaz/\n\u251c\u2500\u2500 cmd/                    # Application entrypoints\n\u2502   \u251c\u2500\u2500 server/            # Main auth server\n\u2502   \u2514\u2500\u2500 ztcli/             # CLI tool\n\u251c\u2500\u2500 pkg/                   # Reusable packages\n\u2502   \u251c\u2500\u2500 auth/              # Authentication logic\n\u2502   \u251c\u2500\u2500 middleware/        # HTTP middleware\n\u2502   \u251c\u2500\u2500 observability/     # Logging, metrics, tracing\n\u2502   \u251c\u2500\u2500 messaging/         # NATS integration\n\u2502   \u2514\u2500\u2500 sdk/               # SDK implementations\n\u251c\u2500\u2500 internal/              # Private application code\n\u2502   \u251c\u2500\u2500 handlers/          # HTTP handlers\n\u2502   \u251c\u2500\u2500 services/          # Business logic\n\u2502   \u2514\u2500\u2500 models/            # Data models\n\u251c\u2500\u2500 frontend/              # Frontend application\n\u251c\u2500\u2500 deployments/           # Deployment configurations\n\u251c\u2500\u2500 tests/                 # Test suites\n\u251c\u2500\u2500 docs/                  # Documentation\n\u2514\u2500\u2500 scripts/               # Build and deployment scripts\n</code></pre>"},{"location":"DEVELOPMENT/#development-environment","title":"Development Environment","text":""},{"location":"DEVELOPMENT/#local-setup","title":"Local Setup","text":"<p>The development environment uses Docker Compose to orchestrate all services:</p> <pre><code># docker-compose.yml (simplified)\nservices:\n  auth-service:\n    build: .\n    ports: [\"8080:8080\"]\n    depends_on: [postgres, redis, nats]\n\n  postgres:\n    image: postgres:15\n    ports: [\"5432:5432\"]\n\n  redis:\n    image: redis:7-alpine\n    ports: [\"6379:6379\"]\n\n  nats:\n    image: nats:2.10-alpine\n    ports: [\"4222:4222\"]\n\n  # Observability stack\n  prometheus: { ports: [\"9090:9090\"] }\n  grafana: { ports: [\"3000:3000\"] }\n  jaeger: { ports: [\"16686:16686\"] }\n</code></pre>"},{"location":"DEVELOPMENT/#environment-variables","title":"Environment Variables","text":"<pre><code># Core Configuration\nexport DB_HOST=localhost\nexport DB_PORT=5432\nexport DB_NAME=mvp_db\nexport DB_USER=mvp_user\nexport DB_PASSWORD=mvp_password\n\n# Services\nexport NATS_URL=nats://localhost:4222\nexport REDIS_URL=redis://localhost:6379\n\n# Security\nexport JWT_SECRET=your-jwt-secret\nexport API_KEY=your-api-key\n\n# Development\nexport LOG_LEVEL=debug\nexport ENABLE_CORS=true\n</code></pre>"},{"location":"DEVELOPMENT/#service-urls","title":"Service URLs","text":"Service URL Credentials Auth API http://localhost:8080 API Key required Frontend http://localhost:3000 - Grafana http://localhost:3000 admin/admin Prometheus http://localhost:9090 - Jaeger http://localhost:16686 - Postgres localhost:5432 mvp_user/mvp_password Redis localhost:6379 - NATS localhost:4222 -"},{"location":"DEVELOPMENT/#development-workflows","title":"Development Workflows","text":""},{"location":"DEVELOPMENT/#feature-development","title":"Feature Development","text":"<pre><code># 1. Create feature branch\ngit checkout -b feature/new-authentication-method\n\n# 2. Start development environment\nmake dev-up\n\n# 3. Make changes and test iteratively\nmake test-go              # Run Go tests\nmake test-frontend        # Run frontend tests\nmake lint-all            # Check code quality\n\n# 4. Run integration tests\nmake test-integration\n\n# 5. Build and validate\nmake build-all\nmake quality-gate\n\n# 6. Create pull request\ngit add .\ngit commit -m \"feat: add new authentication method\"\ngit push origin feature/new-authentication-method\n</code></pre>"},{"location":"DEVELOPMENT/#code-quality-checks","title":"Code Quality Checks","text":"<pre><code># Comprehensive quality check\nmake quality-all\n\n# Individual checks\nmake lint-go             # Go linting with golangci-lint\nmake lint-frontend       # Frontend linting with ESLint\nmake security-scan       # Security vulnerability scanning\nmake test-coverage       # Generate coverage reports\nmake deps-audit          # Dependency vulnerability check\n</code></pre>"},{"location":"DEVELOPMENT/#database-migrations","title":"Database Migrations","text":"<pre><code># Create new migration\nmake db-migrate\n\n# Reset database (development only)\nmake db-reset\n\n# Backup database\nmake db-backup\n\n# Restore database\nmake db-restore file=backup.sql\n</code></pre>"},{"location":"DEVELOPMENT/#testing-strategy","title":"Testing Strategy","text":""},{"location":"DEVELOPMENT/#test-pyramid","title":"Test Pyramid","text":"<pre><code>       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502    E2E Tests        \u2502  \u2190 Few, high-level integration tests\n       \u2502   (Playwright)      \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502   Integration Tests       \u2502  \u2190 API and component integration\n     \u2502   (Go + Jest)             \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502      Unit Tests               \u2502  \u2190 Many, fast, isolated tests\n   \u2502   (Go test + Vitest)          \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"DEVELOPMENT/#running-tests","title":"Running Tests","text":"<pre><code># All tests\nmake test-all\n\n# By category\nmake test-go              # Go unit tests\nmake test-frontend        # Frontend unit tests  \nmake test-integration     # Integration tests\nmake test-e2e            # End-to-end tests\nmake test-load           # Load tests with k6\n\n# With coverage\nmake test-coverage\nmake coverage-validate   # Enforce coverage thresholds\n\n# Watch mode for development\nmake test-watch\n</code></pre>"},{"location":"DEVELOPMENT/#test-configuration","title":"Test Configuration","text":"<p>Go Tests: <pre><code>// Example test structure\nfunc TestAuthenticateUser(t *testing.T) {\n    tests := []struct {\n        name    string\n        email   string\n        password string\n        want    *AuthResponse\n        wantErr bool\n    }{\n        {\n            name:     \"valid credentials\",\n            email:    \"user@example.com\", \n            password: \"validpassword\",\n            want:     &amp;AuthResponse{Success: true},\n            wantErr:  false,\n        },\n        // More test cases...\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            // Test implementation\n        })\n    }\n}\n</code></pre></p> <p>Frontend Tests (Vitest): <pre><code>// Example component test\ndescribe('LoginForm', () =&gt; {\n  test('submits valid credentials', async () =&gt; {\n    const mockLogin = vi.fn()\n    render(&lt;LoginForm onLogin={mockLogin} /&gt;)\n\n    await user.type(screen.getByLabelText(/email/i), 'user@example.com')\n    await user.type(screen.getByLabelText(/password/i), 'password')\n    await user.click(screen.getByRole('button', { name: /login/i }))\n\n    expect(mockLogin).toHaveBeenCalledWith({\n      email: 'user@example.com',\n      password: 'password'\n    })\n  })\n})\n</code></pre></p>"},{"location":"DEVELOPMENT/#sdk-development","title":"SDK Development","text":""},{"location":"DEVELOPMENT/#go-sdk","title":"Go SDK","text":"<p>Location: <code>pkg/sdk/go/</code></p> <pre><code>// Example SDK usage\nclient, err := sdk.NewClient(sdk.Config{\n    BaseURL: \"https://auth.example.com\",\n    APIKey:  \"your-api-key\",\n    Timeout: 30 * time.Second,\n})\n\nresponse, err := client.Authenticate(ctx, sdk.AuthenticationRequest{\n    Email:    \"user@example.com\",\n    Password: \"password\",\n})\n</code></pre>"},{"location":"DEVELOPMENT/#javascripttypescript-sdk","title":"JavaScript/TypeScript SDK","text":"<p>Location: <code>pkg/sdk/javascript/</code></p> <pre><code>// Example SDK usage\nimport { ZeroTrustClient } from '@mvp/zerotrust-sdk'\n\nconst client = new ZeroTrustClient({\n  baseURL: 'https://auth.example.com',\n  apiKey: 'your-api-key'\n})\n\nconst response = await client.authenticate({\n  email: 'user@example.com',\n  password: 'password'\n})\n</code></pre>"},{"location":"DEVELOPMENT/#python-sdk","title":"Python SDK","text":"<p>Location: <code>pkg/sdk/python/</code></p> <pre><code># Example SDK usage\nfrom zerotrust_sdk import ZeroTrustClient\n\nwith ZeroTrustClient(\n    base_url=\"https://auth.example.com\",\n    api_key=\"your-api-key\"\n) as client:\n    response = client.authenticate(\"user@example.com\", \"password\")\n</code></pre>"},{"location":"DEVELOPMENT/#sdk-development-commands","title":"SDK Development Commands","text":"<pre><code># Build all SDKs\nmake sdk-build-all\n\n# Test SDKs\nmake sdk-test-all\n\n# Generate SDK code\nmake dev-generate-all\n</code></pre>"},{"location":"DEVELOPMENT/#api-documentation","title":"API Documentation","text":""},{"location":"DEVELOPMENT/#api-endpoints","title":"API Endpoints","text":"<p>Authentication: - <code>POST /api/v1/auth/login</code> - User authentication - <code>POST /api/v1/auth/refresh</code> - Token refresh - <code>POST /api/v1/auth/logout</code> - User logout - <code>POST /api/v1/auth/validate</code> - Token validation</p> <p>User Management: - <code>GET /api/v1/users/profile</code> - Get user profile - <code>PUT /api/v1/users/profile</code> - Update user profile - <code>GET /api/v1/admin/users</code> - List users (admin) - <code>POST /api/v1/admin/users</code> - Create user (admin)</p> <p>System: - <code>GET /health</code> - Health check - <code>GET /health/ready</code> - Readiness probe - <code>GET /health/live</code> - Liveness probe - <code>GET /metrics</code> - Prometheus metrics</p>"},{"location":"DEVELOPMENT/#requestresponse-examples","title":"Request/Response Examples","text":"<p>Login Request: <pre><code>POST /api/v1/auth/login\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"securepassword\",\n  \"remember\": true\n}\n</code></pre></p> <p>Login Response: <pre><code>{\n  \"access_token\": \"eyJhbGciOiJSUzI1NiIs...\",\n  \"refresh_token\": \"eyJhbGciOiJSUzI1NiIs...\",\n  \"expires_at\": \"2024-12-31T23:59:59Z\",\n  \"token_type\": \"Bearer\",\n  \"user\": {\n    \"id\": \"user-123\",\n    \"email\": \"user@example.com\",\n    \"display_name\": \"John Doe\",\n    \"roles\": [\"user\"]\n  },\n  \"trust_score\": 0.95\n}\n</code></pre></p>"},{"location":"DEVELOPMENT/#cli-tool","title":"CLI Tool","text":"<pre><code># Authentication\nztcli auth login user@example.com\nztcli auth logout\nztcli auth refresh &lt;refresh_token&gt;\n\n# Token operations\nztcli token validate &lt;access_token&gt;\nztcli token introspect &lt;access_token&gt;\n\n# User management\nztcli user list\nztcli user create --email user@example.com --role admin\nztcli user show &lt;user_id&gt;\n\n# System administration\nztcli system health\nztcli system status\nztcli system config\n\n# Development utilities\nztcli dev generate-key\nztcli dev test-connection\nztcli dev generate-client --lang go\n</code></pre>"},{"location":"DEVELOPMENT/#database-management","title":"Database Management","text":""},{"location":"DEVELOPMENT/#schema-management","title":"Schema Management","text":"<pre><code># Run migrations\nmake db-migrate\n\n# Create new migration\nmigrate create -ext sql -dir migrations -seq add_user_table\n\n# Check migration status\nmigrate -path migrations -database \"$DATABASE_URL\" version\n</code></pre>"},{"location":"DEVELOPMENT/#database-operations","title":"Database Operations","text":"<pre><code># Development\nmake db-reset           # Reset to clean state\nmake db-seed            # Load test data\n\n# Backup and restore\nmake db-backup\nmake db-restore file=backup.sql\n\n# Performance\nmake db-optimize-dev    # Development optimizations\nmake db-benchmark       # Performance testing\nmake db-analyze         # Query analysis\n</code></pre>"},{"location":"DEVELOPMENT/#schema-overview","title":"Schema Overview","text":"<pre><code>-- Core tables\nusers              -- User accounts and profiles\nuser_sessions       -- Active user sessions  \nrefresh_tokens      -- Refresh token storage\naudit_logs         -- Security audit trail\nrate_limits        -- Rate limiting data\nmfa_tokens         -- Multi-factor auth tokens\n\n-- Indexes for performance\nidx_users_email             -- Fast user lookup\nidx_sessions_user_id        -- Session queries\nidx_audit_logs_timestamp    -- Audit queries\nidx_rate_limits_key         -- Rate limit checks\n</code></pre>"},{"location":"DEVELOPMENT/#schema-documentation","title":"Schema Documentation","text":"<p>To help understand the database structure, this project uses <code>tbls</code> to generate schema documentation. This documentation provides details about tables, columns, types, and relationships.</p> <p>Generating the Documentation:</p> <ol> <li>Ensure Environment Variables are Set: The documentation generation relies on database connection details. Make sure your <code>.env</code> file is configured with the correct values for <code>DB_HOST</code>, <code>DB_PORT</code>, <code>DB_USER</code>, <code>DB_PASSWORD</code>, and <code>DB_NAME</code> (see <code>.env.example</code>). <code>DB_SSLMODE</code> will default to <code>disable</code> if not set.</li> <li>Run the Makefile Target: <pre><code>make docs-schema\n</code></pre>     Alternatively, you can run <code>make docs</code> which includes schema documentation along with other documentation generation steps.</li> </ol> <p>This command will use <code>tbls</code> to connect to the database, inspect its schema, and output Markdown files into the <code>docs/schema/</code> directory. The main documentation file will be <code>docs/schema/README.md</code> (or <code>docs/schema/&lt;DB_NAME&gt;.md</code>).</p> <p>ER Diagram (Optional):</p> <p><code>tbls</code> can also generate an Entity Relationship (ER) diagram. The configuration for this is in <code>docs/schema/.tbls.yml</code> (commented out by default). To enable it:     1. Uncomment the <code>er</code> section in <code>docs/schema/.tbls.yml</code>.     2. Ensure you have PlantUML (for <code>.puml</code> output) and Graphviz (for formats like <code>.png</code>, <code>.svg</code>) installed and available in your system's PATH.</p> <p>Keeping Documentation Updated:</p> <p>The generated documentation in <code>docs/schema/</code> should be committed to version control. For recommendations on how to automatically update this documentation as part of your CI/CD pipeline, refer to the CI integration recommendations provided when this feature was added, or check the project's CI configuration files.</p>"},{"location":"DEVELOPMENT/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"DEVELOPMENT/#metrics","title":"Metrics","text":"<p>Key metrics tracked: - Authentication: Login success/failure rates, MFA usage - Performance: Request latency, throughput, error rates - Security: Failed login attempts, suspicious activity - System: CPU, memory, database connections</p>"},{"location":"DEVELOPMENT/#logging","title":"Logging","text":"<pre><code>// Structured logging example\nlogger.Info().\n    Str(\"user_id\", userID).\n    Str(\"operation\", \"login\").\n    Float64(\"trust_score\", trustScore).\n    Dur(\"duration\", duration).\n    Msg(\"User authentication successful\")\n</code></pre>"},{"location":"DEVELOPMENT/#tracing","title":"Tracing","text":"<p>Distributed tracing with OpenTelemetry:</p> <pre><code>// Tracing example\nctx, span := tracer.Start(ctx, \"authenticate_user\")\ndefer span.End()\n\nspan.SetAttributes(\n    attribute.String(\"user.email\", email),\n    attribute.String(\"auth.method\", \"password\"),\n)\n</code></pre>"},{"location":"DEVELOPMENT/#monitoring-commands","title":"Monitoring Commands","text":"<pre><code># Setup monitoring\nmake monitoring-setup\n\n# Check status\nmake monitor-status\n\n# View logs\nmake monitor-logs\n\n# Access dashboards\nopen http://localhost:3000  # Grafana\nopen http://localhost:9090  # Prometheus  \nopen http://localhost:16686 # Jaeger\n</code></pre>"},{"location":"DEVELOPMENT/#security-guidelines","title":"Security Guidelines","text":""},{"location":"DEVELOPMENT/#authentication-security","title":"Authentication Security","text":"<ol> <li>Password Requirements</li> <li>Minimum 8 characters</li> <li>Must include uppercase, lowercase, number</li> <li>No common passwords (dictionary check)</li> <li> <p>Regular password rotation prompts</p> </li> <li> <p>Token Security</p> </li> <li>Short-lived access tokens (1 hour)</li> <li>Longer refresh tokens (7 days)</li> <li>Token rotation on refresh</li> <li> <p>Secure storage requirements</p> </li> <li> <p>Multi-Factor Authentication</p> </li> <li>TOTP support (Google Authenticator)</li> <li>SMS backup option</li> <li>Recovery codes</li> <li>Admin enforcement policies</li> </ol>"},{"location":"DEVELOPMENT/#api-security","title":"API Security","text":"<pre><code>// Rate limiting example\nlimiter := middleware.NewRateLimiter(middleware.Config{\n    Max:      100,\n    Duration: time.Minute,\n    KeyFunc: func(c *fiber.Ctx) string {\n        return c.IP() + \":\" + c.Get(\"User-Agent\")\n    },\n})\n</code></pre>"},{"location":"DEVELOPMENT/#security-testing","title":"Security Testing","text":"<pre><code># Security scans\nmake security-scan           # Vulnerability scanning\nmake security-audit          # Dependency audit\nmake security-install        # Install security tools\n\n# Penetration testing\nmake test-security          # Security test suite\n</code></pre>"},{"location":"DEVELOPMENT/#deployment","title":"Deployment","text":""},{"location":"DEVELOPMENT/#local-development","title":"Local Development","text":"<pre><code># Full development stack\nmake dev-up\n\n# Individual services\ndocker-compose up postgres redis nats\ngo run cmd/server/main.go\n</code></pre>"},{"location":"DEVELOPMENT/#docker-deployment","title":"Docker Deployment","text":"<pre><code># Build images\nmake build-docker\n\n# Deploy with compose\ndocker-compose -f docker-compose.prod.yml up -d\n</code></pre>"},{"location":"DEVELOPMENT/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<pre><code># Deploy to local cluster\nmake deploy-local\n\n# Production deployment\nkubectl apply -f deployments/kubernetes/\n</code></pre>"},{"location":"DEVELOPMENT/#cloud-deployment","title":"Cloud Deployment","text":"<p>AWS: <pre><code># Using Terraform\ncd deployments/terraform/aws\nterraform init\nterraform plan\nterraform apply\n</code></pre></p> <p>GCP: <pre><code># Using Cloud Run\ngcloud run deploy auth-service \\\n  --image gcr.io/project/auth-service \\\n  --platform managed \\\n  --region us-central1\n</code></pre></p>"},{"location":"DEVELOPMENT/#troubleshooting","title":"Troubleshooting","text":""},{"location":"DEVELOPMENT/#common-issues","title":"Common Issues","text":"<p>Database Connection Issues: <pre><code># Check database connectivity\nmake db-health\npsql -h localhost -U mvp_user -d mvp_db\n\n# Reset database\nmake db-reset\n</code></pre></p> <p>Service Discovery Issues: <pre><code># Check service health\ncurl http://localhost:8080/health\n\n# Check logs\nmake dev-logs\ndocker-compose logs auth-service\n</code></pre></p> <p>Authentication Failures: <pre><code># Test token validation\nztcli token validate &lt;token&gt;\n\n# Check JWT secret\necho $JWT_SECRET\n\n# Verify API key\ncurl -H \"X-API-Key: $API_KEY\" http://localhost:8080/health\n</code></pre></p>"},{"location":"DEVELOPMENT/#debug-commands","title":"Debug Commands","text":"<pre><code># Enable debug logging\nexport LOG_LEVEL=debug\nmake dev-up\n\n# Run with debugger\ndlv debug cmd/server/main.go\n\n# Profile performance\ngo tool pprof http://localhost:8080/debug/pprof/profile\n</code></pre>"},{"location":"DEVELOPMENT/#log-analysis","title":"Log Analysis","text":"<pre><code># Filter logs by level\nmake dev-logs | grep ERROR\n\n# Search for specific events  \nmake dev-logs | grep \"authentication failed\"\n\n# Follow specific service\ndocker-compose logs -f auth-service\n</code></pre>"},{"location":"DEVELOPMENT/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"DEVELOPMENT/#code-standards","title":"Code Standards","text":"<p>Go Code: - Follow effective Go guidelines - Use gofmt and goimports - Write comprehensive tests - Document public APIs</p> <p>Frontend Code: - Use TypeScript for type safety - Follow React best practices - Write component tests - Use ESLint and Prettier</p>"},{"location":"DEVELOPMENT/#pull-request-process","title":"Pull Request Process","text":"<ol> <li> <p>Create Feature Branch <pre><code>git checkout -b feature/description\n</code></pre></p> </li> <li> <p>Development</p> </li> <li>Write code following standards</li> <li>Add comprehensive tests</li> <li> <p>Update documentation</p> </li> <li> <p>Quality Checks <pre><code>make quality-gate\nmake test-all\n</code></pre></p> </li> <li> <p>Pull Request</p> </li> <li>Clear description of changes</li> <li>Reference related issues</li> <li>Include test results</li> </ol>"},{"location":"DEVELOPMENT/#code-review-checklist","title":"Code Review Checklist","text":"<ul> <li> Code follows style guidelines</li> <li> Tests are comprehensive</li> <li> Documentation is updated</li> <li> Security considerations addressed</li> <li> Performance impact assessed</li> <li> Breaking changes documented</li> </ul>"},{"location":"DEVELOPMENT/#release-process","title":"Release Process","text":"<pre><code># Create release branch\ngit checkout -b release/v1.2.0\n\n# Update version numbers\n# Update CHANGELOG.md\n# Create release tag\ngit tag -a v1.2.0 -m \"Release v1.2.0\"\n\n# Push release\ngit push origin release/v1.2.0\ngit push origin v1.2.0\n</code></pre>"},{"location":"DEVELOPMENT/#additional-resources","title":"Additional Resources","text":"<ul> <li>SDK Documentation - Detailed SDK guides</li> <li>Examples - Integration examples</li> <li>CLI Documentation - CLI tool usage</li> <li>API Reference - Complete API documentation</li> <li>Architecture Decision Records - Design decisions</li> <li>Deployment Guides - Platform-specific guides</li> </ul> <p>For questions or support, please: 1. Check this documentation 2. Search existing issues 3. Create a new issue with detailed information 4. Join our community discussions</p> <p>This guide is continuously updated. Please refer to the latest version for current procedures.</p>"},{"location":"GITOPS_IMPLEMENTATION_PLAN/","title":"GitOps Implementation Plan","text":""},{"location":"GITOPS_IMPLEMENTATION_PLAN/#phase-1-gitops-infrastructure-setup-week-1","title":"Phase 1: GitOps Infrastructure Setup (Week 1)","text":""},{"location":"GITOPS_IMPLEMENTATION_PLAN/#11-argocd-installation-and-configuration","title":"1.1 ArgoCD Installation and Configuration","text":"<ul> <li>Install ArgoCD in production cluster</li> <li>Configure RBAC and SSO integration</li> <li>Set up projects and application sets</li> <li>Configure notifications and alerts</li> </ul>"},{"location":"GITOPS_IMPLEMENTATION_PLAN/#12-repository-structure","title":"1.2 Repository Structure","text":"<ul> <li>Create separate repos for:</li> <li>Application code (current repo)</li> <li>Infrastructure as Code (Terraform)</li> <li>Kubernetes manifests (GitOps repo)</li> <li>Set up branch protection rules</li> <li>Implement required reviewers policy</li> </ul>"},{"location":"GITOPS_IMPLEMENTATION_PLAN/#phase-2-cicd-pipeline-enhancement-week-2","title":"Phase 2: CI/CD Pipeline Enhancement (Week 2)","text":""},{"location":"GITOPS_IMPLEMENTATION_PLAN/#21-github-actions-pipeline","title":"2.1 GitHub Actions Pipeline","text":"<pre><code>name: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  quality:\n    runs-on: ubuntu-latest\n    steps:\n      - Static code analysis (Go, TypeScript)\n      - Security scanning\n      - Dependency verification\n      - License compliance check\n\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - Unit tests\n      - Integration tests\n      - E2E tests with Playwright\n      - Coverage reports\n\n  security-scan:\n    runs-on: ubuntu-latest\n    steps:\n      - Container vulnerability scanning\n      - SAST scanning\n      - SCA scanning\n      - Secret detection\n\n  build:\n    runs-on: ubuntu-latest\n    needs: [quality, test, security-scan]\n    steps:\n      - Build container images\n      - Tag with commit SHA\n      - Push to registry\n      - Sign images\n\n  deploy-staging:\n    runs-on: ubuntu-latest\n    needs: build\n    environment: staging\n    steps:\n      - Update staging manifests\n      - ArgoCD sync staging\n      - Run smoke tests\n\n  deploy-production:\n    runs-on: ubuntu-latest\n    needs: deploy-staging\n    environment: production\n    steps:\n      - Update production manifests\n      - ArgoCD sync production\n      - Monitor rollout\n</code></pre>"},{"location":"GITOPS_IMPLEMENTATION_PLAN/#phase-3-helm-charts-enhancement-week-2-3","title":"Phase 3: Helm Charts Enhancement (Week 2-3)","text":""},{"location":"GITOPS_IMPLEMENTATION_PLAN/#31-core-application-chart-structure","title":"3.1 Core Application Chart Structure","text":"<pre><code>charts/zamaz/\n\u251c\u2500\u2500 Chart.yaml\n\u251c\u2500\u2500 values-prod.yaml\n\u251c\u2500\u2500 values-staging.yaml\n\u251c\u2500\u2500 values.yaml\n\u2514\u2500\u2500 templates/\n    \u251c\u2500\u2500 NOTES.txt\n    \u251c\u2500\u2500 _helpers.tpl\n    \u251c\u2500\u2500 deployment.yaml\n    \u251c\u2500\u2500 ingress.yaml\n    \u251c\u2500\u2500 service.yaml\n    \u251c\u2500\u2500 configmap.yaml\n    \u251c\u2500\u2500 secrets.yaml\n    \u251c\u2500\u2500 networkpolicy.yaml\n    \u251c\u2500\u2500 serviceaccount.yaml\n    \u251c\u2500\u2500 tests/\n    \u2514\u2500\u2500 monitoring/\n        \u251c\u2500\u2500 servicemonitor.yaml\n        \u251c\u2500\u2500 prometheusrule.yaml\n        \u2514\u2500\u2500 grafana-dashboard.yaml\n</code></pre>"},{"location":"GITOPS_IMPLEMENTATION_PLAN/#32-progressive-delivery-configuration","title":"3.2 Progressive Delivery Configuration","text":"<ul> <li>Implement Argo Rollouts</li> <li>Configure canary deployments</li> <li>Set up metric-based promotion</li> <li>Define rollback criteria</li> </ul>"},{"location":"GITOPS_IMPLEMENTATION_PLAN/#phase-4-security-and-observability-week-3-4","title":"Phase 4: Security and Observability (Week 3-4)","text":""},{"location":"GITOPS_IMPLEMENTATION_PLAN/#41-security-implementation","title":"4.1 Security Implementation","text":"<ul> <li>Set up HashiCorp Vault integration</li> <li>Configure sealed-secrets</li> <li>Implement network policies</li> <li>Set up image scanning in CI/CD</li> </ul>"},{"location":"GITOPS_IMPLEMENTATION_PLAN/#42-monitoring-stack","title":"4.2 Monitoring Stack","text":"<ul> <li>Deploy Prometheus Operator</li> <li>Configure Grafana dashboards</li> <li>Set up Loki for log aggregation</li> <li>Implement Jaeger for tracing</li> </ul>"},{"location":"GITOPS_IMPLEMENTATION_PLAN/#43-resource-management","title":"4.3 Resource Management","text":"<ul> <li>Define resource quotas</li> <li>Set up HPA and VPA</li> <li>Implement pod disruption budgets</li> <li>Configure cluster autoscaling</li> </ul>"},{"location":"GITOPS_IMPLEMENTATION_PLAN/#phase-5-documentation-and-training-week-4","title":"Phase 5: Documentation and Training (Week 4)","text":""},{"location":"GITOPS_IMPLEMENTATION_PLAN/#51-documentation","title":"5.1 Documentation","text":"<ul> <li>Deployment procedures</li> <li>Rollback procedures</li> <li>Incident response playbooks</li> <li>Architecture diagrams</li> <li>Security policies</li> </ul>"},{"location":"GITOPS_IMPLEMENTATION_PLAN/#52-runbooks","title":"5.2 Runbooks","text":"<ul> <li>Service deployment</li> <li>Monitoring and alerting</li> <li>Incident management</li> <li>Disaster recovery</li> </ul>"},{"location":"GITOPS_IMPLEMENTATION_PLAN/#implementation-timeline","title":"Implementation Timeline","text":"<ul> <li>Week 1: Phases 1</li> <li>Week 2: Phases 2 and start of 3</li> <li>Week 3: Complete Phase 3 and start Phase 4</li> <li>Week 4: Complete Phase 4 and Phase 5</li> </ul>"},{"location":"GITOPS_IMPLEMENTATION_PLAN/#success-criteria","title":"Success Criteria","text":"<ol> <li>Zero-touch deployments to staging and production</li> <li>Automated rollbacks on failure</li> <li>Less than 5-minute recovery time for incidents</li> <li>99.9% deployment success rate</li> <li>100% automated security scanning coverage</li> <li>Complete audit trail for all changes</li> </ol>"},{"location":"GITOPS_QUICKSTART/","title":"GitOps Quick Start Guide","text":""},{"location":"GITOPS_QUICKSTART/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster access</li> <li>ArgoCD CLI installed</li> <li>Helm v3+</li> <li>kubectl</li> </ul>"},{"location":"GITOPS_QUICKSTART/#initial-setup","title":"Initial Setup","text":"<ol> <li> <p>Deploy ArgoCD <pre><code>kubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n</code></pre></p> </li> <li> <p>Configure Git Repository</p> </li> <li>Add your repository to ArgoCD</li> <li>Configure access credentials</li> <li> <p>Set up webhook notifications</p> </li> <li> <p>Deploy Application <pre><code># Apply the ArgoCD application\nkubectl apply -f deployments/kubernetes/argocd/application.yaml\n\n# Verify application sync\nargocd app sync zamaz\n</code></pre></p> </li> </ol>"},{"location":"GITOPS_QUICKSTART/#common-operations","title":"Common Operations","text":""},{"location":"GITOPS_QUICKSTART/#deploying-changes","title":"Deploying Changes","text":"<ol> <li>Make changes to your code/configuration</li> <li>Push to the Git repository</li> <li>ArgoCD will automatically sync changes</li> </ol>"},{"location":"GITOPS_QUICKSTART/#monitoring-deployments","title":"Monitoring Deployments","text":"<pre><code># Check deployment status\n./scripts/validate-gitops.sh\n\n# Monitor health metrics\n./scripts/pre-deployment-check.sh\n</code></pre>"},{"location":"GITOPS_QUICKSTART/#handling-incidents","title":"Handling Incidents","text":"<pre><code># Run incident response script\n./scripts/incident-response.sh production\n</code></pre>"},{"location":"GITOPS_QUICKSTART/#environment-management","title":"Environment Management","text":""},{"location":"GITOPS_QUICKSTART/#staging-deployment","title":"Staging Deployment","text":"<pre><code>argocd app create zamaz-staging \\\n  --dest-namespace zamaz-staging \\\n  --dest-server https://kubernetes.default.svc \\\n  --path charts/zamaz \\\n  --values values-staging.yaml\n</code></pre>"},{"location":"GITOPS_QUICKSTART/#production-deployment","title":"Production Deployment","text":"<pre><code># Run pre-deployment checks\n./scripts/pre-deployment-check.sh production\n\n# Deploy to production\nargocd app sync zamaz-production\n</code></pre>"},{"location":"GITOPS_QUICKSTART/#monitoring-alerts","title":"Monitoring &amp; Alerts","text":""},{"location":"GITOPS_QUICKSTART/#access-dashboards","title":"Access Dashboards","text":"<ul> <li>Grafana: https://grafana.your-domain.com</li> <li>Prometheus: https://prometheus.your-domain.com</li> <li>ArgoCD: https://argocd.your-domain.com</li> </ul>"},{"location":"GITOPS_QUICKSTART/#common-metrics","title":"Common Metrics","text":"<ul> <li>Application success rate</li> <li>Latency percentiles</li> <li>Resource utilization</li> <li>Cost optimization metrics</li> </ul>"},{"location":"GITOPS_QUICKSTART/#troubleshooting","title":"Troubleshooting","text":""},{"location":"GITOPS_QUICKSTART/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Sync Failures <pre><code># Check sync status\nargocd app get zamaz-production --refresh\n\n# Force sync if needed\nargocd app sync zamaz-production --force\n</code></pre></p> </li> <li> <p>Health Check Failures <pre><code># Run health validation\n./scripts/validate-gitops.sh\n\n# Check application logs\nkubectl logs -n zamaz-production -l app=zamaz\n</code></pre></p> </li> <li> <p>Performance Issues</p> </li> <li>Check Grafana dashboards for anomalies</li> <li>Review resource utilization</li> <li>Verify autoscaling behavior</li> </ol>"},{"location":"GITOPS_QUICKSTART/#recovery-procedures","title":"Recovery Procedures","text":"<ol> <li> <p>Quick Rollback <pre><code># Automatic rollback\n./scripts/incident-response.sh production\n\n# Manual rollback if needed\nargocd app rollback zamaz-production\n</code></pre></p> </li> <li> <p>Data Recovery <pre><code># List available backups\nvelero get backup\n\n# Restore from backup\nvelero restore create --from-backup backup-name\n</code></pre></p> </li> </ol>"},{"location":"GITOPS_QUICKSTART/#best-practices","title":"Best Practices","text":"<ol> <li>Change Management</li> <li>Always use Git for changes</li> <li>Follow progressive delivery pattern</li> <li> <p>Validate changes in staging first</p> </li> <li> <p>Monitoring</p> </li> <li>Regularly review SLO dashboards</li> <li>Keep alert thresholds updated</li> <li> <p>Monitor cost optimization metrics</p> </li> <li> <p>Security</p> </li> <li>Rotate secrets regularly</li> <li>Review network policies</li> <li>Keep dependencies updated</li> </ol>"},{"location":"GITOPS_QUICKSTART/#support","title":"Support","text":"<p>For issues or questions: - Slack: #platform-team - Email: platform-support@your-company.com - On-call: Use PagerDuty rotation</p>"},{"location":"HELM_CHARTS_REFERENCE/","title":"Helm Charts Reference","text":""},{"location":"HELM_CHARTS_REFERENCE/#overview","title":"Overview","text":"<p>This document provides a comprehensive reference for all Helm charts created for the Zamaz Zero Trust Authentication MVP with Istio Service Mesh integration.</p>"},{"location":"HELM_CHARTS_REFERENCE/#chart-structure","title":"Chart Structure","text":"<pre><code>charts/\n\u251c\u2500\u2500 zamaz/                      # Main application chart\n\u251c\u2500\u2500 istio-mesh/                 # Service mesh configuration\n\u251c\u2500\u2500 spire-integration/          # SPIRE workload identity\n\u251c\u2500\u2500 security-policies/          # Security and network policies  \n\u2514\u2500\u2500 observability/             # Enhanced monitoring stack\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#chart-dependencies","title":"Chart Dependencies","text":"<pre><code>graph TD\n    A[zamaz] --&gt; B[istio-mesh]\n    B --&gt; C[spire-integration]\n    B --&gt; D[security-policies]\n    B --&gt; E[observability]\n\n    F[Istio Base] --&gt; B\n    G[PostgreSQL] --&gt; A\n    H[Redis] --&gt; A\n    I[Prometheus] --&gt; E\n    J[Grafana] --&gt; E\n    K[Jaeger] --&gt; E</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#charts-reference","title":"Charts Reference","text":""},{"location":"HELM_CHARTS_REFERENCE/#1-zamaz-main-application","title":"1. zamaz (Main Application)","text":"<p>Purpose: Deploys the Zamaz Zero Trust Authentication application with optional Istio service mesh support.</p>"},{"location":"HELM_CHARTS_REFERENCE/#key-features","title":"Key Features","text":"<ul> <li>Dual deployment support (legacy + mesh)</li> <li>Istio sidecar injection configuration</li> <li>SPIRE workload identity integration</li> <li>Enhanced security context</li> <li>Comprehensive health checks</li> </ul>"},{"location":"HELM_CHARTS_REFERENCE/#configuration-examples","title":"Configuration Examples","text":"<pre><code># Basic deployment\nglobal:\n  serviceMesh:\n    enabled: false\n\nreplicaCount: 3\nimage:\n  repository: zamaz/server\n  tag: \"1.0.0\"\n</code></pre> <pre><code># Service mesh deployment\nglobal:\n  serviceMesh:\n    enabled: true\n    namespace: zamaz-mesh\n    istio:\n      injection: enabled\n\nistio:\n  enabled: true\n  security:\n    peerAuthentication:\n      enabled: true\n      mtls:\n        mode: STRICT\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#values-schema","title":"Values Schema","text":"Parameter Description Default <code>global.serviceMesh.enabled</code> Enable service mesh integration <code>false</code> <code>global.serviceMesh.namespace</code> Service mesh namespace <code>zamaz-mesh</code> <code>istio.enabled</code> Enable Istio configuration <code>false</code> <code>istio.virtualService.enabled</code> Create VirtualService <code>true</code> <code>istio.destinationRule.enabled</code> Create DestinationRule <code>true</code> <code>istio.security.peerAuthentication.enabled</code> Enable mTLS <code>true</code>"},{"location":"HELM_CHARTS_REFERENCE/#2-istio-mesh-service-mesh-infrastructure","title":"2. istio-mesh (Service Mesh Infrastructure)","text":"<p>Purpose: Configures Istio service mesh components including gateways, virtual services, and destination rules.</p>"},{"location":"HELM_CHARTS_REFERENCE/#key-features_1","title":"Key Features","text":"<ul> <li>Gateway configuration for external traffic</li> <li>VirtualService for traffic routing</li> <li>DestinationRule for load balancing and circuit breaking</li> <li>Security policies integration</li> <li>Telemetry configuration</li> </ul>"},{"location":"HELM_CHARTS_REFERENCE/#configuration-examples_1","title":"Configuration Examples","text":"<pre><code># Gateway configuration\ngateway:\n  name: zamaz-gateway\n  servers:\n    - port:\n        number: 443\n        name: https\n        protocol: HTTPS\n      hosts:\n        - \"api.zamaz.com\"\n      tls:\n        mode: SIMPLE\n        credentialName: zamaz-tls-cert\n</code></pre> <pre><code># Traffic policies\ndestinationRule:\n  api:\n    trafficPolicy:\n      loadBalancer:\n        simple: LEAST_CONN\n      circuitBreaker:\n        consecutiveGatewayErrors: 5\n        interval: 30s\n        baseEjectionTime: 30s\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#values-schema_1","title":"Values Schema","text":"Parameter Description Default <code>gateway.enabled</code> Create Istio Gateway <code>true</code> <code>virtualService.enabled</code> Create VirtualService <code>true</code> <code>destinationRule.enabled</code> Create DestinationRule <code>true</code> <code>security.authorizationPolicy.enabled</code> Create AuthorizationPolicy <code>true</code> <code>telemetry.enabled</code> Enable telemetry collection <code>true</code>"},{"location":"HELM_CHARTS_REFERENCE/#3-spire-integration-workload-identity","title":"3. spire-integration (Workload Identity)","text":"<p>Purpose: Deploys SPIRE server and agent for cryptographic workload identity in the service mesh.</p>"},{"location":"HELM_CHARTS_REFERENCE/#key-features_2","title":"Key Features","text":"<ul> <li>SPIRE server with persistent storage</li> <li>SPIRE agent DaemonSet</li> <li>Kubernetes workload attestation</li> <li>Istio integration for mTLS</li> <li>Automatic registration entries</li> </ul>"},{"location":"HELM_CHARTS_REFERENCE/#configuration-examples_2","title":"Configuration Examples","text":"<pre><code># SPIRE server configuration\nserver:\n  enabled: true\n  persistence:\n    enabled: true\n    size: 10Gi\n\n  config:\n    server:\n      trust_domain: \"zamaz.cluster.local\"\n      ca_subject:\n        organization: [\"Zamaz\"]\n        common_name: \"Zamaz Root CA\"\n</code></pre> <pre><code># Registration entries\nregistrationEntries:\n  enabled: true\n  zamazApi:\n    spiffeId: \"spiffe://zamaz.cluster.local/ns/zamaz-mesh/sa/zamaz-api\"\n    selectors:\n      - \"k8s:ns:zamaz-mesh\"\n      - \"k8s:sa:zamaz-api\"\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#values-schema_2","title":"Values Schema","text":"Parameter Description Default <code>global.trustDomain</code> SPIFFE trust domain <code>zamaz.cluster.local</code> <code>server.enabled</code> Deploy SPIRE server <code>true</code> <code>agent.enabled</code> Deploy SPIRE agent <code>true</code> <code>registrationEntries.enabled</code> Create workload entries <code>true</code> <code>istio.enabled</code> Enable Istio integration <code>true</code>"},{"location":"HELM_CHARTS_REFERENCE/#4-security-policies-security-framework","title":"4. security-policies (Security Framework)","text":"<p>Purpose: Implements comprehensive security policies including network policies, pod security standards, and Istio authorization.</p>"},{"location":"HELM_CHARTS_REFERENCE/#key-features_3","title":"Key Features","text":"<ul> <li>Default-deny network policies</li> <li>Pod Security Standards enforcement</li> <li>Istio authorization policies</li> <li>Service account management</li> <li>Compliance configurations</li> </ul>"},{"location":"HELM_CHARTS_REFERENCE/#configuration-examples_3","title":"Configuration Examples","text":"<pre><code># Network policies\nnetworkPolicies:\n  enabled: true\n  defaultDeny: true\n  policies:\n    - name: zamaz-api-ingress\n      namespace: zamaz-mesh\n      spec:\n        podSelector:\n          matchLabels:\n            app: zamaz\n            component: api\n        policyTypes:\n          - Ingress\n        ingress:\n          - from:\n            - namespaceSelector:\n                matchLabels:\n                  name: istio-system\n</code></pre> <pre><code># Istio security\nistioSecurity:\n  enabled: true\n  authorizationPolicies:\n    - name: zamaz-api-access\n      namespace: zamaz-mesh\n      spec:\n        selector:\n          matchLabels:\n            app: zamaz\n            component: api\n        rules:\n          - from:\n            - source:\n                principals:\n                  - \"cluster.local/ns/istio-system/sa/zamaz-gateway\"\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#values-schema_3","title":"Values Schema","text":"Parameter Description Default <code>networkPolicies.enabled</code> Enable network policies <code>true</code> <code>networkPolicies.defaultDeny</code> Default deny all traffic <code>true</code> <code>istioSecurity.enabled</code> Enable Istio security policies <code>true</code> <code>podSecurityStandards.enabled</code> Enable Pod Security Standards <code>true</code>"},{"location":"HELM_CHARTS_REFERENCE/#5-observability-monitoring-stack","title":"5. observability (Monitoring Stack)","text":"<p>Purpose: Provides enhanced monitoring, logging, and tracing capabilities for the service mesh.</p>"},{"location":"HELM_CHARTS_REFERENCE/#key-features_4","title":"Key Features","text":"<ul> <li>Prometheus with Istio metrics</li> <li>Grafana dashboards for service mesh</li> <li>Jaeger distributed tracing</li> <li>Loki log aggregation</li> <li>Custom alerts and rules</li> </ul>"},{"location":"HELM_CHARTS_REFERENCE/#configuration-examples_4","title":"Configuration Examples","text":"<pre><code># Prometheus configuration\nprometheus:\n  enabled: true\n  kube-prometheus-stack:\n    prometheus:\n      prometheusSpec:\n        retention: 30d\n        additionalScrapeConfigs:\n          - job_name: 'istio-proxy'\n            kubernetes_sd_configs:\n            - role: endpoints\n</code></pre> <pre><code># Grafana dashboards\ndashboards:\n  enabled: true\n  zamaz:\n    enabled: true\n    dashboards:\n      - name: zamaz-overview\n        title: \"Zamaz Application Overview\"\n        panels:\n          - title: \"Request Rate\"\n            type: stat\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#values-schema_4","title":"Values Schema","text":"Parameter Description Default <code>prometheus.enabled</code> Enable Prometheus stack <code>true</code> <code>jaeger.enabled</code> Enable Jaeger tracing <code>true</code> <code>loki.enabled</code> Enable Loki logging <code>true</code> <code>serviceMonitors.enabled</code> Create ServiceMonitors <code>true</code> <code>prometheusRules.enabled</code> Create Prometheus rules <code>true</code>"},{"location":"HELM_CHARTS_REFERENCE/#deployment-strategies","title":"Deployment Strategies","text":""},{"location":"HELM_CHARTS_REFERENCE/#development-environment","title":"Development Environment","text":"<pre><code># Install with minimal resources\nhelm install zamaz ./charts/zamaz \\\n  --set replicaCount=1 \\\n  --set resources.requests.memory=256Mi \\\n  --set global.serviceMesh.enabled=false\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#staging-environment","title":"Staging Environment","text":"<pre><code># Install with service mesh\nhelm install zamaz ./charts/zamaz -n zamaz-mesh \\\n  --set global.serviceMesh.enabled=true \\\n  --set istio.enabled=true \\\n  --set replicaCount=2\n\n# Install mesh infrastructure\nhelm install istio-mesh ./charts/istio-mesh -n istio-system\nhelm install spire-integration ./charts/spire-integration -n spire-system\nhelm install security-policies ./charts/security-policies -n zamaz-mesh\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#production-environment","title":"Production Environment","text":"<pre><code># Install with full observability\nhelm install observability ./charts/observability -n monitoring\n\n# Install security policies\nhelm install security-policies ./charts/security-policies -n zamaz-mesh\n\n# Install SPIRE\nhelm install spire-integration ./charts/spire-integration -n spire-system\n\n# Install mesh infrastructure\nhelm install istio-mesh ./charts/istio-mesh -n istio-system\n\n# Install application\nhelm install zamaz ./charts/zamaz -n zamaz-mesh \\\n  --set global.serviceMesh.enabled=true \\\n  --set istio.enabled=true \\\n  --set replicaCount=3 \\\n  --set autoscaling.enabled=true \\\n  --set resources.requests.memory=512Mi \\\n  --set resources.limits.memory=1Gi\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#customization-examples","title":"Customization Examples","text":""},{"location":"HELM_CHARTS_REFERENCE/#custom-gateway-configuration","title":"Custom Gateway Configuration","text":"<pre><code># values-custom-gateway.yaml\ngateway:\n  servers:\n    - port:\n        number: 80\n        name: http\n        protocol: HTTP\n      hosts:\n        - \"*.zamaz.dev\"\n      redirect:\n        httpsRedirect: true\n    - port:\n        number: 443\n        name: https\n        protocol: HTTPS\n      hosts:\n        - \"*.zamaz.dev\"\n      tls:\n        mode: SIMPLE\n        credentialName: zamaz-wildcard-cert\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#custom-security-policies","title":"Custom Security Policies","text":"<pre><code># values-security.yaml\nistioSecurity:\n  authorizationPolicies:\n    - name: custom-api-access\n      namespace: zamaz-mesh\n      spec:\n        selector:\n          matchLabels:\n            app: zamaz\n            component: api\n        rules:\n          - from:\n            - source:\n                requestPrincipals: [\"*\"]\n            when:\n            - key: request.headers[user-role]\n              values: [\"admin\", \"user\"]\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#custom-monitoring","title":"Custom Monitoring","text":"<pre><code># values-monitoring.yaml\nprometheusRules:\n  zamaz:\n    rules:\n      - alert: CustomHighLatency\n        expr: |\n          histogram_quantile(0.99, \n            sum(rate(istio_request_duration_milliseconds_bucket{\n              destination_service_name=\"zamaz-api\"\n            }[5m])) by (le)\n          ) &gt; 1000\n        for: 2m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"Custom high latency alert\"\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#upgrade-procedures","title":"Upgrade Procedures","text":""},{"location":"HELM_CHARTS_REFERENCE/#chart-upgrades","title":"Chart Upgrades","text":"<pre><code># Upgrade application\nhelm upgrade zamaz ./charts/zamaz -n zamaz-mesh\n\n# Upgrade with new values\nhelm upgrade zamaz ./charts/zamaz -n zamaz-mesh \\\n  -f values-production.yaml\n\n# Upgrade infrastructure\nhelm upgrade istio-mesh ./charts/istio-mesh -n istio-system\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#version-compatibility","title":"Version Compatibility","text":"Chart Version Kubernetes Istio SPIRE 1.0.0 1.25+ 1.20+ 1.8+"},{"location":"HELM_CHARTS_REFERENCE/#rolling-updates","title":"Rolling Updates","text":"<pre><code># Update application image\nhelm upgrade zamaz ./charts/zamaz -n zamaz-mesh \\\n  --set image.tag=1.1.0 \\\n  --wait\n\n# Monitor rollout\nkubectl rollout status deployment/zamaz -n zamaz-mesh\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"HELM_CHARTS_REFERENCE/#common-issues","title":"Common Issues","text":""},{"location":"HELM_CHARTS_REFERENCE/#1-chart-installation-failures","title":"1. Chart Installation Failures","text":"<pre><code># Check dependencies\nhelm dependency update ./charts/zamaz\n\n# Validate template\nhelm template zamaz ./charts/zamaz --debug\n\n# Dry run\nhelm install zamaz ./charts/zamaz --dry-run\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#2-value-validation-errors","title":"2. Value Validation Errors","text":"<pre><code># Lint chart\nhelm lint ./charts/zamaz\n\n# Check schema\nhelm template zamaz ./charts/zamaz \\\n  --set invalid.value=true \\\n  --debug\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#3-resource-creation-issues","title":"3. Resource Creation Issues","text":"<pre><code># Check chart resources\nkubectl get all -l app.kubernetes.io/managed-by=Helm\n\n# Check events\nkubectl get events --sort-by=.metadata.creationTimestamp\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#debug-commands","title":"Debug Commands","text":"<pre><code># Get chart values\nhelm get values zamaz -n zamaz-mesh\n\n# Get chart manifest\nhelm get manifest zamaz -n zamaz-mesh\n\n# Chart history\nhelm history zamaz -n zamaz-mesh\n\n# Rollback\nhelm rollback zamaz 1 -n zamaz-mesh\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#best-practices","title":"Best Practices","text":""},{"location":"HELM_CHARTS_REFERENCE/#values-organization","title":"Values Organization","text":"<pre><code># values-base.yaml (common settings)\nglobal:\n  imageRegistry: \"your-registry.com\"\n\n# values-dev.yaml (development overrides)\nglobal:\n  serviceMesh:\n    enabled: false\nreplicaCount: 1\n\n# values-prod.yaml (production overrides)\nglobal:\n  serviceMesh:\n    enabled: true\nreplicaCount: 3\nautoscaling:\n  enabled: true\n</code></pre>"},{"location":"HELM_CHARTS_REFERENCE/#security-considerations","title":"Security Considerations","text":"<ol> <li> <p>Secrets Management <pre><code># Use external secrets\nsecrets:\n  external:\n    enabled: true\n    secretStore: vault-backend\n</code></pre></p> </li> <li> <p>Image Security <pre><code># Use specific tags, not latest\nimage:\n  tag: \"1.0.0\"\n  pullPolicy: IfNotPresent\n</code></pre></p> </li> <li> <p>Resource Limits <pre><code># Always set resource limits\nresources:\n  limits:\n    cpu: 1000m\n    memory: 1Gi\n  requests:\n    cpu: 500m\n    memory: 512Mi\n</code></pre></p> </li> </ol>"},{"location":"HELM_CHARTS_REFERENCE/#performance-optimization","title":"Performance Optimization","text":"<ol> <li> <p>Resource Tuning <pre><code># Adjust based on load testing\nautoscaling:\n  targetCPUUtilizationPercentage: 70\n  targetMemoryUtilizationPercentage: 80\n</code></pre></p> </li> <li> <p>Connection Pooling <pre><code># Optimize for your traffic patterns\ndestinationRule:\n  api:\n    trafficPolicy:\n      connectionPool:\n        tcp:\n          maxConnections: 100\n</code></pre></p> </li> </ol>"},{"location":"HELM_CHARTS_REFERENCE/#reference-links","title":"Reference Links","text":"<ul> <li>Helm Documentation</li> <li>Istio Helm Charts</li> <li>Prometheus Operator</li> <li>SPIRE Helm Charts</li> </ul> <p>This document is part of the Zamaz Zero Trust Authentication MVP documentation.</p>"},{"location":"ISTIO_MIGRATION_GUIDE/","title":"Istio Service Mesh Migration Guide","text":""},{"location":"ISTIO_MIGRATION_GUIDE/#overview","title":"Overview","text":"<p>This guide provides a comprehensive step-by-step approach for migrating the Zamaz Zero Trust Authentication MVP from standalone Envoy to a full Istio service mesh using a namespace-based migration strategy.</p>"},{"location":"ISTIO_MIGRATION_GUIDE/#migration-strategy-namespace-based-approach","title":"Migration Strategy: Namespace-Based Approach","text":"<p>The namespace-based migration allows for: - Zero-downtime deployment with parallel environments - Gradual traffic shifting from legacy to mesh - Easy rollback capabilities - Comprehensive testing before full cutover</p>"},{"location":"ISTIO_MIGRATION_GUIDE/#architecture-before-migration","title":"Architecture Before Migration","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Load Balancer \u2502\u2500\u2500\u2500\u25b6\u2502     Envoy    \u2502\u2500\u2500\u2500\u25b6\u2502   Zamaz     \u2502\n\u2502                 \u2502    \u2502   (Standalone)\u2502    \u2502 Application \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                   \u2502\n                                           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                           \u2502   Database    \u2502\n                                           \u2502    Redis      \u2502\n                                           \u2502    NATS       \u2502\n                                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ISTIO_MIGRATION_GUIDE/#architecture-after-migration","title":"Architecture After Migration","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Load Balancer \u2502\u2500\u2500\u2500\u25b6\u2502  Istio Gateway   \u2502\u2500\u2500\u2500\u25b6\u2502 Zamaz + Envoy  \u2502\n\u2502                 \u2502    \u2502                  \u2502    \u2502   Sidecars     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502                       \u2502\n                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                        \u2502 Virtual Service\u2502       \u2502 SPIRE Identity\u2502\n                        \u2502Destination Rules\u2502       \u2502   mTLS Certs  \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ISTIO_MIGRATION_GUIDE/#prerequisites","title":"Prerequisites","text":""},{"location":"ISTIO_MIGRATION_GUIDE/#required-tools","title":"Required Tools","text":"<pre><code># Install kubectl\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n\n# Install Helm\ncurl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n\n# Install Istioctl\ncurl -L https://istio.io/downloadIstio | sh -\nexport PATH=\"$PATH:$PWD/istio-1.20.1/bin\"\n</code></pre>"},{"location":"ISTIO_MIGRATION_GUIDE/#cluster-requirements","title":"Cluster Requirements","text":"<ul> <li>Kubernetes 1.25+</li> <li>Minimum 4 vCPUs, 8GB RAM</li> <li>LoadBalancer support</li> <li>StorageClass for persistent volumes</li> <li>RBAC enabled</li> </ul>"},{"location":"ISTIO_MIGRATION_GUIDE/#pre-migration-checklist","title":"Pre-Migration Checklist","text":"<ul> <li> Backup current database</li> <li> Document current configuration</li> <li> Test disaster recovery procedures</li> <li> Prepare rollback plan</li> <li> Schedule maintenance window</li> <li> Notify stakeholders</li> </ul>"},{"location":"ISTIO_MIGRATION_GUIDE/#migration-steps","title":"Migration Steps","text":""},{"location":"ISTIO_MIGRATION_GUIDE/#phase-1-infrastructure-setup","title":"Phase 1: Infrastructure Setup","text":""},{"location":"ISTIO_MIGRATION_GUIDE/#step-1-install-istio-control-plane","title":"Step 1: Install Istio Control Plane","text":"<pre><code># Run prerequisite checks\n./scripts/istio-migration.sh prereq\n\n# Install Istio\n./scripts/istio-migration.sh install-istio\n</code></pre> <p>This will: - Create <code>istio-system</code> namespace - Install Istio base components - Install Istiod control plane - Install Istio gateway</p>"},{"location":"ISTIO_MIGRATION_GUIDE/#step-2-deploy-spire-integration","title":"Step 2: Deploy SPIRE Integration","text":"<pre><code># Deploy SPIRE for workload identity\n./scripts/istio-migration.sh deploy-spire\n</code></pre> <p>This will: - Create <code>spire-system</code> namespace - Deploy SPIRE server and agents - Configure SPIRE-Istio integration - Create initial workload identities</p>"},{"location":"ISTIO_MIGRATION_GUIDE/#phase-2-mesh-namespace-creation","title":"Phase 2: Mesh Namespace Creation","text":""},{"location":"ISTIO_MIGRATION_GUIDE/#step-3-create-mesh-namespace","title":"Step 3: Create Mesh Namespace","text":"<pre><code># Create zamaz-mesh namespace with Istio injection\n./scripts/istio-migration.sh create-namespace\n</code></pre> <p>This creates the <code>zamaz-mesh</code> namespace with: - Istio sidecar injection enabled - Pod Security Standards (restricted) - Proper labels and annotations</p>"},{"location":"ISTIO_MIGRATION_GUIDE/#step-4-deploy-mesh-infrastructure","title":"Step 4: Deploy Mesh Infrastructure","text":"<pre><code># Deploy service mesh infrastructure\n./scripts/istio-migration.sh deploy-infrastructure\n</code></pre> <p>This deploys: - Istio Gateway and VirtualService - DestinationRules with circuit breakers - Security policies and authorization - Enhanced observability stack</p>"},{"location":"ISTIO_MIGRATION_GUIDE/#phase-3-application-deployment","title":"Phase 3: Application Deployment","text":""},{"location":"ISTIO_MIGRATION_GUIDE/#step-5-deploy-application-to-mesh","title":"Step 5: Deploy Application to Mesh","text":"<pre><code># Deploy Zamaz to mesh namespace\n./scripts/istio-migration.sh deploy-app\n</code></pre> <p>This will: - Deploy Zamaz with Istio sidecars - Configure service accounts with SPIRE identities - Set up security policies - Enable telemetry collection</p>"},{"location":"ISTIO_MIGRATION_GUIDE/#step-6-verify-deployment","title":"Step 6: Verify Deployment","text":"<pre><code># Verify mesh deployment\n./scripts/istio-migration.sh verify\n</code></pre> <p>This checks: - Sidecar injection status - SPIRE workload identities - mTLS configuration - Service mesh connectivity</p>"},{"location":"ISTIO_MIGRATION_GUIDE/#phase-4-traffic-migration","title":"Phase 4: Traffic Migration","text":""},{"location":"ISTIO_MIGRATION_GUIDE/#step-7-initial-testing","title":"Step 7: Initial Testing","text":"<pre><code># Test mesh functionality\n./scripts/istio-migration.sh test\n</code></pre>"},{"location":"ISTIO_MIGRATION_GUIDE/#step-8-gradual-traffic-shifting","title":"Step 8: Gradual Traffic Shifting","text":"<p>Start with 10% traffic to test:</p> <pre><code># Shift 10% traffic to mesh\n./scripts/istio-migration.sh shift-traffic 10\n</code></pre> <p>Monitor for 30 minutes:</p> <pre><code># Monitor migration\n./scripts/istio-migration.sh monitor 1800\n</code></pre> <p>Gradually increase traffic:</p> <pre><code># 25% traffic\n./scripts/istio-migration.sh shift-traffic 25\n\n# 50% traffic\n./scripts/istio-migration.sh shift-traffic 50\n\n# 75% traffic\n./scripts/istio-migration.sh shift-traffic 75\n</code></pre>"},{"location":"ISTIO_MIGRATION_GUIDE/#step-9-complete-migration","title":"Step 9: Complete Migration","text":"<p>When confident:</p> <pre><code># Complete migration (100% traffic)\n./scripts/istio-migration.sh complete\n</code></pre>"},{"location":"ISTIO_MIGRATION_GUIDE/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"ISTIO_MIGRATION_GUIDE/#key-metrics-to-monitor","title":"Key Metrics to Monitor","text":"<ol> <li>Application Metrics</li> <li>Request rate and latency</li> <li>Error rates (4xx, 5xx)</li> <li> <p>Database connection pool usage</p> </li> <li> <p>Service Mesh Metrics</p> </li> <li>Sidecar resource usage</li> <li>mTLS success rate</li> <li> <p>Circuit breaker status</p> </li> <li> <p>Security Metrics</p> </li> <li>Authentication success/failure rates</li> <li>SPIRE certificate renewals</li> <li>Authorization policy violations</li> </ol>"},{"location":"ISTIO_MIGRATION_GUIDE/#dashboards","title":"Dashboards","text":"<p>Access the following dashboards:</p> <pre><code># Grafana (admin/admin)\nkubectl port-forward -n monitoring svc/grafana 3000:80\n\n# Jaeger UI\nkubectl port-forward -n monitoring svc/jaeger-query 16686:16686\n\n# Kiali (if installed)\nkubectl port-forward -n istio-system svc/kiali 20001:20001\n</code></pre>"},{"location":"ISTIO_MIGRATION_GUIDE/#key-dashboards","title":"Key Dashboards","text":"<ul> <li>Zamaz Application Overview: Application-specific metrics</li> <li>Istio Service Mesh: Service mesh performance</li> <li>Security Dashboard: Authentication and authorization metrics</li> <li>SPIRE Dashboard: Workload identity status</li> </ul>"},{"location":"ISTIO_MIGRATION_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ISTIO_MIGRATION_GUIDE/#common-issues","title":"Common Issues","text":""},{"location":"ISTIO_MIGRATION_GUIDE/#1-sidecar-not-injected","title":"1. Sidecar Not Injected","text":"<p>Symptoms: Pods start but no Istio proxy sidecar</p> <p>Solution: <pre><code># Check namespace labels\nkubectl get namespace zamaz-mesh --show-labels\n\n# Ensure istio-injection=enabled\nkubectl label namespace zamaz-mesh istio-injection=enabled --overwrite\n\n# Restart pods\nkubectl rollout restart deployment -n zamaz-mesh\n</code></pre></p>"},{"location":"ISTIO_MIGRATION_GUIDE/#2-mtls-connection-issues","title":"2. mTLS Connection Issues","text":"<p>Symptoms: Service-to-service communication fails</p> <p>Solution: <pre><code># Check peer authentication\nkubectl get peerauthentication -n zamaz-mesh\n\n# Check destination rules\nkubectl get destinationrule -n zamaz-mesh\n\n# Debug with istioctl\nistioctl proxy-config cluster &lt;pod-name&gt; -n zamaz-mesh\n</code></pre></p>"},{"location":"ISTIO_MIGRATION_GUIDE/#3-spire-identity-issues","title":"3. SPIRE Identity Issues","text":"<p>Symptoms: Workloads cannot get SPIFFE identities</p> <p>Solution: <pre><code># Check SPIRE server logs\nkubectl logs -n spire-system deployment/spire-server\n\n# Check registration entries\nkubectl exec -n spire-system deployment/spire-server -- \\\n  /opt/spire/bin/spire-server entry show\n\n# Verify agent connectivity\nkubectl logs -n spire-system daemonset/spire-agent\n</code></pre></p>"},{"location":"ISTIO_MIGRATION_GUIDE/#4-high-latency","title":"4. High Latency","text":"<p>Symptoms: Increased response times</p> <p>Investigation: <pre><code># Check proxy stats\nkubectl exec &lt;pod-name&gt; -c istio-proxy -n zamaz-mesh -- \\\n  curl localhost:15000/stats | grep circuit_breakers\n\n# Check resource usage\nkubectl top pods -n zamaz-mesh\n\n# Review tracing\n# Access Jaeger UI and examine traces\n</code></pre></p>"},{"location":"ISTIO_MIGRATION_GUIDE/#debug-commands","title":"Debug Commands","text":"<pre><code># Check Istio configuration\nistioctl analyze -n zamaz-mesh\n\n# Proxy configuration\nistioctl proxy-config bootstrap &lt;pod-name&gt; -n zamaz-mesh\n\n# Check certificates\nistioctl proxy-config secret &lt;pod-name&gt; -n zamaz-mesh\n\n# Network policies\nkubectl describe networkpolicy -n zamaz-mesh\n</code></pre>"},{"location":"ISTIO_MIGRATION_GUIDE/#rollback-procedures","title":"Rollback Procedures","text":""},{"location":"ISTIO_MIGRATION_GUIDE/#emergency-rollback","title":"Emergency Rollback","text":"<p>If critical issues occur:</p> <pre><code># Emergency rollback\n./scripts/istio-migration.sh rollback\n</code></pre> <p>This will: 1. Shift all traffic back to legacy namespace 2. Scale down mesh deployments 3. Preserve legacy environment</p>"},{"location":"ISTIO_MIGRATION_GUIDE/#planned-rollback","title":"Planned Rollback","text":"<p>For planned rollbacks:</p> <ol> <li> <p>Gradual traffic shift back:    <pre><code>./scripts/istio-migration.sh shift-traffic 50\n./scripts/istio-migration.sh shift-traffic 25\n./scripts/istio-migration.sh shift-traffic 0\n</code></pre></p> </li> <li> <p>Scale down mesh environment:    <pre><code>kubectl scale deployment -n zamaz-mesh --all --replicas=0\n</code></pre></p> </li> <li> <p>Clean up resources (optional):    <pre><code>helm uninstall zamaz-mesh -n zamaz-mesh\nkubectl delete namespace zamaz-mesh\n</code></pre></p> </li> </ol>"},{"location":"ISTIO_MIGRATION_GUIDE/#security-considerations","title":"Security Considerations","text":""},{"location":"ISTIO_MIGRATION_GUIDE/#network-security","title":"Network Security","text":"<ul> <li>Default Deny: All network traffic denied by default</li> <li>Least Privilege: Services can only communicate as needed</li> <li>mTLS Everywhere: All service-to-service communication encrypted</li> </ul>"},{"location":"ISTIO_MIGRATION_GUIDE/#identity-and-access","title":"Identity and Access","text":"<ul> <li>SPIRE Integration: Cryptographic workload identities</li> <li>Zero Trust: No implicit trust between services</li> <li>Authorization Policies: Fine-grained access control</li> </ul>"},{"location":"ISTIO_MIGRATION_GUIDE/#compliance","title":"Compliance","text":"<ul> <li>Pod Security Standards: Restricted security context</li> <li>Network Policies: Kubernetes-native network segmentation</li> <li>Audit Logging: Comprehensive security event logging</li> </ul>"},{"location":"ISTIO_MIGRATION_GUIDE/#performance-optimization","title":"Performance Optimization","text":""},{"location":"ISTIO_MIGRATION_GUIDE/#sidecar-resources","title":"Sidecar Resources","text":"<p>Adjust sidecar resource limits based on load:</p> <pre><code># In values.yaml\nistio:\n  sidecar:\n    resources:\n      requests:\n        cpu: 100m\n        memory: 128Mi\n      limits:\n        cpu: 200m\n        memory: 256Mi\n</code></pre>"},{"location":"ISTIO_MIGRATION_GUIDE/#circuit-breaker-tuning","title":"Circuit Breaker Tuning","text":"<pre><code># Adjust circuit breaker settings\ndestinationRule:\n  api:\n    trafficPolicy:\n      circuitBreaker:\n        consecutiveGatewayErrors: 5\n        consecutive5xxErrors: 5\n        interval: 30s\n        baseEjectionTime: 30s\n        maxEjectionPercent: 50\n</code></pre>"},{"location":"ISTIO_MIGRATION_GUIDE/#connection-pool-optimization","title":"Connection Pool Optimization","text":"<pre><code># Optimize connection pooling\ndestinationRule:\n  api:\n    trafficPolicy:\n      connectionPool:\n        tcp:\n          maxConnections: 100\n          connectTimeout: 30s\n        http:\n          http1MaxPendingRequests: 1000\n          maxRequestsPerConnection: 10\n</code></pre>"},{"location":"ISTIO_MIGRATION_GUIDE/#post-migration-tasks","title":"Post-Migration Tasks","text":"<ol> <li>Update Documentation</li> <li>Service architecture diagrams</li> <li>Troubleshooting runbooks</li> <li> <p>Security procedures</p> </li> <li> <p>Team Training</p> </li> <li>Istio troubleshooting</li> <li>Service mesh concepts</li> <li> <p>New monitoring tools</p> </li> <li> <p>Optimize Configuration</p> </li> <li>Fine-tune resource limits</li> <li>Adjust circuit breaker settings</li> <li> <p>Optimize observability collection</p> </li> <li> <p>Clean Up Legacy Resources</p> </li> <li>Remove standalone Envoy</li> <li>Clean up old monitoring</li> <li>Archive legacy configuration</li> </ol>"},{"location":"ISTIO_MIGRATION_GUIDE/#support-and-resources","title":"Support and Resources","text":"<ul> <li>Istio Documentation: https://istio.io/docs/</li> <li>SPIRE Documentation: https://spiffe.io/docs/</li> <li>Prometheus Best Practices: https://prometheus.io/docs/practices/</li> <li>Kubernetes Security: https://kubernetes.io/docs/concepts/security/</li> </ul>"},{"location":"ISTIO_MIGRATION_GUIDE/#appendix","title":"Appendix","text":""},{"location":"ISTIO_MIGRATION_GUIDE/#migration-checklist","title":"Migration Checklist","text":""},{"location":"ISTIO_MIGRATION_GUIDE/#pre-migration","title":"Pre-Migration","text":"<ul> <li> Prerequisites installed</li> <li> Cluster capacity verified</li> <li> Backup completed</li> <li> Team trained</li> <li> Rollback plan documented</li> </ul>"},{"location":"ISTIO_MIGRATION_GUIDE/#infrastructure-phase","title":"Infrastructure Phase","text":"<ul> <li> Istio control plane installed</li> <li> SPIRE integration deployed</li> <li> Mesh namespace created</li> <li> Security policies applied</li> </ul>"},{"location":"ISTIO_MIGRATION_GUIDE/#application-phase","title":"Application Phase","text":"<ul> <li> Application deployed to mesh</li> <li> Sidecar injection verified</li> <li> SPIRE identities configured</li> <li> Health checks passing</li> </ul>"},{"location":"ISTIO_MIGRATION_GUIDE/#traffic-migration","title":"Traffic Migration","text":"<ul> <li> Initial testing completed</li> <li> 10% traffic migrated</li> <li> 25% traffic migrated</li> <li> 50% traffic migrated</li> <li> 75% traffic migrated</li> <li> 100% traffic migrated</li> </ul>"},{"location":"ISTIO_MIGRATION_GUIDE/#post-migration","title":"Post-Migration","text":"<ul> <li> Legacy environment cleaned up</li> <li> Documentation updated</li> <li> Team training completed</li> <li> Performance optimized</li> </ul>"},{"location":"ISTIO_MIGRATION_GUIDE/#emergency-contacts","title":"Emergency Contacts","text":"<ul> <li>Platform Team: platform-team@company.com</li> <li>Security Team: security-team@company.com</li> <li>On-Call: +1-xxx-xxx-xxxx</li> </ul> <p>This migration guide is part of the Zamaz Zero Trust Authentication MVP documentation.</p>"},{"location":"PRODUCTION_READINESS_CHECKLIST/","title":"Production Readiness Checklist","text":""},{"location":"PRODUCTION_READINESS_CHECKLIST/#infrastructure-security","title":"Infrastructure Security","text":"<ul> <li> Network policies implemented for all components</li> <li> Pod security contexts configured</li> <li> Resource limits and requests defined</li> <li> Secrets management via HashiCorp Vault configured</li> <li> TLS certificates properly managed</li> <li> Container image scanning enabled</li> <li> Non-root container execution enforced</li> </ul>"},{"location":"PRODUCTION_READINESS_CHECKLIST/#high-availability","title":"High Availability","text":"<ul> <li> Minimum 3 replicas configured</li> <li> Pod anti-affinity rules set</li> <li> Pod disruption budgets defined</li> <li> Horizontal Pod Autoscaling enabled</li> <li> Multi-zone deployment configured</li> <li> Readiness/liveness probes implemented</li> </ul>"},{"location":"PRODUCTION_READINESS_CHECKLIST/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<ul> <li> Prometheus metrics exposed</li> <li> Grafana dashboards created</li> <li> Alert rules configured</li> <li> Logging pipeline established</li> <li> Tracing implemented</li> <li> SLOs defined and monitored</li> </ul>"},{"location":"PRODUCTION_READINESS_CHECKLIST/#gitops-deployment","title":"GitOps &amp; Deployment","text":"<ul> <li> ArgoCD application configured</li> <li> Canary deployment strategy implemented</li> <li> Automated rollback criteria defined</li> <li> CI/CD pipeline complete</li> <li> Branch protection rules enabled</li> <li> Required reviewers configured</li> </ul>"},{"location":"PRODUCTION_READINESS_CHECKLIST/#documentation","title":"Documentation","text":"<ul> <li> Architecture diagrams updated</li> <li> Runbooks created</li> <li> API documentation current</li> <li> Incident response procedures documented</li> <li> Deployment procedures documented</li> <li> Rollback procedures documented</li> </ul>"},{"location":"PRODUCTION_READINESS_CHECKLIST/#performance","title":"Performance","text":"<ul> <li> Load testing completed</li> <li> Resource usage analyzed</li> <li> Connection pooling configured</li> <li> Cache strategy implemented</li> <li> Database indices optimized</li> <li> CDN configuration reviewed</li> </ul>"},{"location":"PRODUCTION_READINESS_CHECKLIST/#compliance-auditing","title":"Compliance &amp; Auditing","text":"<ul> <li> Audit logging enabled</li> <li> Compliance requirements met</li> <li> Data retention policies implemented</li> <li> Access controls documented</li> <li> Security policies enforced</li> <li> License compliance checked</li> </ul>"},{"location":"PRODUCTION_READINESS_CHECKLIST/#disaster-recovery","title":"Disaster Recovery","text":"<ul> <li> Backup procedures established</li> <li> Restore procedures tested</li> <li> Data recovery point documented</li> <li> Recovery time objectives defined</li> <li> Failover procedures documented</li> <li> Cross-region recovery tested</li> </ul>"},{"location":"PRODUCTION_READINESS_CHECKLIST/#dependencies","title":"Dependencies","text":"<ul> <li> External service dependencies documented</li> <li> Dependency health checks implemented</li> <li> Circuit breakers configured</li> <li> Fallback mechanisms implemented</li> <li> SLAs documented</li> <li> Rate limiting configured</li> </ul>"},{"location":"PRODUCTION_READINESS_CHECKLIST/#testing","title":"Testing","text":"<ul> <li> Unit test coverage &gt;80%</li> <li> Integration tests automated</li> <li> E2E tests implemented</li> <li> Chaos testing performed</li> <li> Security testing completed</li> <li> Performance testing automated</li> </ul>"},{"location":"PRODUCTION_READINESS_CHECKLIST/#operations","title":"Operations","text":"<ul> <li> On-call rotation established</li> <li> Escalation procedures defined</li> <li> Monitoring dashboards created</li> <li> Alert thresholds calibrated</li> <li> Maintenance windows defined</li> <li> Capacity planning completed</li> </ul>"},{"location":"SERVICE_DISCOVERY/","title":"Service Discovery Architecture","text":""},{"location":"SERVICE_DISCOVERY/#overview","title":"Overview","text":"<p>The Zamaz application implements a comprehensive service discovery system that works across multiple environments and service registry providers. This system ensures that frontend applications can dynamically discover and connect to backend services regardless of the deployment environment.</p>"},{"location":"SERVICE_DISCOVERY/#architecture-components","title":"Architecture Components","text":""},{"location":"SERVICE_DISCOVERY/#1-service-registry-interface-pkgdiscoveryregistrygo","title":"1. Service Registry Interface (<code>pkg/discovery/registry.go</code>)","text":"<p>The core service registry interface provides a pluggable architecture:</p> <pre><code>type ServiceRegistry interface {\n    Register(ctx context.Context, service *Service) error\n    Deregister(ctx context.Context, serviceID string) error\n    Discover(ctx context.Context, serviceName string) ([]*Service, error)\n    Watch(ctx context.Context, serviceName string) (&lt;-chan ServiceEvent, error)\n    Health() error\n    Close() error\n}\n</code></pre>"},{"location":"SERVICE_DISCOVERY/#2-service-registry-implementations","title":"2. Service Registry Implementations","text":""},{"location":"SERVICE_DISCOVERY/#consul-registry-pkgdiscoveryconsulgo","title":"Consul Registry (<code>pkg/discovery/consul.go</code>)","text":"<ul> <li>Uses HashiCorp Consul for service registration and discovery</li> <li>Provides health checking and automatic deregistration</li> <li>Supports service watching for real-time updates</li> <li>Load balancing with multiple strategies</li> </ul>"},{"location":"SERVICE_DISCOVERY/#kubernetes-registry-pkgdiscoverykubernetesgo","title":"Kubernetes Registry (<code>pkg/discovery/kubernetes.go</code>)","text":"<ul> <li>Native Kubernetes service discovery via DNS</li> <li>Headless service support for direct pod access</li> <li>Integration with Kubernetes health checks</li> <li>Automatic endpoint discovery</li> </ul>"},{"location":"SERVICE_DISCOVERY/#3-frontend-service-discovery-frontendsrcconfigservice-discoveryts","title":"3. Frontend Service Discovery (<code>frontend/src/config/service-discovery.ts</code>)","text":"<p>The frontend implements intelligent service discovery that:</p> <ul> <li>Auto-detects environment: Kubernetes, Consul, or static configuration</li> <li>Health monitoring: Periodic health checks of discovered endpoints</li> <li>Load balancing: Round-robin, random, and least-connections strategies</li> <li>Fallback mechanisms: Graceful degradation when services are unavailable</li> <li>Dynamic endpoint updates: Real-time endpoint refreshing</li> </ul>"},{"location":"SERVICE_DISCOVERY/#frontend-service-discovery-flow","title":"Frontend Service Discovery Flow","text":"<pre><code>// Detection Logic\nif (isKubernetesEnvironment()) {\n    // Use Kubernetes DNS resolution\n    endpoints = getKubernetesEndpoints()\n} else if (isConsulAvailable()) {\n    // Use Consul service discovery\n    endpoints = getConsulEndpoints()\n} else {\n    // Fall back to static configuration\n    endpoints = getStaticEndpoints()\n}\n</code></pre>"},{"location":"SERVICE_DISCOVERY/#environment-detection","title":"Environment Detection","text":""},{"location":"SERVICE_DISCOVERY/#kubernetes-environment","title":"Kubernetes Environment","text":"<ul> <li>Checks for <code>*.cluster.local</code> or <code>*.svc</code> in hostname</li> <li>Looks for Kubernetes environment variables (<code>VITE_KUBERNETES_SERVICE_HOST</code>)</li> <li>Detects mounted service account tokens</li> </ul>"},{"location":"SERVICE_DISCOVERY/#consul-environment","title":"Consul Environment","text":"<ul> <li>Checks for Consul host configuration (<code>VITE_CONSUL_HOST</code>)</li> <li>Validates Consul API availability</li> <li>Tests DNS resolution for <code>.service.consul</code> domains</li> </ul>"},{"location":"SERVICE_DISCOVERY/#staticdevelopment-environment","title":"Static/Development Environment","text":"<ul> <li>Uses environment variables (<code>VITE_API_HOST</code>)</li> <li>Defaults to localhost for development</li> <li>Supports manual endpoint configuration</li> </ul>"},{"location":"SERVICE_DISCOVERY/#enhanced-api-client-frontendsrcservicesapi-enhancedts","title":"Enhanced API Client (<code>frontend/src/services/api-enhanced.ts</code>)","text":"<p>The enhanced API client provides:</p>"},{"location":"SERVICE_DISCOVERY/#circuit-breaker-pattern","title":"Circuit Breaker Pattern","text":"<pre><code>class CircuitBreaker {\n    private state: CLOSED | OPEN | HALF_OPEN\n    private failureCount: number\n    private lastFailureTime: number\n\n    async execute&lt;T&gt;(fn: () =&gt; Promise&lt;T&gt;): Promise&lt;T&gt; {\n        // Circuit breaker logic with failure tracking\n        // Automatic recovery attempts after timeout\n    }\n}\n</code></pre>"},{"location":"SERVICE_DISCOVERY/#retry-logic-with-exponential-backoff","title":"Retry Logic with Exponential Backoff","text":"<ul> <li>Configurable retry attempts (default: 3)</li> <li>Exponential backoff delay calculation</li> <li>Conditional retry based on error type</li> <li>Alternative endpoint switching on retry</li> </ul>"},{"location":"SERVICE_DISCOVERY/#dynamic-endpoint-switching","title":"Dynamic Endpoint Switching","text":"<ul> <li>Real-time endpoint health monitoring</li> <li>Automatic failover to healthy endpoints</li> <li>Load balancing across available services</li> <li>Correlation ID tracking for distributed tracing</li> </ul>"},{"location":"SERVICE_DISCOVERY/#kubernetes-deployment-configuration","title":"Kubernetes Deployment Configuration","text":""},{"location":"SERVICE_DISCOVERY/#frontend-deployment-k8sfrontenddeploymentyaml","title":"Frontend Deployment (<code>k8s/frontend/deployment.yaml</code>)","text":"<p>Key service discovery features:</p> <pre><code>env:\n- name: VITE_K8S_NAMESPACE\n  valueFrom:\n    fieldRef:\n      fieldPath: metadata.namespace\n- name: VITE_API_SERVICE_NAME\n  value: \"zamaz-api-service\"\n- name: VITE_SERVICE_DISCOVERY_ENABLED\n  value: \"true\"\n</code></pre>"},{"location":"SERVICE_DISCOVERY/#service-configuration-k8sfrontendserviceyaml","title":"Service Configuration (<code>k8s/frontend/service.yaml</code>)","text":"<p>Includes ConfigMaps for: - Dynamic configuration injection - Nginx proxy rules with service discovery - Health check endpoints - CORS and security headers</p>"},{"location":"SERVICE_DISCOVERY/#istio-integration-k8sfrontendingressyaml","title":"Istio Integration (<code>k8s/frontend/ingress.yaml</code>)","text":"<p>Advanced traffic management: - VirtualService: Intelligent routing with retry policies - DestinationRule: Circuit breaker configuration at mesh level - Gateway: TLS termination and security policies - EnvoyFilter: Custom proxy behaviors</p>"},{"location":"SERVICE_DISCOVERY/#make-commands","title":"Make Commands","text":"<p>The Makefile provides comprehensive service discovery management:</p> <pre><code># Deploy frontend with service discovery\nmake k8s-frontend-deploy\n\n# Check deployment status\nmake k8s-frontend-status\n\n# Test service discovery functionality\nmake k8s-test-discovery\n\n# Complete deployment pipeline\nmake k8s-frontend-complete\n</code></pre>"},{"location":"SERVICE_DISCOVERY/#configuration-examples","title":"Configuration Examples","text":""},{"location":"SERVICE_DISCOVERY/#development-environment-envlocal","title":"Development Environment (.env.local)","text":"<pre><code>VITE_API_HOST=localhost\nVITE_API_PORT=3001\nVITE_SERVICE_DISCOVERY_ENABLED=false\n</code></pre>"},{"location":"SERVICE_DISCOVERY/#kubernetes-environment_1","title":"Kubernetes Environment","text":"<pre><code>VITE_K8S_NAMESPACE=zamaz\nVITE_API_SERVICE_NAME=zamaz-api-service\nVITE_SERVICE_DISCOVERY_ENABLED=true\nVITE_CONSUL_ENABLED=true\nVITE_ENABLE_CIRCUIT_BREAKER=true\n</code></pre>"},{"location":"SERVICE_DISCOVERY/#consul-environment_1","title":"Consul Environment","text":"<pre><code>VITE_CONSUL_HOST=consul.service.consul\nVITE_CONSUL_API_URL=http://consul.consul.svc.cluster.local:8500\nVITE_SERVICE_DISCOVERY_PROVIDER=consul\n</code></pre>"},{"location":"SERVICE_DISCOVERY/#health-monitoring","title":"Health Monitoring","text":""},{"location":"SERVICE_DISCOVERY/#frontend-health-checks","title":"Frontend Health Checks","text":"<ul> <li><code>/health</code>: Basic container health</li> <li><code>/ready</code>: Service dependency readiness</li> <li>Periodic API endpoint validation</li> <li>Service discovery endpoint monitoring</li> </ul>"},{"location":"SERVICE_DISCOVERY/#backend-integration","title":"Backend Integration","text":"<ul> <li>Consul health check registration</li> <li>Kubernetes readiness/liveness probes</li> <li>Istio service mesh health validation</li> <li>Custom health check endpoints</li> </ul>"},{"location":"SERVICE_DISCOVERY/#load-balancing-strategies","title":"Load Balancing Strategies","text":""},{"location":"SERVICE_DISCOVERY/#round-robin-default","title":"Round Robin (Default)","text":"<ul> <li>Equal distribution across healthy endpoints</li> <li>Maintains endpoint index state</li> <li>Automatic failure detection and recovery</li> </ul>"},{"location":"SERVICE_DISCOVERY/#random","title":"Random","text":"<ul> <li>Random endpoint selection</li> <li>Good for stateless services</li> <li>Reduces hot spotting</li> </ul>"},{"location":"SERVICE_DISCOVERY/#weighted","title":"Weighted","text":"<ul> <li>Priority-based endpoint selection</li> <li>Supports service tiers (primary/secondary)</li> <li>Graceful traffic shaping</li> </ul>"},{"location":"SERVICE_DISCOVERY/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"SERVICE_DISCOVERY/#correlation-ids","title":"Correlation IDs","text":"<ul> <li>Unique request tracking across services</li> <li>Distributed tracing support</li> <li>Error correlation and debugging</li> </ul>"},{"location":"SERVICE_DISCOVERY/#metrics-collection","title":"Metrics Collection","text":"<ul> <li>Service discovery success/failure rates</li> <li>Endpoint health check latencies</li> <li>Circuit breaker state transitions</li> <li>Load balancing distribution metrics</li> </ul>"},{"location":"SERVICE_DISCOVERY/#logging","title":"Logging","text":"<ul> <li>Service discovery events</li> <li>Health check results</li> <li>Endpoint switching decisions</li> <li>Error tracking with context</li> </ul>"},{"location":"SERVICE_DISCOVERY/#security-considerations","title":"Security Considerations","text":""},{"location":"SERVICE_DISCOVERY/#network-policies","title":"Network Policies","text":"<ul> <li>Restrict service-to-service communication</li> <li>Namespace isolation</li> <li>Ingress/egress traffic controls</li> </ul>"},{"location":"SERVICE_DISCOVERY/#mtls-with-istio","title":"mTLS with Istio","text":"<ul> <li>Automatic certificate management</li> <li>Service-to-service encryption</li> <li>Identity-based authorization</li> </ul>"},{"location":"SERVICE_DISCOVERY/#rbac-configuration","title":"RBAC Configuration","text":"<ul> <li>Service account permissions</li> <li>API server access controls</li> <li>Resource-specific permissions</li> </ul>"},{"location":"SERVICE_DISCOVERY/#troubleshooting","title":"Troubleshooting","text":""},{"location":"SERVICE_DISCOVERY/#common-issues","title":"Common Issues","text":"<ol> <li>DNS Resolution Failures</li> <li>Check Kubernetes DNS configuration</li> <li>Verify service names and namespaces</li> <li> <p>Test with <code>nslookup</code> from pods</p> </li> <li> <p>Health Check Failures</p> </li> <li>Validate endpoint URLs</li> <li>Check network connectivity</li> <li> <p>Review timeout configurations</p> </li> <li> <p>Circuit Breaker Activation</p> </li> <li>Monitor failure thresholds</li> <li>Check backend service health</li> <li>Review retry configurations</li> </ol>"},{"location":"SERVICE_DISCOVERY/#debugging-commands","title":"Debugging Commands","text":"<pre><code># Test DNS resolution\nkubectl exec -it &lt;pod&gt; -- nslookup zamaz-api-service.zamaz.svc.cluster.local\n\n# Check service endpoints\nkubectl get endpoints -n zamaz\n\n# Monitor health checks\nkubectl logs -n zamaz -l app=zamaz-frontend --tail=100\n\n# Test API connectivity\nkubectl exec -it &lt;pod&gt; -- wget -qO- http://zamaz-api-service.zamaz.svc.cluster.local:8080/health\n</code></pre>"},{"location":"SERVICE_DISCOVERY/#future-enhancements","title":"Future Enhancements","text":""},{"location":"SERVICE_DISCOVERY/#planned-features","title":"Planned Features","text":"<ul> <li>Service mesh integration with Linkerd</li> <li>Advanced traffic shaping policies</li> <li>Multi-cluster service discovery</li> <li>Service dependency mapping</li> <li>Automated canary deployments</li> </ul>"},{"location":"SERVICE_DISCOVERY/#integration-roadmap","title":"Integration Roadmap","text":"<ul> <li>HashiCorp Vault integration for secrets</li> <li>Prometheus metrics collection</li> <li>Grafana dashboard creation</li> <li>Alert manager configuration</li> <li>Jaeger distributed tracing</li> </ul> <p>This service discovery architecture provides a robust, scalable foundation for microservices communication across diverse deployment environments while maintaining high availability and observability.</p>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>This comprehensive guide helps diagnose and resolve common issues in the Zero Trust Auth MVP.</p>"},{"location":"troubleshooting/#quick-diagnosis","title":"\ud83d\udea8 Quick Diagnosis","text":""},{"location":"troubleshooting/#system-health-check","title":"System Health Check","text":"<pre><code># Quick health check script\n#!/bin/bash\necho \"=== Zero Trust Auth System Health Check ===\"\n\n# Check Docker\necho \"\ud83d\udc33 Docker Status:\"\ndocker --version &amp;&amp; echo \"\u2705 Docker OK\" || echo \"\u274c Docker not available\"\n\n# Check containers\necho \"\ud83d\udce6 Container Status:\"\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\" | grep mvp-zero-trust\n\n# Check services\necho \"\ud83c\udf10 Service Health:\"\ncurl -f http://localhost:8080/health &amp;&amp; echo \"\u2705 API OK\" || echo \"\u274c API not responding\"\ncurl -f http://localhost:5175 &amp;&amp; echo \"\u2705 Frontend OK\" || echo \"\u274c Frontend not responding\"\n\n# Check database\necho \"\ud83d\uddc4\ufe0f Database Status:\"\ndocker exec mvp-zero-trust-auth-postgres-1 pg_isready -U mvp_user &amp;&amp; echo \"\u2705 DB OK\" || echo \"\u274c DB not ready\"\n\n# Check logs for errors\necho \"\ud83d\udcdd Recent Errors:\"\ndocker logs mvp-zero-trust-auth-envoy-1 --tail 5 2&gt;&amp;1 | grep -i error || echo \"No recent errors\"\n</code></pre>"},{"location":"troubleshooting/#quick-fixes","title":"Quick Fixes","text":"<pre><code># Nuclear option - restart everything\nmake dev-down &amp;&amp; make clean &amp;&amp; make dev-up\n\n# Restart specific service\ndocker restart mvp-zero-trust-auth-envoy-1\n\n# Check and fix ports\nlsof -i :8080 | grep LISTEN  # Find what's using port 8080\nkill -9 &lt;PID&gt;                # Kill the process\n</code></pre>"},{"location":"troubleshooting/#common-issues","title":"\ud83d\udd27 Common Issues","text":""},{"location":"troubleshooting/#1-authentication-issues","title":"1. Authentication Issues","text":""},{"location":"troubleshooting/#problem-login-fails-with-invalid-credentials","title":"Problem: Login fails with \"Invalid credentials\"","text":"<p>Symptoms: - Frontend shows \"Login failed\" message - Backend logs show 401 responses - User exists in database</p> <p>Diagnosis: <pre><code># Check if admin user exists\ndocker exec mvp-zero-trust-auth-postgres-1 psql -U mvp_user -d mvp_db \\\n  -c \"SELECT username, is_active, created_at FROM users WHERE username = 'admin';\"\n\n# Check password hash\ndocker exec mvp-zero-trust-auth-postgres-1 psql -U mvp_user -d mvp_db \\\n  -c \"SELECT username, password_hash FROM users WHERE username = 'admin';\"\n\n# Test login API directly\ncurl -X POST http://localhost:8080/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"admin\",\"password\":\"password\"}' \\\n  -v\n</code></pre></p> <p>Solutions: <pre><code># Reset admin password\ndocker exec mvp-zero-trust-auth-postgres-1 psql -U mvp_user -d mvp_db \\\n  -c \"UPDATE users SET password_hash = '\\$2a\\$10\\$rZ0cK8YU.ZP7UF1YOV8nSu1KXhx/xH8P' WHERE username = 'admin';\"\n\n# Recreate admin user\nmake db-reset\n# Or manually:\ndocker exec mvp-zero-trust-auth-postgres-1 psql -U mvp_user -d mvp_db \\\n  -c \"INSERT INTO users (id, username, password_hash, email, first_name, last_name, is_active, is_admin) \n      VALUES (gen_random_uuid(), 'admin', '\\$2a\\$10\\$rZ0cK8YU.ZP7UF1YOV8nSu', 'admin@localhost', 'Admin', 'User', true, true);\"\n</code></pre></p>"},{"location":"troubleshooting/#problem-jwt-token-validation-fails","title":"Problem: JWT token validation fails","text":"<p>Symptoms: - 401 errors on protected endpoints - \"Invalid token\" messages - Token appears valid but is rejected</p> <p>Diagnosis: <pre><code># Check JWT secret configuration\ndocker exec mvp-zero-trust-auth-envoy-1 env | grep JWT_SECRET\n\n# Decode JWT token (replace with actual token)\necho \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" | base64 -d\n\n# Test token validation\ncurl -X GET http://localhost:8080/api/auth/me \\\n  -H \"Authorization: Bearer YOUR_TOKEN_HERE\" \\\n  -v\n</code></pre></p> <p>Solutions: <pre><code># Ensure consistent JWT secret\nexport JWT_SECRET=\"your-consistent-secret-key\"\ndocker restart mvp-zero-trust-auth-envoy-1\n\n# Clear browser storage and re-login\n# In browser console:\nlocalStorage.clear();\nsessionStorage.clear();\n</code></pre></p>"},{"location":"troubleshooting/#problem-demo-tokens-not-working","title":"Problem: Demo tokens not working","text":"<p>Symptoms: - Demo tokens return 401 - \"Demo token not allowed\" messages</p> <p>Diagnosis: <pre><code># Check if demo tokens are enabled\ngrep -r \"demo-token\" pkg/auth/\ngrep -r \"DISABLE_AUTH\" .env\n\n# Test demo token directly\ncurl -X GET http://localhost:8080/api/auth/me \\\n  -H \"Authorization: Bearer demo-token-admin-123\" \\\n  -v\n</code></pre></p> <p>Solutions: <pre><code># Ensure demo tokens are enabled in development\nexport DISABLE_AUTH=false\nexport ENVIRONMENT=development\n\n# Check middleware configuration\ngrep -A 10 -B 5 \"demo-token\" pkg/auth/middleware.go\n</code></pre></p>"},{"location":"troubleshooting/#2-database-issues","title":"2. Database Issues","text":""},{"location":"troubleshooting/#problem-database-connection-refused","title":"Problem: Database connection refused","text":"<p>Symptoms: - \"connection refused\" errors - \"failed to connect to database\" logs - Server won't start</p> <p>Diagnosis: <pre><code># Check if PostgreSQL container is running\ndocker ps | grep postgres\n\n# Check PostgreSQL logs\ndocker logs mvp-zero-trust-auth-postgres-1\n\n# Test connection manually\ndocker exec mvp-zero-trust-auth-postgres-1 pg_isready -U mvp_user\n\n# Test from host\npsql -h localhost -p 5432 -U mvp_user -d mvp_db\n</code></pre></p> <p>Solutions: <pre><code># Restart PostgreSQL\ndocker restart mvp-zero-trust-auth-postgres-1\n\n# Reset database completely\nmake db-reset\n\n# Check for port conflicts\nlsof -i :5432\n# Kill conflicting processes if needed\n\n# Start with fresh volumes\nmake dev-down\ndocker volume prune -f\nmake dev-up\n</code></pre></p>"},{"location":"troubleshooting/#problem-database-migration-errors","title":"Problem: Database migration errors","text":"<p>Symptoms: - Migration failed logs - Tables missing or incorrect schema - \"relation does not exist\" errors</p> <p>Diagnosis: <pre><code># Check current migrations\ndocker exec mvp-zero-trust-auth-postgres-1 psql -U mvp_user -d mvp_db \\\n  -c \"\\dt\"  # List tables\n\n# Check migration status\ndocker exec mvp-zero-trust-auth-postgres-1 psql -U mvp_user -d mvp_db \\\n  -c \"SELECT * FROM schema_migrations;\" 2&gt;/dev/null || echo \"No migration table\"\n\n# Check specific table structure\ndocker exec mvp-zero-trust-auth-postgres-1 psql -U mvp_user -d mvp_db \\\n  -c \"\\d users\"\n</code></pre></p> <p>Solutions: <pre><code># Force migration\nmake db-migrate\n\n# Reset and recreate database\nmake db-reset\n\n# Manual migration check\ndocker exec mvp-zero-trust-auth-postgres-1 psql -U mvp_user -d mvp_db \\\n  -f /docker-entrypoint-initdb.d/migrations.sql\n</code></pre></p>"},{"location":"troubleshooting/#3-frontend-issues","title":"3. Frontend Issues","text":""},{"location":"troubleshooting/#problem-frontend-build-errors","title":"Problem: Frontend build errors","text":"<p>Symptoms: - npm build fails - TypeScript compilation errors - Missing dependencies</p> <p>Diagnosis: <pre><code>cd frontend\n\n# Check Node.js version\nnode --version\nnpm --version\n\n# Check for dependency issues\nnpm ls\nnpm audit\n\n# Check TypeScript configuration\nnpx tsc --noEmit\n</code></pre></p> <p>Solutions: <pre><code>cd frontend\n\n# Clean install\nrm -rf node_modules package-lock.json\nnpm install\n\n# Fix TypeScript errors\nnpx tsc --noEmit --skipLibCheck\n\n# Update dependencies\nnpm update\nnpm audit fix\n\n# Check for conflicting global packages\nnpm list -g --depth=0\n</code></pre></p>"},{"location":"troubleshooting/#problem-api-calls-failing-from-frontend","title":"Problem: API calls failing from frontend","text":"<p>Symptoms: - CORS errors in browser console - Network errors - 404 errors for API endpoints</p> <p>Diagnosis: <pre><code># Check CORS configuration\ngrep -r \"CORS\" pkg/\ngrep -r \"AllowedOrigins\" .env\n\n# Test API directly\ncurl -X GET http://localhost:8080/api/auth/me \\\n  -H \"Origin: http://localhost:5175\" \\\n  -H \"Authorization: Bearer token\" \\\n  -v\n\n# Check network requests in browser dev tools\n# Open browser \u2192 F12 \u2192 Network tab\n</code></pre></p> <p>Solutions: <pre><code># Fix CORS configuration\nexport CORS_ALLOWED_ORIGINS=\"http://localhost:5175,http://localhost:3000\"\n\n# Check proxy configuration in vite.config.ts\ncat frontend/vite.config.ts | grep -A 10 proxy\n\n# Restart both frontend and backend\nmake dev-down &amp;&amp; make dev-up\ncd frontend &amp;&amp; npm run dev\n</code></pre></p>"},{"location":"troubleshooting/#4-docker-issues","title":"4. Docker Issues","text":""},{"location":"troubleshooting/#problem-containers-wont-start","title":"Problem: Containers won't start","text":"<p>Symptoms: - \"docker-compose up\" fails - Containers exit immediately - Port binding errors</p> <p>Diagnosis: <pre><code># Check Docker daemon\ndocker info\n\n# Check container status\ndocker ps -a\n\n# Check specific container logs\ndocker logs mvp-zero-trust-auth-envoy-1\n\n# Check resource usage\ndocker stats\n\n# Check for port conflicts\nnetstat -tulpn | grep :8080\n</code></pre></p> <p>Solutions: <pre><code># Restart Docker daemon (macOS)\nkillall Docker &amp;&amp; open /Applications/Docker.app\n\n# Clean up Docker resources\ndocker system prune -f\ndocker volume prune -f\ndocker network prune -f\n\n# Reset Docker Compose\nmake dev-down\ndocker-compose -f docker-compose.yml up -d --force-recreate\n\n# Fix permission issues\nsudo chown -R $USER:$USER .\n</code></pre></p>"},{"location":"troubleshooting/#problem-out-of-disk-space","title":"Problem: Out of disk space","text":"<p>Symptoms: - \"no space left on device\" errors - Docker build fails - Containers crash</p> <p>Diagnosis: <pre><code># Check disk usage\ndf -h\ndocker system df\n\n# Check Docker space usage\ndocker images --format \"table {{.Repository}}\\t{{.Tag}}\\t{{.Size}}\"\ndocker volume ls\n</code></pre></p> <p>Solutions: <pre><code># Clean up Docker\ndocker system prune -a -f\ndocker volume prune -f\ndocker builder prune -f\n\n# Remove unused images\ndocker rmi $(docker images -q --filter \"dangling=true\")\n\n# Remove old containers\ndocker rm $(docker ps -aq --filter \"status=exited\")\n</code></pre></p>"},{"location":"troubleshooting/#5-performance-issues","title":"5. Performance Issues","text":""},{"location":"troubleshooting/#problem-slow-api-responses","title":"Problem: Slow API responses","text":"<p>Symptoms: - API calls take &gt; 1 second - Timeouts - High CPU usage</p> <p>Diagnosis: <pre><code># Check container resource usage\ndocker stats\n\n# Check database performance\ndocker exec mvp-zero-trust-auth-postgres-1 psql -U mvp_user -d mvp_db \\\n  -c \"SELECT query, mean_exec_time FROM pg_stat_statements ORDER BY mean_exec_time DESC LIMIT 10;\"\n\n# Monitor API response times\ncurl -w \"@curl-format.txt\" -o /dev/null -s http://localhost:8080/api/auth/me\n\n# Create curl-format.txt:\ncat &gt; curl-format.txt &lt;&lt; 'EOF'\n     time_namelookup:  %{time_namelookup}\\n\n        time_connect:  %{time_connect}\\n\n     time_appconnect:  %{time_appconnect}\\n\n    time_pretransfer:  %{time_pretransfer}\\n\n       time_redirect:  %{time_redirect}\\n\n  time_starttransfer:  %{time_starttransfer}\\n\n                     ----------\\n\n          time_total:  %{time_total}\\n\nEOF\n</code></pre></p> <p>Solutions: <pre><code># Increase container resources\n# In docker-compose.yml:\n# deploy:\n#   resources:\n#     limits:\n#       memory: 1G\n#       cpus: '1.0'\n\n# Enable database query optimization\nexport DB_LOG_LEVEL=debug\n\n# Add database indexes (in migration)\ndocker exec mvp-zero-trust-auth-postgres-1 psql -U mvp_user -d mvp_db \\\n  -c \"CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);\"\n\n# Tune PostgreSQL settings\ndocker exec mvp-zero-trust-auth-postgres-1 psql -U mvp_user -d mvp_db \\\n  -c \"ALTER SYSTEM SET shared_buffers = '256MB';\"\n</code></pre></p>"},{"location":"troubleshooting/#debugging-tools","title":"\ud83d\udd0d Debugging Tools","text":""},{"location":"troubleshooting/#logs-analysis","title":"Logs Analysis","text":"<pre><code># View all logs\nmake logs\n\n# Filter logs by service\ndocker logs mvp-zero-trust-auth-envoy-1 2&gt;&amp;1 | grep ERROR\n\n# Follow logs in real-time\ndocker logs -f mvp-zero-trust-auth-envoy-1\n\n# Search logs for specific patterns\ndocker logs mvp-zero-trust-auth-envoy-1 2&gt;&amp;1 | grep -i \"authentication\\|login\\|token\"\n\n# Export logs for analysis\ndocker logs mvp-zero-trust-auth-envoy-1 &gt; server.log 2&gt;&amp;1\n</code></pre>"},{"location":"troubleshooting/#database-inspection","title":"Database Inspection","text":"<pre><code># Connect to database\ndocker exec -it mvp-zero-trust-auth-postgres-1 psql -U mvp_user -d mvp_db\n\n# Common database queries\n\\dt                              # List tables\n\\d users                         # Describe users table\nSELECT * FROM users LIMIT 5;    # View user data\nSELECT COUNT(*) FROM users;     # Count users\n\n# Check database performance\nSELECT schemaname,tablename,attname,n_distinct,correlation \nFROM pg_stats \nWHERE tablename = 'users';\n\n# View active connections\nSELECT pid, usename, application_name, client_addr, state \nFROM pg_stat_activity \nWHERE state = 'active';\n</code></pre>"},{"location":"troubleshooting/#api-testing","title":"API Testing","text":"<pre><code># Health check\ncurl -f http://localhost:8080/health\n\n# Authentication test\ncurl -X POST http://localhost:8080/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"admin\",\"password\":\"password\"}' \\\n  | jq '.'\n\n# Protected endpoint test\nTOKEN=\"your-token-here\"\ncurl -X GET http://localhost:8080/api/auth/me \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  | jq '.'\n\n# Device endpoint test\ncurl -X GET http://localhost:8080/api/devices \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  | jq '.'\n</code></pre>"},{"location":"troubleshooting/#network-debugging","title":"Network Debugging","text":"<pre><code># Check port connectivity\ntelnet localhost 8080\nnc -zv localhost 8080\n\n# Check DNS resolution\nnslookup postgres\nnslookup redis\n\n# Network connectivity between containers\ndocker exec mvp-zero-trust-auth-envoy-1 ping postgres\ndocker exec mvp-zero-trust-auth-envoy-1 nc -zv postgres 5432\n\n# Check container networks\ndocker network ls\ndocker network inspect mvp-zero-trust-auth_mvp-network\n</code></pre>"},{"location":"troubleshooting/#advanced-troubleshooting","title":"\ud83d\udee0\ufe0f Advanced Troubleshooting","text":""},{"location":"troubleshooting/#memory-issues","title":"Memory Issues","text":"<pre><code># Check memory usage\ndocker stats --format \"table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.MemPerc}}\"\n\n# Go memory profiling\ncurl http://localhost:9000/debug/pprof/heap &gt; heap.out\ngo tool pprof heap.out\n\n# Check for memory leaks\ndocker exec mvp-zero-trust-auth-envoy-1 top -p 1\n</code></pre>"},{"location":"troubleshooting/#security-issues","title":"Security Issues","text":"<pre><code># Check for security vulnerabilities\ngo install golang.org/x/vuln/cmd/govulncheck@latest\ngovulncheck ./...\n\n# Scan Docker images\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n  aquasec/trivy image mvp-auth:latest\n\n# Check file permissions\nls -la configs/\nls -la certs/\n</code></pre>"},{"location":"troubleshooting/#configuration-issues","title":"Configuration Issues","text":"<pre><code># Dump current configuration\ndocker exec mvp-zero-trust-auth-envoy-1 env | sort\n\n# Check environment file\ncat .env | grep -v '^#' | sort\n\n# Validate configuration\n# Add to your Go code:\n// func (c *Config) Validate() error { ... }\n</code></pre>"},{"location":"troubleshooting/#monitoring-and-alerting","title":"\ud83d\udcca Monitoring and Alerting","text":""},{"location":"troubleshooting/#set-up-monitoring","title":"Set up Monitoring","text":"<pre><code># Check Prometheus targets\ncurl http://localhost:9090/api/v1/targets\n\n# Check Grafana dashboards\nopen http://localhost:3000\n\n# View Jaeger traces\nopen http://localhost:16686\n\n# Custom metrics query\ncurl 'http://localhost:9090/api/v1/query?query=up'\n</code></pre>"},{"location":"troubleshooting/#health-monitoring-script","title":"Health Monitoring Script","text":"<pre><code>#!/bin/bash\n# scripts/health-monitor.sh\n\nwhile true; do\n    # Check API health\n    if curl -f http://localhost:8080/health &gt;/dev/null 2&gt;&amp;1; then\n        echo \"$(date): \u2705 API healthy\"\n    else\n        echo \"$(date): \u274c API unhealthy\"\n        # Send alert or restart service\n    fi\n\n    # Check database\n    if docker exec mvp-zero-trust-auth-postgres-1 pg_isready -U mvp_user &gt;/dev/null 2&gt;&amp;1; then\n        echo \"$(date): \u2705 Database healthy\"\n    else\n        echo \"$(date): \u274c Database unhealthy\"\n    fi\n\n    sleep 30\ndone\n</code></pre>"},{"location":"troubleshooting/#emergency-procedures","title":"\ud83c\udd98 Emergency Procedures","text":""},{"location":"troubleshooting/#complete-system-reset","title":"Complete System Reset","text":"<pre><code>#!/bin/bash\n# Nuclear option - completely reset everything\n\necho \"\ud83d\udea8 EMERGENCY SYSTEM RESET\"\necho \"This will delete ALL data. Press Ctrl+C to cancel.\"\nsleep 10\n\n# Stop everything\nmake dev-down\n\n# Remove all containers\ndocker rm -f $(docker ps -aq)\n\n# Remove all volumes\ndocker volume rm -f $(docker volume ls -q)\n\n# Remove all networks\ndocker network rm $(docker network ls -q) 2&gt;/dev/null || true\n\n# Clean system\ndocker system prune -a -f\n\n# Remove local data\nrm -rf data/ logs/\n\n# Restart from scratch\nmake dev-setup\nmake dev-up\n\necho \"\u2705 System reset complete\"\n</code></pre>"},{"location":"troubleshooting/#data-recovery","title":"Data Recovery","text":"<pre><code># Backup current state before recovery\ndocker exec mvp-zero-trust-auth-postgres-1 pg_dump -U mvp_user mvp_db &gt; backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Restore from backup\ndocker exec -i mvp-zero-trust-auth-postgres-1 psql -U mvp_user mvp_db &lt; backup_file.sql\n\n# Export container data\ndocker run --rm -v mvp_postgres_data:/data -v $(pwd):/backup alpine tar czf /backup/postgres_backup.tar.gz /data\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"\ud83d\udcde Getting Help","text":""},{"location":"troubleshooting/#collecting-debug-information","title":"Collecting Debug Information","text":"<pre><code>#!/bin/bash\n# scripts/collect-debug-info.sh\n\nDEBUG_DIR=\"debug_$(date +%Y%m%d_%H%M%S)\"\nmkdir -p $DEBUG_DIR\n\n# System information\nuname -a &gt; $DEBUG_DIR/system_info.txt\ndocker --version &gt;&gt; $DEBUG_DIR/system_info.txt\ndocker-compose --version &gt;&gt; $DEBUG_DIR/system_info.txt\n\n# Container status\ndocker ps -a &gt; $DEBUG_DIR/containers.txt\ndocker images &gt; $DEBUG_DIR/images.txt\n\n# Logs\ndocker logs mvp-zero-trust-auth-envoy-1 &gt; $DEBUG_DIR/server.log 2&gt;&amp;1\ndocker logs mvp-zero-trust-auth-postgres-1 &gt; $DEBUG_DIR/postgres.log 2&gt;&amp;1\n\n# Configuration\ncp .env $DEBUG_DIR/ 2&gt;/dev/null || echo \"No .env file\" &gt; $DEBUG_DIR/env_missing.txt\ncp docker-compose.yml $DEBUG_DIR/\n\n# Network information\ndocker network ls &gt; $DEBUG_DIR/networks.txt\nnetstat -tulpn &gt; $DEBUG_DIR/ports.txt\n\n# Create archive\ntar czf ${DEBUG_DIR}.tar.gz $DEBUG_DIR/\necho \"Debug information collected in ${DEBUG_DIR}.tar.gz\"\n</code></pre>"},{"location":"troubleshooting/#support-channels","title":"Support Channels","text":"<ol> <li>GitHub Issues: For bugs and feature requests</li> <li>Documentation: Check docs/ directory</li> <li>Stack Overflow: Tag with <code>zero-trust-auth</code></li> <li>Community Discord: Link in README</li> </ol>"},{"location":"troubleshooting/#before-asking-for-help","title":"Before Asking for Help","text":"<ul> <li> Check this troubleshooting guide</li> <li> Search existing GitHub issues</li> <li> Collect debug information</li> <li> Try the system reset procedure</li> <li> Provide minimal reproduction steps</li> </ul>"},{"location":"troubleshooting/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Development Setup</li> <li>API Documentation</li> <li>Deployment Guide</li> <li>Security Configuration</li> </ul>"},{"location":"api/","title":"API Documentation","text":"<p>The Zero Trust Auth MVP provides a comprehensive REST API for authentication, device management, and system administration.</p>"},{"location":"api/#base-information","title":"\ud83c\udf10 Base Information","text":"<ul> <li>Base URL: <code>http://localhost:8080/api</code></li> <li>Content Type: <code>application/json</code></li> <li>Authentication: Bearer JWT tokens</li> <li>API Version: v1.0</li> <li>Swagger UI: http://localhost:8080/swagger/index.html</li> </ul>"},{"location":"api/#authentication","title":"\ud83d\udd10 Authentication","text":""},{"location":"api/#overview","title":"Overview","text":"<p>The API uses JWT (JSON Web Tokens) for authentication with a dual-token approach: - Access Token: Short-lived (24h default) for API access - Refresh Token: Long-lived for obtaining new access tokens</p>"},{"location":"api/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant API\n    participant Database\n\n    Client-&gt;&gt;API: POST /api/auth/login (username, password)\n    API-&gt;&gt;Database: Validate credentials\n    Database--&gt;&gt;API: User data\n    API--&gt;&gt;Client: JWT access + refresh tokens\n\n    Client-&gt;&gt;API: GET /api/protected (Authorization: Bearer token)\n    API-&gt;&gt;API: Validate JWT\n    API--&gt;&gt;Client: Protected resource\n\n    Note over Client,API: When access token expires\n    Client-&gt;&gt;API: POST /api/auth/refresh (refresh token)\n    API--&gt;&gt;Client: New access token</code></pre>"},{"location":"api/#api-endpoints","title":"\ud83d\udcda API Endpoints","text":""},{"location":"api/#authentication-endpoints","title":"Authentication Endpoints","text":""},{"location":"api/#post-apiauthlogin","title":"<code>POST /api/auth/login</code>","text":"<p>Authenticate user and obtain JWT tokens.</p> <p>Request: <pre><code>{\n  \"username\": \"admin\",\n  \"password\": \"password\"\n}\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 86400,\n  \"user\": {\n    \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"username\": \"admin\",\n    \"email\": \"admin@localhost\",\n    \"first_name\": \"Admin\",\n    \"last_name\": \"User\",\n    \"is_active\": true,\n    \"is_admin\": true,\n    \"created_at\": \"2024-01-15T10:30:45Z\"\n  }\n}\n</code></pre></p> <p>Error Response (401 Unauthorized): <pre><code>{\n  \"error\": \"Invalid credentials\",\n  \"message\": \"Username or password is incorrect\"\n}\n</code></pre></p>"},{"location":"api/#post-apiauthregister","title":"<code>POST /api/auth/register</code>","text":"<p>Register a new user account.</p> <p>Request: <pre><code>{\n  \"username\": \"newuser\",\n  \"email\": \"user@example.com\",\n  \"password\": \"securepassword\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\"\n}\n</code></pre></p> <p>Response (201 Created): <pre><code>{\n  \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"username\": \"newuser\",\n  \"email\": \"user@example.com\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"is_active\": true,\n  \"is_admin\": false,\n  \"created_at\": \"2024-01-15T10:30:45Z\"\n}\n</code></pre></p>"},{"location":"api/#post-apiauthrefresh","title":"<code>POST /api/auth/refresh</code>","text":"<p>Refresh access token using refresh token.</p> <p>Request: <pre><code>{\n  \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 86400\n}\n</code></pre></p>"},{"location":"api/#get-apiauthme","title":"<code>GET /api/auth/me</code>","text":"<p>Get current authenticated user information.</p> <p>Headers: <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"username\": \"admin\",\n  \"email\": \"admin@localhost\",\n  \"first_name\": \"Admin\",\n  \"last_name\": \"User\",\n  \"is_active\": true,\n  \"is_admin\": true,\n  \"roles\": [\"admin\", \"user\"],\n  \"permissions\": [\"system:admin\", \"device:verify\"],\n  \"created_at\": \"2024-01-15T10:30:45Z\"\n}\n</code></pre></p>"},{"location":"api/#post-apiauthlogout","title":"<code>POST /api/auth/logout</code>","text":"<p>Invalidate current session and tokens.</p> <p>Headers: <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"message\": \"Successfully logged out\"\n}\n</code></pre></p>"},{"location":"api/#post-apiauthchange-password","title":"<code>POST /api/auth/change-password</code>","text":"<p>Change user password.</p> <p>Headers: <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre></p> <p>Request: <pre><code>{\n  \"current_password\": \"oldpassword\",\n  \"new_password\": \"newpassword\"\n}\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"message\": \"Password changed successfully\"\n}\n</code></pre></p>"},{"location":"api/#device-management-endpoints","title":"Device Management Endpoints","text":""},{"location":"api/#get-apidevices","title":"<code>GET /api/devices</code>","text":"<p>Get all device attestations for the authenticated user.</p> <p>Headers: <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre></p> <p>Response (200 OK): <pre><code>[\n  {\n    \"id\": \"1\",\n    \"device_id\": \"device-001\",\n    \"device_name\": \"MacBook Pro\",\n    \"trust_level\": 85,\n    \"is_verified\": true,\n    \"verified_at\": \"2024-01-15T10:30:45Z\",\n    \"platform\": \"macOS\",\n    \"spiffe_id\": \"spiffe://mvp.local/device/device-001\",\n    \"attestation_data\": {\n      \"tpm\": \"enabled\",\n      \"secure_boot\": \"enabled\",\n      \"biometric\": \"enabled\"\n    },\n    \"created_at\": \"2024-01-15T10:00:00Z\",\n    \"updated_at\": \"2024-01-15T10:30:45Z\"\n  }\n]\n</code></pre></p>"},{"location":"api/#post-apidevices","title":"<code>POST /api/devices</code>","text":"<p>Create a new device attestation.</p> <p>Headers: <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre></p> <p>Request: <pre><code>{\n  \"device_id\": \"device-002\",\n  \"device_name\": \"iPhone 14\",\n  \"platform\": \"iOS\",\n  \"spiffe_id\": \"spiffe://mvp.local/device/device-002\",\n  \"workload_selector\": \"device:mobile\",\n  \"attestation_data\": {\n    \"secure_enclave\": \"enabled\",\n    \"biometric\": \"face_id\",\n    \"jailbreak_detection\": \"passed\"\n  }\n}\n</code></pre></p> <p>Response (201 Created): <pre><code>{\n  \"id\": \"2\",\n  \"device_id\": \"device-002\",\n  \"device_name\": \"iPhone 14\",\n  \"trust_level\": 70,\n  \"is_verified\": false,\n  \"platform\": \"iOS\",\n  \"spiffe_id\": \"spiffe://mvp.local/device/device-002\",\n  \"workload_selector\": \"device:mobile\",\n  \"attestation_data\": {\n    \"secure_enclave\": \"enabled\",\n    \"biometric\": \"face_id\",\n    \"jailbreak_detection\": \"passed\"\n  },\n  \"created_at\": \"2024-01-15T11:00:00Z\",\n  \"updated_at\": \"2024-01-15T11:00:00Z\"\n}\n</code></pre></p>"},{"location":"api/#get-apidevicesid","title":"<code>GET /api/devices/{id}</code>","text":"<p>Get specific device by ID.</p> <p>Headers: <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"id\": \"1\",\n  \"device_id\": \"device-001\",\n  \"device_name\": \"MacBook Pro\",\n  \"trust_level\": 85,\n  \"is_verified\": true,\n  \"verified_at\": \"2024-01-15T10:30:45Z\",\n  \"platform\": \"macOS\",\n  \"spiffe_id\": \"spiffe://mvp.local/device/device-001\",\n  \"attestation_data\": {\n    \"tpm\": \"enabled\",\n    \"secure_boot\": \"enabled\",\n    \"biometric\": \"enabled\"\n  },\n  \"created_at\": \"2024-01-15T10:00:00Z\",\n  \"updated_at\": \"2024-01-15T10:30:45Z\"\n}\n</code></pre></p>"},{"location":"api/#put-apidevicesid","title":"<code>PUT /api/devices/{id}</code>","text":"<p>Update device information.</p> <p>Headers: <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre></p> <p>Request: <pre><code>{\n  \"device_name\": \"MacBook Pro M2\",\n  \"attestation_data\": {\n    \"tpm\": \"enabled\",\n    \"secure_boot\": \"enabled\",\n    \"biometric\": \"enabled\",\n    \"secure_enclave\": \"enabled\"\n  }\n}\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"id\": \"1\",\n  \"device_id\": \"device-001\",\n  \"device_name\": \"MacBook Pro M2\",\n  \"trust_level\": 85,\n  \"is_verified\": true,\n  \"verified_at\": \"2024-01-15T10:30:45Z\",\n  \"platform\": \"macOS\",\n  \"updated_at\": \"2024-01-15T11:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/#delete-apidevicesid","title":"<code>DELETE /api/devices/{id}</code>","text":"<p>Delete device attestation.</p> <p>Headers: <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"message\": \"Device deleted successfully\"\n}\n</code></pre></p>"},{"location":"api/#post-apidevicesidverify","title":"<code>POST /api/devices/{id}/verify</code>","text":"<p>Verify device attestation (requires device.verify permission).</p> <p>Headers: <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre></p> <p>Request: <pre><code>{\n  \"trust_level\": 95\n}\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"id\": \"1\",\n  \"device_id\": \"device-001\",\n  \"device_name\": \"MacBook Pro\",\n  \"trust_level\": 95,\n  \"is_verified\": true,\n  \"verified_at\": \"2024-01-15T11:45:00Z\",\n  \"platform\": \"macOS\",\n  \"updated_at\": \"2024-01-15T11:45:00Z\"\n}\n</code></pre></p>"},{"location":"api/#admin-management-endpoints","title":"Admin Management Endpoints","text":""},{"location":"api/#get-apiadminroles","title":"<code>GET /api/admin/roles</code>","text":"<p>List all roles in the system.</p> <p>Headers: <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre></p> <p>Response (200 OK): <pre><code>[\n  {\n    \"id\": 1,\n    \"name\": \"admin\",\n    \"description\": \"Administrator role\",\n    \"is_active\": true\n  },\n  {\n    \"id\": 2,\n    \"name\": \"user\",\n    \"description\": \"Standard user role\",\n    \"is_active\": true\n  }\n]\n</code></pre></p>"},{"location":"api/#post-apiadminroles","title":"<code>POST /api/admin/roles</code>","text":"<p>Create a new role.</p> <p>Headers: <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre></p> <p>Request: <pre><code>{\n  \"name\": \"moderator\",\n  \"description\": \"Moderator role with limited admin privileges\"\n}\n</code></pre></p> <p>Response (201 Created): <pre><code>{\n  \"id\": 3,\n  \"name\": \"moderator\",\n  \"description\": \"Moderator role with limited admin privileges\",\n  \"is_active\": true\n}\n</code></pre></p>"},{"location":"api/#get-apiadminusers","title":"<code>GET /api/admin/users</code>","text":"<p>List all users in the system.</p> <p>Headers: <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre></p> <p>Response (200 OK): <pre><code>[\n  {\n    \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"username\": \"admin\",\n    \"email\": \"admin@localhost\",\n    \"first_name\": \"Admin\",\n    \"last_name\": \"User\",\n    \"is_active\": true,\n    \"is_admin\": true,\n    \"created_at\": \"2024-01-15T10:30:45Z\"\n  }\n]\n</code></pre></p>"},{"location":"api/#system-endpoints","title":"System Endpoints","text":""},{"location":"api/#get-health","title":"<code>GET /health</code>","text":"<p>Basic health check (public endpoint).</p> <p>Response (200 OK): <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T11:45:00Z\",\n  \"services\": {\n    \"database\": {\n      \"status\": \"healthy\",\n      \"last_check\": \"2024-01-15T11:45:00Z\",\n      \"response_time\": \"2ms\"\n    },\n    \"redis\": {\n      \"status\": \"healthy\",\n      \"last_check\": \"2024-01-15T11:45:00Z\",\n      \"response_time\": \"1ms\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/#get-apisystemhealth","title":"<code>GET /api/system/health</code>","text":"<p>Detailed system health information (requires authentication).</p> <p>Headers: <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T11:45:00Z\",\n  \"services\": {\n    \"database\": {\n      \"status\": \"healthy\",\n      \"last_check\": \"2024-01-15T11:45:00Z\",\n      \"response_time\": \"2ms\",\n      \"details\": {\n        \"open_connections\": 5,\n        \"max_connections\": 100,\n        \"version\": \"PostgreSQL 15.3\"\n      }\n    },\n    \"redis\": {\n      \"status\": \"healthy\",\n      \"last_check\": \"2024-01-15T11:45:00Z\",\n      \"response_time\": \"1ms\",\n      \"details\": {\n        \"memory\": \"1.2MB\",\n        \"connected_clients\": 3,\n        \"version\": \"7.0.11\"\n      }\n    },\n    \"nats\": {\n      \"status\": \"healthy\",\n      \"last_check\": \"2024-01-15T11:45:00Z\",\n      \"response_time\": \"1ms\",\n      \"details\": {\n        \"note\": \"NATS health check not implemented\"\n      }\n    },\n    \"spire\": {\n      \"status\": \"degraded\",\n      \"last_check\": \"2024-01-15T11:45:00Z\",\n      \"response_time\": \"5ms\",\n      \"details\": {\n        \"note\": \"SPIRE integration not fully implemented\"\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/#security-headers","title":"\ud83d\udd12 Security Headers","text":"<p>All API responses include security headers: - <code>X-Content-Type-Options: nosniff</code> - <code>X-Frame-Options: DENY</code> - <code>X-XSS-Protection: 1; mode=block</code></p>"},{"location":"api/#rate-limiting","title":"\ud83d\udcca Rate Limiting","text":"<p>The API implements rate limiting to prevent abuse: - Authentication endpoints: 10 requests per minute per IP - General API: 100 requests per minute per user - Admin endpoints: 50 requests per minute per admin user</p> <p>Rate limit headers are included in responses: <pre><code>X-RateLimit-Limit: 100\nX-RateLimit-Remaining: 95\nX-RateLimit-Reset: 1642252800\n</code></pre></p>"},{"location":"api/#error-handling","title":"\u274c Error Handling","text":""},{"location":"api/#standard-error-response-format","title":"Standard Error Response Format","text":"<pre><code>{\n  \"error\": \"Error Type\",\n  \"message\": \"Detailed error message\",\n  \"timestamp\": \"2024-01-15T11:45:00Z\",\n  \"path\": \"/api/auth/login\",\n  \"trace_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}\n</code></pre>"},{"location":"api/#http-status-codes","title":"HTTP Status Codes","text":"<ul> <li><code>200 OK</code> - Successful request</li> <li><code>201 Created</code> - Resource created successfully</li> <li><code>204 No Content</code> - Successful request with no response body</li> <li><code>400 Bad Request</code> - Invalid request data</li> <li><code>401 Unauthorized</code> - Authentication required or invalid</li> <li><code>403 Forbidden</code> - Insufficient permissions</li> <li><code>404 Not Found</code> - Resource not found</li> <li><code>409 Conflict</code> - Resource conflict (e.g., duplicate username)</li> <li><code>422 Unprocessable Entity</code> - Validation errors</li> <li><code>429 Too Many Requests</code> - Rate limit exceeded</li> <li><code>500 Internal Server Error</code> - Server error</li> </ul>"},{"location":"api/#common-error-examples","title":"Common Error Examples","text":""},{"location":"api/#validation-error-422","title":"Validation Error (422)","text":"<pre><code>{\n  \"error\": \"Validation Failed\",\n  \"message\": \"Request validation failed\",\n  \"details\": {\n    \"username\": [\"Username is required\"],\n    \"email\": [\"Email format is invalid\"]\n  }\n}\n</code></pre>"},{"location":"api/#authentication-error-401","title":"Authentication Error (401)","text":"<pre><code>{\n  \"error\": \"Unauthorized\",\n  \"message\": \"Invalid or expired token\"\n}\n</code></pre>"},{"location":"api/#permission-error-403","title":"Permission Error (403)","text":"<pre><code>{\n  \"error\": \"Forbidden\",\n  \"message\": \"Insufficient permissions to access this resource\"\n}\n</code></pre>"},{"location":"api/#rate-limit-error-429","title":"Rate Limit Error (429)","text":"<pre><code>{\n  \"error\": \"Too Many Requests\",\n  \"message\": \"Rate limit exceeded. Try again in 60 seconds.\",\n  \"retry_after\": 60\n}\n</code></pre>"},{"location":"api/#testing-the-api","title":"\ud83e\uddea Testing the API","text":""},{"location":"api/#using-curl","title":"Using curl","text":""},{"location":"api/#login","title":"Login","text":"<pre><code>curl -X POST http://localhost:8080/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"admin\",\"password\":\"password\"}'\n</code></pre>"},{"location":"api/#get-current-user","title":"Get current user","text":"<pre><code>TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\ncurl -X GET http://localhost:8080/api/auth/me \\\n  -H \"Authorization: Bearer $TOKEN\"\n</code></pre>"},{"location":"api/#create-device","title":"Create device","text":"<pre><code>curl -X POST http://localhost:8080/api/devices \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"device_id\": \"test-device\",\n    \"device_name\": \"Test Device\",\n    \"platform\": \"Linux\"\n  }'\n</code></pre>"},{"location":"api/#using-postman","title":"Using Postman","text":"<p>Import the OpenAPI specification from <code>docs/openapi.yaml</code> to automatically generate a Postman collection.</p>"},{"location":"api/#interactive-testing","title":"Interactive Testing","text":"<p>Visit the Swagger UI at http://localhost:8080/swagger/index.html for interactive API testing.</p>"},{"location":"api/#api-versioning","title":"\ud83d\udcdd API Versioning","text":"<p>Currently using implicit v1 versioning. Future versions will use: - URL versioning: <code>/api/v2/auth/login</code> - Header versioning: <code>Accept: application/vnd.api+json;version=2</code></p>"},{"location":"api/#pagination","title":"\ud83d\udd04 Pagination","text":"<p>For endpoints returning lists, pagination is supported:</p> <p>Request: <pre><code>GET /api/admin/users?page=1&amp;limit=20&amp;sort=created_at&amp;order=desc\n</code></pre></p> <p>Response: <pre><code>{\n  \"data\": [...],\n  \"pagination\": {\n    \"page\": 1,\n    \"limit\": 20,\n    \"total\": 100,\n    \"pages\": 5\n  }\n}\n</code></pre></p>"},{"location":"api/#filtering-and-search","title":"\ud83d\udd0d Filtering and Search","text":"<p>Many endpoints support filtering and search:</p> <p>Examples: <pre><code>GET /api/devices?platform=macOS&amp;verified=true\nGET /api/admin/users?search=john&amp;active=true\nGET /api/devices?created_after=2024-01-01&amp;trust_level_min=80\n</code></pre></p>"},{"location":"api/authentication/","title":"Authentication Flow Documentation","text":"<p>This document details the authentication mechanisms and flows implemented in the Zero Trust Auth MVP.</p>"},{"location":"api/authentication/#authentication-overview","title":"\ud83d\udd10 Authentication Overview","text":"<p>The system implements a multi-layered authentication approach designed for Zero Trust security:</p> <ol> <li>Primary Authentication: Username/password with JWT tokens</li> <li>Device Authentication: Device attestation with trust levels</li> <li>Continuous Verification: Session validation and refresh</li> <li>Demo Token Support: Temporary development authentication</li> </ol>"},{"location":"api/authentication/#authentication-strategies","title":"\ud83c\udfaf Authentication Strategies","text":""},{"location":"api/authentication/#1-jwt-based-authentication","title":"1. JWT-Based Authentication","text":"<p>The primary authentication mechanism uses JSON Web Tokens (JWT) with dual tokens:</p> <pre><code>graph TD\n    A[User Login] --&gt; B[Credential Validation]\n    B --&gt; C[Generate Access Token]\n    B --&gt; D[Generate Refresh Token]\n    C --&gt; E[Store Session Info]\n    D --&gt; E\n    E --&gt; F[Return Tokens]\n\n    G[API Request] --&gt; H[Validate Access Token]\n    H --&gt; I{Token Valid?}\n    I --&gt;|Yes| J[Allow Request]\n    I --&gt;|No| K[Return 401]\n\n    L[Token Expired] --&gt; M[Use Refresh Token]\n    M --&gt; N[Generate New Access Token]\n    N --&gt; O[Continue Request]</code></pre>"},{"location":"api/authentication/#access-token-structure","title":"Access Token Structure","text":"<pre><code>{\n  \"header\": {\n    \"alg\": \"HS256\",\n    \"typ\": \"JWT\"\n  },\n  \"payload\": {\n    \"sub\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"username\": \"admin\",\n    \"roles\": [\"admin\", \"user\"],\n    \"permissions\": [\"system:admin\", \"device:verify\"],\n    \"iat\": 1642252800,\n    \"exp\": 1642339200,\n    \"iss\": \"mvp-zero-trust-auth\",\n    \"aud\": \"mvp-zero-trust-auth\"\n  },\n  \"signature\": \"...\"\n}\n</code></pre>"},{"location":"api/authentication/#token-configuration","title":"Token Configuration","text":"<pre><code>jwt:\n  secret: \"${JWT_SECRET}\"\n  access_token_expiration: \"24h\"\n  refresh_token_expiration: \"7d\"\n  issuer: \"mvp-zero-trust-auth\"\n  audience: \"mvp-zero-trust-auth\"\n  algorithm: \"HS256\"\n</code></pre>"},{"location":"api/authentication/#2-demo-token-authentication-development","title":"2. Demo Token Authentication (Development)","text":"<p>For development and testing, the system supports demo tokens:</p> <pre><code>// Demo token format: demo-token-{username}-{timestamp}\n// Example: demo-token-admin-1750274157\n\nfunc (a *AuthMiddleware) handleDemoToken(tokenString string) error {\n    // Extract username from demo token\n    if len(tokenString) &gt; 10 &amp;&amp; tokenString[:10] == \"demo-token\" {\n        // Find user in database\n        var user models.User\n        if err := a.db.Where(\"username = ?\", \"admin\").First(&amp;user).Error; err != nil {\n            return err\n        }\n\n        // Set user context\n        c.Locals(\"user_id\", user.ID)\n        c.Locals(\"user\", &amp;user)\n        c.Locals(\"user_roles\", []string{\"admin\", \"user\"})\n\n        return nil\n    }\n    return errors.New(\"invalid demo token\")\n}\n</code></pre>"},{"location":"api/authentication/#3-device-based-authentication","title":"3. Device-Based Authentication","text":"<p>Zero Trust requires device verification:</p> <pre><code>sequenceDiagram\n    participant Device\n    participant API\n    participant SPIRE\n    participant Database\n\n    Device-&gt;&gt;API: Device Attestation Request\n    API-&gt;&gt;SPIRE: Validate Device Identity\n    SPIRE--&gt;&gt;API: Device Certificate\n    API-&gt;&gt;API: Calculate Trust Level\n    API-&gt;&gt;Database: Store Device Info\n    Database--&gt;&gt;API: Device ID\n    API--&gt;&gt;Device: Device Attestation Response\n\n    Note over Device,API: Subsequent requests\n    Device-&gt;&gt;API: API Request + Device ID\n    API-&gt;&gt;Database: Verify Device Trust\n    Database--&gt;&gt;API: Trust Level\n    API-&gt;&gt;API: Authorize based on trust\n    API--&gt;&gt;Device: Response</code></pre>"},{"location":"api/authentication/#trust-level-calculation","title":"Trust Level Calculation","text":"<pre><code>func (h *DeviceHandler) calculateInitialTrustLevel(platform string, attestationData map[string]interface{}) int {\n    baseTrust := 30\n\n    // Platform-based adjustments\n    switch platform {\n    case \"Windows 11\", \"macOS\", \"Linux\":\n        baseTrust += 20\n    case \"iOS\", \"Android\":\n        baseTrust += 15\n    }\n\n    // Security feature adjustments\n    if attestationData != nil {\n        if tpm, ok := attestationData[\"tpm\"]; ok &amp;&amp; tpm == \"enabled\" {\n            baseTrust += 20\n        }\n        if biometric, ok := attestationData[\"biometric\"]; ok &amp;&amp; biometric == \"enabled\" {\n            baseTrust += 15\n        }\n        if secureBoot, ok := attestationData[\"secure_boot\"]; ok &amp;&amp; secureBoot == \"enabled\" {\n            baseTrust += 10\n        }\n    }\n\n    // Cap at 85 for initial attestation\n    if baseTrust &gt; 85 {\n        baseTrust = 85\n    }\n\n    return baseTrust\n}\n</code></pre>"},{"location":"api/authentication/#authentication-flows","title":"\ud83d\udd04 Authentication Flows","text":""},{"location":"api/authentication/#1-initial-login-flow","title":"1. Initial Login Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Frontend\n    participant API\n    participant Database\n    participant Redis\n\n    Client-&gt;&gt;Frontend: Enter credentials\n    Frontend-&gt;&gt;API: POST /api/auth/login\n    API-&gt;&gt;Database: Validate user credentials\n    Database--&gt;&gt;API: User data\n    API-&gt;&gt;API: Generate JWT tokens\n    API-&gt;&gt;Redis: Store session info\n    Redis--&gt;&gt;API: Session stored\n    API--&gt;&gt;Frontend: Access + Refresh tokens\n    Frontend-&gt;&gt;Frontend: Store tokens in localStorage\n    Frontend--&gt;&gt;Client: Redirect to dashboard</code></pre>"},{"location":"api/authentication/#2-protected-resource-access","title":"2. Protected Resource Access","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Frontend\n    participant API\n    participant Database\n\n    Client-&gt;&gt;Frontend: Access protected page\n    Frontend-&gt;&gt;Frontend: Check stored token\n    Frontend-&gt;&gt;API: GET /api/auth/me (Authorization: Bearer token)\n    API-&gt;&gt;API: Validate JWT signature\n    API-&gt;&gt;API: Check token expiration\n    API-&gt;&gt;Database: Verify user exists and active\n    Database--&gt;&gt;API: User data\n    API--&gt;&gt;Frontend: User information\n    Frontend--&gt;&gt;Client: Display protected content</code></pre>"},{"location":"api/authentication/#3-token-refresh-flow","title":"3. Token Refresh Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Frontend\n    participant API\n    participant Database\n    participant Redis\n\n    Client-&gt;&gt;Frontend: API request with expired token\n    Frontend-&gt;&gt;API: API request\n    API--&gt;&gt;Frontend: 401 Unauthorized\n    Frontend-&gt;&gt;Frontend: Check refresh token\n    Frontend-&gt;&gt;API: POST /api/auth/refresh\n    API-&gt;&gt;API: Validate refresh token\n    API-&gt;&gt;Redis: Check session exists\n    Redis--&gt;&gt;API: Session valid\n    API-&gt;&gt;Database: Verify user still active\n    Database--&gt;&gt;API: User active\n    API-&gt;&gt;API: Generate new access token\n    API--&gt;&gt;Frontend: New access token\n    Frontend-&gt;&gt;Frontend: Update stored token\n    Frontend-&gt;&gt;API: Retry original request\n    API--&gt;&gt;Frontend: Success response\n    Frontend--&gt;&gt;Client: Display content</code></pre>"},{"location":"api/authentication/#4-logout-flow","title":"4. Logout Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Frontend\n    participant API\n    participant Redis\n\n    Client-&gt;&gt;Frontend: Logout request\n    Frontend-&gt;&gt;API: POST /api/auth/logout (Authorization: Bearer token)\n    API-&gt;&gt;API: Extract token from header\n    API-&gt;&gt;Redis: Invalidate session\n    Redis--&gt;&gt;API: Session invalidated\n    API-&gt;&gt;API: Add token to blacklist\n    API--&gt;&gt;Frontend: Logout success\n    Frontend-&gt;&gt;Frontend: Clear stored tokens\n    Frontend-&gt;&gt;Frontend: Clear user data\n    Frontend--&gt;&gt;Client: Redirect to login</code></pre>"},{"location":"api/authentication/#security-measures","title":"\ud83d\udee1\ufe0f Security Measures","text":""},{"location":"api/authentication/#1-password-security","title":"1. Password Security","text":"<pre><code>type PasswordPolicy struct {\n    MinLength    int\n    RequireUpper bool\n    RequireLower bool\n    RequireDigit bool\n    RequireSymbol bool\n    MaxAge       time.Duration\n    History      int\n}\n\nfunc (p *PasswordPolicy) Validate(password string) error {\n    if len(password) &lt; p.MinLength {\n        return errors.New(\"password too short\")\n    }\n\n    if p.RequireUpper &amp;&amp; !hasUppercase(password) {\n        return errors.New(\"password must contain uppercase letter\")\n    }\n\n    // Additional validation...\n    return nil\n}\n</code></pre>"},{"location":"api/authentication/#2-token-security","title":"2. Token Security","text":""},{"location":"api/authentication/#jwt-configuration","title":"JWT Configuration","text":"<pre><code>type JWTConfig struct {\n    Secret              string\n    AccessTokenTTL      time.Duration\n    RefreshTokenTTL     time.Duration\n    Issuer             string\n    Audience           string\n    Algorithm          string\n    TokenBlacklist     bool\n    RotateRefreshToken bool\n}\n</code></pre>"},{"location":"api/authentication/#token-validation","title":"Token Validation","text":"<pre><code>func (j *JWTService) ValidateToken(tokenString string) (*Claims, error) {\n    // Check blacklist first\n    if j.isTokenBlacklisted(tokenString) {\n        return nil, errors.New(\"token is blacklisted\")\n    }\n\n    // Parse and validate JWT\n    token, err := jwt.ParseWithClaims(tokenString, &amp;Claims{}, func(token *jwt.Token) (interface{}, error) {\n        if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {\n            return nil, fmt.Errorf(\"unexpected signing method: %v\", token.Header[\"alg\"])\n        }\n        return []byte(j.config.Secret), nil\n    })\n\n    if err != nil {\n        return nil, err\n    }\n\n    if claims, ok := token.Claims.(*Claims); ok &amp;&amp; token.Valid {\n        return claims, nil\n    }\n\n    return nil, errors.New(\"invalid token\")\n}\n</code></pre>"},{"location":"api/authentication/#3-session-management","title":"3. Session Management","text":"<pre><code>type SessionManager struct {\n    redis      *redis.Client\n    expiration time.Duration\n}\n\nfunc (s *SessionManager) CreateSession(userID string, tokenData map[string]interface{}) error {\n    sessionKey := fmt.Sprintf(\"session:%s\", userID)\n    data, _ := json.Marshal(tokenData)\n\n    return s.redis.Set(context.Background(), sessionKey, data, s.expiration).Err()\n}\n\nfunc (s *SessionManager) ValidateSession(userID string) bool {\n    sessionKey := fmt.Sprintf(\"session:%s\", userID)\n    exists := s.redis.Exists(context.Background(), sessionKey).Val()\n    return exists &gt; 0\n}\n\nfunc (s *SessionManager) InvalidateSession(userID string) error {\n    sessionKey := fmt.Sprintf(\"session:%s\", userID)\n    return s.redis.Del(context.Background(), sessionKey).Err()\n}\n</code></pre>"},{"location":"api/authentication/#4-rate-limiting","title":"4. Rate Limiting","text":"<pre><code>type RateLimiter struct {\n    redis  *redis.Client\n    limits map[string]RateLimit\n}\n\ntype RateLimit struct {\n    Requests int\n    Window   time.Duration\n}\n\nfunc (r *RateLimiter) CheckLimit(endpoint, clientID string) error {\n    limit, exists := r.limits[endpoint]\n    if !exists {\n        return nil // No limit configured\n    }\n\n    key := fmt.Sprintf(\"rate_limit:%s:%s\", endpoint, clientID)\n    count := r.redis.Incr(context.Background(), key).Val()\n\n    if count == 1 {\n        r.redis.Expire(context.Background(), key, limit.Window)\n    }\n\n    if count &gt; int64(limit.Requests) {\n        return errors.New(\"rate limit exceeded\")\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"api/authentication/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"api/authentication/#environment-variables","title":"Environment Variables","text":"<pre><code># JWT Configuration\nJWT_SECRET=your-super-secret-jwt-key-here\nJWT_ACCESS_TOKEN_EXPIRATION=24h\nJWT_REFRESH_TOKEN_EXPIRATION=7d\n\n# Session Configuration\nSESSION_EXPIRATION=24h\nREDIS_URL=redis://localhost:6379\n\n# Security Configuration\nDISABLE_AUTH=false\nCORS_ALLOWED_ORIGINS=http://localhost:5175\nPASSWORD_MIN_LENGTH=8\nPASSWORD_REQUIRE_UPPERCASE=true\nPASSWORD_REQUIRE_LOWERCASE=true\nPASSWORD_REQUIRE_DIGITS=true\nPASSWORD_REQUIRE_SYMBOLS=true\n\n# Rate Limiting\nRATE_LIMIT_LOGIN_REQUESTS=10\nRATE_LIMIT_LOGIN_WINDOW=1m\nRATE_LIMIT_API_REQUESTS=100\nRATE_LIMIT_API_WINDOW=1m\n</code></pre>"},{"location":"api/authentication/#configuration-file","title":"Configuration File","text":"<pre><code>security:\n  jwt:\n    secret: \"${JWT_SECRET}\"\n    access_token_expiration: \"24h\"\n    refresh_token_expiration: \"7d\"\n    issuer: \"mvp-zero-trust-auth\"\n    audience: \"mvp-zero-trust-auth\"\n    algorithm: \"HS256\"\n\n  password:\n    min_length: 8\n    require_uppercase: true\n    require_lowercase: true\n    require_digits: true\n    require_symbols: false\n    max_age: \"90d\"\n    history: 5\n\n  session:\n    expiration: \"24h\"\n    rotate_refresh_tokens: true\n    blacklist_tokens: true\n\n  rate_limiting:\n    enabled: true\n    limits:\n      \"/api/auth/login\":\n        requests: 10\n        window: \"1m\"\n      \"/api/auth/register\":\n        requests: 5\n        window: \"1m\"\n      \"/api/*\":\n        requests: 100\n        window: \"1m\"\n</code></pre>"},{"location":"api/authentication/#testing-authentication","title":"\ud83e\uddea Testing Authentication","text":""},{"location":"api/authentication/#unit-tests","title":"Unit Tests","text":"<pre><code>func TestAuthHandler_Login(t *testing.T) {\n    tests := []struct {\n        name           string\n        request        LoginRequest\n        expectedStatus int\n        expectedUser   string\n    }{\n        {\n            name: \"successful_login\",\n            request: LoginRequest{\n                Username: \"admin\",\n                Password: \"password\",\n            },\n            expectedStatus: 200,\n            expectedUser:   \"admin\",\n        },\n        {\n            name: \"invalid_credentials\",\n            request: LoginRequest{\n                Username: \"admin\",\n                Password: \"wrongpassword\",\n            },\n            expectedStatus: 401,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            // Test implementation\n        })\n    }\n}\n</code></pre>"},{"location":"api/authentication/#integration-tests","title":"Integration Tests","text":"<pre><code># Test login flow\ncurl -X POST http://localhost:8080/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"admin\",\"password\":\"password\"}'\n\n# Test protected endpoint\nTOKEN=\"obtained_from_login\"\ncurl -X GET http://localhost:8080/api/auth/me \\\n  -H \"Authorization: Bearer $TOKEN\"\n\n# Test refresh token\nREFRESH_TOKEN=\"obtained_from_login\"\ncurl -X POST http://localhost:8080/api/auth/refresh \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"refresh_token\":\"'$REFRESH_TOKEN'\"}'\n\n# Test logout\ncurl -X POST http://localhost:8080/api/auth/logout \\\n  -H \"Authorization: Bearer $TOKEN\"\n</code></pre>"},{"location":"api/authentication/#e2e-tests","title":"E2E Tests","text":"<pre><code>// Frontend E2E test with Playwright\ntest('should complete full authentication flow', async ({ page }) =&gt; {\n  // Navigate to login page\n  await page.goto('/login');\n\n  // Fill login form\n  await page.fill('input[name=\"username\"]', 'admin');\n  await page.fill('input[name=\"password\"]', 'password');\n\n  // Submit login\n  await page.click('button[type=\"submit\"]');\n\n  // Verify redirect to dashboard\n  await page.waitForURL('/dashboard');\n\n  // Verify user menu is visible\n  await expect(page.locator('[data-testid=\"user-menu\"]')).toBeVisible();\n\n  // Test logout\n  await page.click('[data-testid=\"logout-button\"]');\n  await page.waitForURL('/login');\n});\n</code></pre>"},{"location":"api/authentication/#common-authentication-issues","title":"\ud83d\udea8 Common Authentication Issues","text":""},{"location":"api/authentication/#1-token-expiration","title":"1. Token Expiration","text":"<p>Symptom: 401 Unauthorized errors Solution: Implement automatic token refresh</p>"},{"location":"api/authentication/#2-cors-issues","title":"2. CORS Issues","text":"<p>Symptom: Browser blocks requests Solution: Configure CORS properly</p>"},{"location":"api/authentication/#3-session-conflicts","title":"3. Session Conflicts","text":"<p>Symptom: Inconsistent authentication state Solution: Implement proper session management</p>"},{"location":"api/authentication/#4-demo-token-in-production","title":"4. Demo Token in Production","text":"<p>Symptom: Security vulnerability Solution: Disable demo tokens in production</p> <pre><code>// Production safety check\nif os.Getenv(\"ENVIRONMENT\") == \"production\" &amp;&amp; isDemoToken(token) {\n    return errors.New(\"demo tokens not allowed in production\")\n}\n</code></pre>"},{"location":"api/authentication/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>JWT Best Practices</li> <li>OAuth 2.0 Security Best Practices</li> <li>Zero Trust Architecture</li> <li>SPIFFE/SPIRE Documentation</li> </ul>"},{"location":"api/devices/","title":"Device Management API","text":"<p>The Device Management API provides endpoints for device attestation, verification, and trust management in the Zero Trust architecture.</p>"},{"location":"api/devices/#overview","title":"\ud83c\udfaf Overview","text":"<p>Device attestation is a core component of Zero Trust security, ensuring that only trusted devices can access resources. The API provides:</p> <ul> <li>Device Registration: Register new devices with attestation data</li> <li>Trust Level Management: Calculate and update device trust scores</li> <li>Device Verification: Admin verification of device attestations</li> <li>Continuous Monitoring: Track device security posture over time</li> </ul>"},{"location":"api/devices/#device-attestation-flow","title":"\ud83d\udd12 Device Attestation Flow","text":"<pre><code>sequenceDiagram\n    participant Device\n    participant Client\n    participant API\n    participant SPIRE\n    participant Database\n\n    Device-&gt;&gt;Client: Collect attestation data\n    Client-&gt;&gt;API: POST /api/devices (attestation data)\n    API-&gt;&gt;API: Calculate initial trust level\n    API-&gt;&gt;Database: Store device attestation\n    Database--&gt;&gt;API: Device ID\n    API--&gt;&gt;Client: Device attestation response\n\n    Note over Client,API: Admin verification (optional)\n    Client-&gt;&gt;API: POST /api/devices/{id}/verify\n    API-&gt;&gt;API: Update trust level\n    API-&gt;&gt;Database: Update verification status\n    Database--&gt;&gt;API: Updated device\n    API--&gt;&gt;Client: Verification response\n\n    Note over Device,SPIRE: SPIFFE integration (future)\n    Device-&gt;&gt;SPIRE: Request workload identity\n    SPIRE--&gt;&gt;Device: X.509-SVID certificate\n    Device-&gt;&gt;API: API requests with certificate\n    API-&gt;&gt;SPIRE: Validate certificate\n    SPIRE--&gt;&gt;API: Certificate valid</code></pre>"},{"location":"api/devices/#device-attestation-data","title":"\ud83d\udcf1 Device Attestation Data","text":""},{"location":"api/devices/#platform-specific-data","title":"Platform-Specific Data","text":""},{"location":"api/devices/#macos-device","title":"macOS Device","text":"<pre><code>{\n  \"device_id\": \"macbook-pro-2023\",\n  \"device_name\": \"MacBook Pro 16-inch\",\n  \"platform\": \"macOS\",\n  \"attestation_data\": {\n    \"secure_enclave\": \"enabled\",\n    \"system_integrity_protection\": \"enabled\",\n    \"gatekeeper\": \"enabled\",\n    \"filevault\": \"enabled\",\n    \"firewall\": \"enabled\",\n    \"biometric\": \"touch_id\",\n    \"os_version\": \"14.2.1\",\n    \"hardware_model\": \"MacBookPro18,2\",\n    \"serial_number\": \"C02ABC123DEF\"\n  }\n}\n</code></pre>"},{"location":"api/devices/#windows-device","title":"Windows Device","text":"<pre><code>{\n  \"device_id\": \"windows-laptop-001\",\n  \"device_name\": \"Surface Laptop Studio\",\n  \"platform\": \"Windows 11\",\n  \"attestation_data\": {\n    \"tpm\": \"enabled\",\n    \"secure_boot\": \"enabled\",\n    \"windows_defender\": \"enabled\",\n    \"bitlocker\": \"enabled\",\n    \"credential_guard\": \"enabled\",\n    \"biometric\": \"windows_hello\",\n    \"os_version\": \"22H2\",\n    \"hardware_model\": \"Surface Laptop Studio\",\n    \"device_encryption\": \"enabled\"\n  }\n}\n</code></pre>"},{"location":"api/devices/#ios-device","title":"iOS Device","text":"<pre><code>{\n  \"device_id\": \"iphone-14-pro\",\n  \"device_name\": \"iPhone 14 Pro\",\n  \"platform\": \"iOS\",\n  \"attestation_data\": {\n    \"secure_enclave\": \"enabled\",\n    \"biometric\": \"face_id\",\n    \"jailbreak_detection\": \"passed\",\n    \"app_transport_security\": \"enabled\",\n    \"ios_version\": \"17.2.1\",\n    \"device_model\": \"iPhone15,2\",\n    \"passcode_enabled\": true,\n    \"find_my_enabled\": true\n  }\n}\n</code></pre>"},{"location":"api/devices/#android-device","title":"Android Device","text":"<pre><code>{\n  \"device_id\": \"pixel-7-pro\",\n  \"device_name\": \"Google Pixel 7 Pro\",\n  \"platform\": \"Android\",\n  \"attestation_data\": {\n    \"hardware_security_module\": \"enabled\",\n    \"verified_boot\": \"green\",\n    \"biometric\": \"fingerprint\",\n    \"root_detection\": \"passed\",\n    \"safetynet_attestation\": \"passed\",\n    \"android_version\": \"14\",\n    \"security_patch_level\": \"2024-01-05\",\n    \"device_encryption\": \"enabled\"\n  }\n}\n</code></pre>"},{"location":"api/devices/#linux-device","title":"Linux Device","text":"<pre><code>{\n  \"device_id\": \"ubuntu-workstation\",\n  \"device_name\": \"Ubuntu Workstation\",\n  \"platform\": \"Linux\",\n  \"attestation_data\": {\n    \"tpm\": \"enabled\",\n    \"secure_boot\": \"enabled\",\n    \"full_disk_encryption\": \"enabled\",\n    \"kernel_version\": \"6.5.0-14-generic\",\n    \"distribution\": \"Ubuntu 22.04.3 LTS\",\n    \"selinux_enforcing\": false,\n    \"apparmor_enabled\": true,\n    \"firewall\": \"ufw_enabled\"\n  }\n}\n</code></pre>"},{"location":"api/devices/#trust-level-calculation","title":"\ud83c\udfaf Trust Level Calculation","text":"<p>The system calculates device trust levels based on multiple factors:</p>"},{"location":"api/devices/#base-trust-levels","title":"Base Trust Levels","text":"<pre><code>const (\n    MinimumTrustLevel = 0\n    LowTrustLevel     = 25\n    MediumTrustLevel  = 50\n    HighTrustLevel    = 75\n    MaxTrustLevel     = 100\n)\n</code></pre>"},{"location":"api/devices/#trust-calculation-algorithm","title":"Trust Calculation Algorithm","text":"<pre><code>func calculateTrustLevel(platform string, attestationData map[string]interface{}) int {\n    baseTrust := 30 // Starting baseline\n\n    // Platform-based trust adjustments\n    platformTrust := map[string]int{\n        \"macOS\":       20,\n        \"Windows 11\":  20,\n        \"Linux\":       20,\n        \"iOS\":         15,\n        \"Android\":     15,\n        \"Windows 10\":  10,\n    }\n\n    if trust, exists := platformTrust[platform]; exists {\n        baseTrust += trust\n    }\n\n    // Security feature adjustments\n    securityFeatures := map[string]int{\n        \"tpm\":                    20,\n        \"secure_enclave\":         20,\n        \"secure_boot\":           10,\n        \"biometric\":             15,\n        \"hardware_security_module\": 20,\n        \"verified_boot\":         15,\n        \"full_disk_encryption\":  10,\n        \"device_encryption\":     10,\n        \"bitlocker\":            10,\n        \"filevault\":            10,\n    }\n\n    for feature, value := range securityFeatures {\n        if enabled, ok := attestationData[feature]; ok {\n            switch v := enabled.(type) {\n            case bool:\n                if v {\n                    baseTrust += value\n                }\n            case string:\n                if v == \"enabled\" || v == \"green\" || v == \"passed\" {\n                    baseTrust += value\n                }\n            }\n        }\n    }\n\n    // Security risks (negative adjustments)\n    risks := map[string]int{\n        \"jailbreak_detection\": -50, // if failed\n        \"root_detection\":      -50, // if failed\n        \"safetynet_attestation\": -30, // if failed\n    }\n\n    for risk, penalty := range risks {\n        if status, ok := attestationData[risk]; ok {\n            if status == \"failed\" || status == false {\n                baseTrust += penalty\n            }\n        }\n    }\n\n    // Ensure trust level is within bounds\n    if baseTrust &lt; MinimumTrustLevel {\n        baseTrust = MinimumTrustLevel\n    }\n    if baseTrust &gt; MaxTrustLevel {\n        baseTrust = MaxTrustLevel\n    }\n\n    return baseTrust\n}\n</code></pre>"},{"location":"api/devices/#trust-level-categories","title":"Trust Level Categories","text":"Trust Level Range Description Access Level Critical 0-24 Compromised or untrusted device Blocked Low 25-49 Basic security features Limited access Medium 50-74 Good security posture Standard access High 75-89 Strong security features Extended access Maximum 90-100 Verified enterprise device Full access"},{"location":"api/devices/#security-policies","title":"\ud83d\udee1\ufe0f Security Policies","text":""},{"location":"api/devices/#access-control-based-on-trust-level","title":"Access Control Based on Trust Level","text":"<pre><code>type AccessPolicy struct {\n    MinTrustLevel int\n    MaxTrustLevel int\n    AllowedActions []string\n    RequiredFeatures []string\n}\n\nvar DeviceAccessPolicies = map[string]AccessPolicy{\n    \"read_basic\": {\n        MinTrustLevel: 25,\n        AllowedActions: []string{\"read\", \"list\"},\n    },\n    \"read_sensitive\": {\n        MinTrustLevel: 50,\n        AllowedActions: []string{\"read\", \"list\"},\n        RequiredFeatures: []string{\"biometric\", \"encryption\"},\n    },\n    \"write_operations\": {\n        MinTrustLevel: 60,\n        AllowedActions: []string{\"read\", \"write\", \"update\"},\n        RequiredFeatures: []string{\"biometric\", \"encryption\"},\n    },\n    \"admin_operations\": {\n        MinTrustLevel: 80,\n        AllowedActions: []string{\"read\", \"write\", \"update\", \"delete\", \"admin\"},\n        RequiredFeatures: []string{\"biometric\", \"encryption\", \"tpm\"},\n    },\n    \"critical_operations\": {\n        MinTrustLevel: 90,\n        AllowedActions: []string{\"*\"},\n        RequiredFeatures: []string{\"biometric\", \"encryption\", \"tpm\", \"verified\"},\n    },\n}\n</code></pre>"},{"location":"api/devices/#conditional-access-examples","title":"Conditional Access Examples","text":"<pre><code>func (h *DeviceHandler) checkDeviceAccess(userID, deviceID, action string) error {\n    device, err := h.getDeviceByID(deviceID)\n    if err != nil {\n        return err\n    }\n\n    // Check if device belongs to user\n    if device.UserID != userID {\n        return errors.New(\"device not owned by user\")\n    }\n\n    // Get required policy for action\n    policy, exists := DeviceAccessPolicies[action]\n    if !exists {\n        return errors.New(\"unknown action\")\n    }\n\n    // Check trust level\n    if device.TrustLevel &lt; policy.MinTrustLevel {\n        return fmt.Errorf(\"device trust level %d below required %d\", \n            device.TrustLevel, policy.MinTrustLevel)\n    }\n\n    // Check required features\n    for _, feature := range policy.RequiredFeatures {\n        if !device.HasFeature(feature) {\n            return fmt.Errorf(\"device missing required feature: %s\", feature)\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"api/devices/#device-monitoring","title":"\ud83d\udcca Device Monitoring","text":""},{"location":"api/devices/#continuous-assessment","title":"Continuous Assessment","text":"<p>The system continuously monitors device security posture:</p> <pre><code>type DeviceHealthCheck struct {\n    DeviceID        string    `json:\"device_id\"`\n    LastChecked     time.Time `json:\"last_checked\"`\n    TrustLevel      int       `json:\"trust_level\"`\n    PreviousTrust   int       `json:\"previous_trust\"`\n    SecurityEvents  []SecurityEvent `json:\"security_events\"`\n    Recommendations []string  `json:\"recommendations\"`\n}\n\ntype SecurityEvent struct {\n    Type        string    `json:\"type\"`\n    Severity    string    `json:\"severity\"`\n    Description string    `json:\"description\"`\n    Timestamp   time.Time `json:\"timestamp\"`\n    Resolved    bool      `json:\"resolved\"`\n}\n</code></pre>"},{"location":"api/devices/#automated-trust-updates","title":"Automated Trust Updates","text":"<pre><code>func (s *DeviceService) PerformHealthCheck(deviceID string) (*DeviceHealthCheck, error) {\n    device, err := s.getDevice(deviceID)\n    if err != nil {\n        return nil, err\n    }\n\n    // Collect current attestation data\n    currentData, err := s.collectAttestationData(deviceID)\n    if err != nil {\n        return nil, err\n    }\n\n    // Recalculate trust level\n    newTrustLevel := s.calculateTrustLevel(device.Platform, currentData)\n\n    // Check for security events\n    events := s.detectSecurityEvents(device, currentData)\n\n    // Generate recommendations\n    recommendations := s.generateRecommendations(device, currentData)\n\n    healthCheck := &amp;DeviceHealthCheck{\n        DeviceID:        deviceID,\n        LastChecked:     time.Now(),\n        TrustLevel:      newTrustLevel,\n        PreviousTrust:   device.TrustLevel,\n        SecurityEvents:  events,\n        Recommendations: recommendations,\n    }\n\n    // Update device trust level if changed\n    if newTrustLevel != device.TrustLevel {\n        err = s.updateDeviceTrustLevel(deviceID, newTrustLevel)\n        if err != nil {\n            return nil, err\n        }\n    }\n\n    return healthCheck, nil\n}\n</code></pre>"},{"location":"api/devices/#device-lifecycle-management","title":"\ud83d\udd04 Device Lifecycle Management","text":""},{"location":"api/devices/#device-registration-process","title":"Device Registration Process","text":"<ol> <li>Initial Attestation: Device provides security posture data</li> <li>Trust Calculation: System calculates initial trust level</li> <li>Admin Review: Optional manual verification</li> <li>Continuous Monitoring: Ongoing security assessment</li> <li>Trust Updates: Automatic trust level adjustments</li> <li>Retirement: Device decommissioning process</li> </ol>"},{"location":"api/devices/#device-states","title":"Device States","text":"<pre><code>type DeviceState string\n\nconst (\n    DeviceStatePending    DeviceState = \"pending\"    // Awaiting verification\n    DeviceStateActive     DeviceState = \"active\"     // Verified and trusted\n    DeviceStateSuspended  DeviceState = \"suspended\"  // Temporarily blocked\n    DeviceStateQuarantine DeviceState = \"quarantine\" // Security issue detected\n    DeviceStateRetired    DeviceState = \"retired\"    // Decommissioned\n)\n</code></pre>"},{"location":"api/devices/#state-transitions","title":"State Transitions","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Pending: Device Registration\n    Pending --&gt; Active: Admin Verification\n    Pending --&gt; Suspended: Failed Verification\n    Active --&gt; Suspended: Trust Level Drop\n    Active --&gt; Quarantine: Security Event\n    Suspended --&gt; Active: Re-verification\n    Quarantine --&gt; Active: Issue Resolved\n    Quarantine --&gt; Retired: Permanent Ban\n    Active --&gt; Retired: Decommission\n    Suspended --&gt; Retired: Decommission</code></pre>"},{"location":"api/devices/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"api/devices/#device-policy-configuration","title":"Device Policy Configuration","text":"<pre><code>device_security:\n  trust_levels:\n    minimum_for_access: 25\n    minimum_for_sensitive: 50\n    minimum_for_admin: 80\n    verification_required_above: 90\n\n  required_features:\n    basic_access:\n      - encryption\n    sensitive_access:\n      - encryption\n      - biometric\n    admin_access:\n      - encryption\n      - biometric\n      - tpm\n\n  monitoring:\n    health_check_interval: \"24h\"\n    trust_level_threshold_change: 10\n    automatic_quarantine_threshold: 20\n\n  platform_support:\n    - macOS\n    - Windows 11\n    - Linux\n    - iOS\n    - Android\n\n  blocked_platforms:\n    - Windows 7\n    - Windows 8\n</code></pre>"},{"location":"api/devices/#environment-variables","title":"Environment Variables","text":"<pre><code># Device Security Configuration\nDEVICE_MIN_TRUST_LEVEL=25\nDEVICE_ADMIN_VERIFICATION_REQUIRED=true\nDEVICE_HEALTH_CHECK_INTERVAL=24h\nDEVICE_AUTO_QUARANTINE_THRESHOLD=20\n\n# SPIRE Integration\nSPIRE_SOCKET_PATH=/tmp/spire-agent/public/api.sock\nSPIRE_TRUST_DOMAIN=mvp.local\nSPIFFE_ID_PREFIX=spiffe://mvp.local/device/\n\n# Platform Configuration\nSUPPORTED_PLATFORMS=macOS,Windows 11,Linux,iOS,Android\nBLOCKED_PLATFORMS=Windows 7,Windows 8,Windows XP\n</code></pre>"},{"location":"api/devices/#testing-device-management","title":"\ud83e\uddea Testing Device Management","text":""},{"location":"api/devices/#unit-tests","title":"Unit Tests","text":"<pre><code>func TestTrustLevelCalculation(t *testing.T) {\n    tests := []struct {\n        name           string\n        platform       string\n        attestationData map[string]interface{}\n        expectedTrust   int\n    }{\n        {\n            name:     \"macOS with strong security\",\n            platform: \"macOS\",\n            attestationData: map[string]interface{}{\n                \"secure_enclave\": \"enabled\",\n                \"biometric\":     \"touch_id\",\n                \"filevault\":     \"enabled\",\n            },\n            expectedTrust: 85,\n        },\n        {\n            name:     \"compromised Android device\",\n            platform: \"Android\",\n            attestationData: map[string]interface{}{\n                \"root_detection\": \"failed\",\n                \"safetynet_attestation\": \"failed\",\n            },\n            expectedTrust: 0,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            trust := calculateTrustLevel(tt.platform, tt.attestationData)\n            assert.Equal(t, tt.expectedTrust, trust)\n        })\n    }\n}\n</code></pre>"},{"location":"api/devices/#integration-tests","title":"Integration Tests","text":"<pre><code># Register a new device\ncurl -X POST http://localhost:8080/api/devices \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"device_id\": \"test-device-001\",\n    \"device_name\": \"Test MacBook\",\n    \"platform\": \"macOS\",\n    \"attestation_data\": {\n      \"secure_enclave\": \"enabled\",\n      \"biometric\": \"touch_id\",\n      \"filevault\": \"enabled\"\n    }\n  }'\n\n# Verify device (admin required)\nDEVICE_ID=\"1\"\ncurl -X POST http://localhost:8080/api/devices/$DEVICE_ID/verify \\\n  -H \"Authorization: Bearer $ADMIN_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"trust_level\": 95}'\n\n# Get device details\ncurl -X GET http://localhost:8080/api/devices/$DEVICE_ID \\\n  -H \"Authorization: Bearer $TOKEN\"\n\n# Update device attestation\ncurl -X PUT http://localhost:8080/api/devices/$DEVICE_ID \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"device_name\": \"Updated Device Name\",\n    \"attestation_data\": {\n      \"secure_enclave\": \"enabled\",\n      \"biometric\": \"face_id\",\n      \"filevault\": \"enabled\"\n    }\n  }'\n</code></pre>"},{"location":"api/devices/#e2e-device-management","title":"E2E Device Management","text":"<pre><code>// Playwright E2E test for device management\ntest('device management flow', async ({ page }) =&gt; {\n  // Login as admin\n  await page.goto('/login');\n  await page.fill('input[name=\"username\"]', 'admin');\n  await page.fill('input[name=\"password\"]', 'password');\n  await page.click('button[type=\"submit\"]');\n\n  // Navigate to devices page\n  await page.click('nav a[href=\"/devices\"]');\n\n  // Add new device\n  await page.click('button:has-text(\"Add Device\")');\n  await page.fill('input[name=\"device_name\"]', 'Test Device');\n  await page.fill('input[name=\"device_id\"]', 'test-device-001');\n  await page.selectOption('select[name=\"platform\"]', 'macOS');\n  await page.click('button[type=\"submit\"]');\n\n  // Verify device appears in list\n  await expect(page.locator('text=Test Device')).toBeVisible();\n\n  // Verify device\n  await page.click('button:has-text(\"Verify\")');\n  await page.fill('input[name=\"trust_level\"]', '90');\n  await page.click('button:has-text(\"Confirm\")');\n\n  // Check verification status\n  await expect(page.locator('text=Verified')).toBeVisible();\n});\n</code></pre>"},{"location":"api/devices/#common-issues","title":"\ud83d\udea8 Common Issues","text":""},{"location":"api/devices/#1-low-trust-levels","title":"1. Low Trust Levels","text":"<p>Cause: Missing security features Solution: Enable device security features</p>"},{"location":"api/devices/#2-failed-device-verification","title":"2. Failed Device Verification","text":"<p>Cause: Insufficient attestation data Solution: Provide complete attestation information</p>"},{"location":"api/devices/#3-access-denied","title":"3. Access Denied","text":"<p>Cause: Trust level below policy requirement Solution: Improve device security posture or verify device</p>"},{"location":"api/devices/#4-spiffe-integration-issues","title":"4. SPIFFE Integration Issues","text":"<p>Cause: SPIRE agent not running Solution: Ensure SPIRE infrastructure is properly configured</p>"},{"location":"api/devices/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>SPIFFE/SPIRE Documentation</li> <li>Zero Trust Device Security</li> <li>Security Monitoring</li> <li>API Reference</li> </ul>"},{"location":"architecture/istio-service-mesh/","title":"Istio Service Mesh Architecture","text":"<p>This document describes the Istio service mesh implementation for the MVP Zero Trust Auth system, providing secure service-to-service communication, traffic management, and comprehensive observability.</p>"},{"location":"architecture/istio-service-mesh/#overview","title":"Overview","text":"<p>The Istio service mesh provides a dedicated infrastructure layer for managing service-to-service communication, implementing zero trust security principles, and enabling advanced traffic management capabilities.</p>"},{"location":"architecture/istio-service-mesh/#key-features","title":"Key Features","text":"<ul> <li>Zero Trust Security - mTLS encryption for all service communication</li> <li>Traffic Management - Advanced routing, load balancing, and fault injection</li> <li>Observability - Distributed tracing, metrics collection, and access logging</li> <li>Service Discovery - Integration with Kubernetes and Consul service registries</li> <li>Policy Enforcement - Fine-grained authorization and rate limiting</li> </ul>"},{"location":"architecture/istio-service-mesh/#architecture-components","title":"Architecture Components","text":""},{"location":"architecture/istio-service-mesh/#control-plane-istiod","title":"Control Plane (Istiod)","text":"<p>Configuration: - Replicas: 2 (High Availability) - Resources: 100m CPU / 128Mi Memory (requests), 500m CPU / 512Mi Memory (limits) - Auto-scaling: HPA with 2-5 replicas based on CPU utilization</p> <p>Features: - Service discovery integration - Certificate management via SPIRE - Configuration distribution - Workload registration</p>"},{"location":"architecture/istio-service-mesh/#data-plane-envoy-sidecars","title":"Data Plane (Envoy Sidecars)","text":"<p>Sidecar Configuration: - Automatic injection enabled for <code>zamaz</code> namespace - Resource allocation: 10m CPU / 40Mi Memory (requests), 100m CPU / 128Mi Memory (limits) - Hold application start until proxy is ready - Custom logging level: Warning (production) / Debug (development)</p>"},{"location":"architecture/istio-service-mesh/#gateways","title":"Gateways","text":""},{"location":"architecture/istio-service-mesh/#ingress-gateway","title":"Ingress Gateway","text":"<ul> <li>External traffic entry point for web applications</li> <li>TLS termination with automatic certificate management</li> <li>Load balancing across multiple replicas (2-5 instances)</li> <li>Multi-protocol support: HTTP/HTTPS/TLS passthrough</li> </ul>"},{"location":"architecture/istio-service-mesh/#egress-gateway","title":"Egress Gateway","text":"<ul> <li>Controlled external service access</li> <li>Security policy enforcement for outbound traffic</li> <li>External service registration and monitoring</li> </ul>"},{"location":"architecture/istio-service-mesh/#security-implementation","title":"Security Implementation","text":""},{"location":"architecture/istio-service-mesh/#mutual-tls-mtls","title":"Mutual TLS (mTLS)","text":"<p>Configuration: <pre><code># Strict mTLS for all mesh traffic\nspec:\n  mtls:\n    mode: STRICT\n</code></pre></p> <p>Features: - Automatic certificate rotation via SPIRE integration - Trust domain: <code>zamaz.cluster.local</code> - Certificate lifetime: 1 hour with automatic renewal - Cross-cluster communication support</p>"},{"location":"architecture/istio-service-mesh/#authorization-policies","title":"Authorization Policies","text":"<p>Zero Trust Model: 1. Deny-all default policy - No traffic allowed by default 2. Explicit allow policies - Granular permissions for specific routes 3. Role-based access control - JWT claims-based authorization 4. Service-to-service policies - Identity-based communication rules</p> <p>Policy Examples: <pre><code># Frontend to API communication\n- from:\n  - source:\n      principals: [\"cluster.local/ns/zamaz/sa/zamaz-frontend-sa\"]\n  to:\n  - operation:\n      methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"]\n      paths: [\"/api/*\"]\n</code></pre></p>"},{"location":"architecture/istio-service-mesh/#request-authentication","title":"Request Authentication","text":"<p>JWT Validation: - Issuer: <code>https://auth.zamaz.cluster.local</code> - JWKS endpoint: Automatic key rotation support - Claims mapping: Role-based authorization - Multiple providers: Development and production issuers</p>"},{"location":"architecture/istio-service-mesh/#traffic-management","title":"Traffic Management","text":""},{"location":"architecture/istio-service-mesh/#virtual-services","title":"Virtual Services","text":"<p>Frontend Routing: - Health checks: Direct routing with no retries - Static assets: Long-term caching headers - API routes: Retry policies and timeout configuration - Canary deployments: Header and percentage-based routing</p> <p>API Routing: - Authentication endpoints: No retry to prevent lockouts - Admin APIs: Extended timeouts and rate limiting - User APIs: Standard retry and circuit breaker policies</p>"},{"location":"architecture/istio-service-mesh/#destination-rules","title":"Destination Rules","text":"<p>Load Balancing: - API services: <code>LEAST_CONN</code> for optimal distribution - Frontend services: <code>ROUND_ROBIN</code> for simplicity - External services: Custom connection pooling</p> <p>Circuit Breaker Configuration: <pre><code>outlierDetection:\n  consecutiveGatewayErrors: 5\n  consecutive5xxErrors: 5\n  interval: 30s\n  baseEjectionTime: 30s\n  maxEjectionPercent: 50\n</code></pre></p> <p>Connection Pooling: - TCP connections: Max 100 per service - HTTP requests: Max 50 pending, 100 concurrent - Keep-alive: 7200s with 75s intervals</p>"},{"location":"architecture/istio-service-mesh/#service-entries","title":"Service Entries","text":"<p>External Service Integration: - Database services: PostgreSQL and Redis external endpoints - API dependencies: GitHub, Docker Registry, Google APIs - Observability: Jaeger, Prometheus external services - Infrastructure: DNS, NTP, Certificate authorities</p>"},{"location":"architecture/istio-service-mesh/#observability","title":"Observability","text":""},{"location":"architecture/istio-service-mesh/#distributed-tracing","title":"Distributed Tracing","text":"<p>Jaeger Integration: - Sampling rate: 1% (production), 10% (development) - Custom tags: User ID, tenant ID, correlation ID - Span enrichment: Request/response headers and metadata - Performance tracking: End-to-end request flow</p>"},{"location":"architecture/istio-service-mesh/#metrics-collection","title":"Metrics Collection","text":"<p>Prometheus Metrics: - Request metrics: Rate, latency, error rate - Service metrics: Connection pools, circuit breaker status - Business metrics: Authentication events, user actions - Custom labels: Source/destination apps, API versions</p> <p>Key Metrics: <pre><code>istio_requests_total{source_app=\"frontend\",destination_app=\"api\"}\nistio_request_duration_milliseconds_bucket{percentile=\"p99\"}\nistio_tcp_connections_opened_total\n</code></pre></p>"},{"location":"architecture/istio-service-mesh/#access-logging","title":"Access Logging","text":"<p>Structured JSON Format: <pre><code>{\n  \"timestamp\": \"%START_TIME%\",\n  \"method\": \"%REQ(:METHOD)%\",\n  \"path\": \"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\n  \"response_code\": \"%RESPONSE_CODE%\",\n  \"duration\": \"%DURATION%\",\n  \"user_id\": \"%REQ(X-USER-ID)%\",\n  \"correlation_id\": \"%REQ(X-CORRELATION-ID)%\"\n}\n</code></pre></p>"},{"location":"architecture/istio-service-mesh/#advanced-features","title":"Advanced Features","text":""},{"location":"architecture/istio-service-mesh/#envoyfilters","title":"EnvoyFilters","text":"<p>Security Headers: - <code>X-Content-Type-Options: nosniff</code> - <code>X-Frame-Options: DENY</code> - <code>Strict-Transport-Security: max-age=31536000</code> - <code>X-XSS-Protection: 1; mode=block</code></p> <p>Rate Limiting: - Local rate limiting: 100 requests per minute per IP - Token bucket algorithm: Burst capability with sustained rate - Custom headers: Rate limit status in responses</p> <p>CORS Configuration: - Allowed origins: Production and development domains - Methods: GET, POST, PUT, DELETE, OPTIONS - Headers: Authentication and custom business headers - Credentials: Supported for authenticated requests</p>"},{"location":"architecture/istio-service-mesh/#custom-telemetry","title":"Custom Telemetry","text":"<p>Business Metrics: - Authentication success/failure rates - API endpoint usage patterns - Error categorization: Client vs server errors - Performance buckets: Fast, medium, slow, very slow</p> <p>Custom Tags: <pre><code>endpoint_type:\n  value: |\n    has(request.url_path) &amp;&amp; (request.url_path | startsWith(\"/api/auth/\")) ? \"auth\" :\n    has(request.url_path) &amp;&amp; (request.url_path | startsWith(\"/api/admin/\")) ? \"admin\" :\n    \"user\"\n</code></pre></p>"},{"location":"architecture/istio-service-mesh/#deployment-patterns","title":"Deployment Patterns","text":""},{"location":"architecture/istio-service-mesh/#development-environment","title":"Development Environment","text":"<p>Configuration: - Higher sampling: 10% tracing for debugging - Permissive policies: Easier development workflow - Local certificates: Self-signed for testing - Debug logging: Detailed request/response logs</p> <p>Setup Commands: <pre><code># Install Istio with development profile\nmake istio-setup\n\n# Generate development certificates\n./scripts/istio-setup.sh certs\n\n# Access dashboards\nmake istio-dashboards\n</code></pre></p>"},{"location":"architecture/istio-service-mesh/#production-environment","title":"Production Environment","text":"<p>High Availability: - Multi-replica control plane: 3+ Istiod instances - Gateway redundancy: Multiple ingress/egress gateways - Cross-zone distribution: Topology spread constraints - Automatic failover: Health-based traffic routing</p> <p>Security Hardening: - Strict mTLS: No plaintext communication - Certificate rotation: 1-hour certificate lifetime - Policy enforcement: Deny-all default with explicit allows - Audit logging: Complete request audit trail</p>"},{"location":"architecture/istio-service-mesh/#canary-deployments","title":"Canary Deployments","text":"<p>Traffic Splitting: <pre><code># 95% stable, 5% canary\nroute:\n- destination:\n    host: zamaz-api-service\n    subset: stable\n  weight: 95\n- destination:\n    host: zamaz-api-service\n    subset: canary\n  weight: 5\n</code></pre></p> <p>Header-based Routing: <pre><code># Route based on canary header\nmatch:\n- headers:\n    canary:\n      exact: \"true\"\nroute:\n- destination:\n    host: zamaz-api-service\n    subset: canary\n</code></pre></p>"},{"location":"architecture/istio-service-mesh/#integration-with-external-systems","title":"Integration with External Systems","text":""},{"location":"architecture/istio-service-mesh/#spire-integration","title":"SPIRE Integration","text":"<p>Workload Identity: - SPIFFE IDs: Unique identity for each workload - X.509-SVID: Short-lived certificates (1 hour) - Automatic rotation: Seamless certificate renewal - Cross-cluster trust: Federated identity across environments</p>"},{"location":"architecture/istio-service-mesh/#consul-service-registry","title":"Consul Service Registry","text":"<p>Hybrid Discovery: - Kubernetes-native: Internal service discovery - Consul integration: External service registration - Multi-registry: Consul + Kubernetes dual discovery - Health check sync: Status propagation between systems</p>"},{"location":"architecture/istio-service-mesh/#monitoring-stack","title":"Monitoring Stack","text":"<p>Prometheus Integration: - Service discovery: Automatic endpoint discovery - Custom metrics: Business and technical metrics - Alerting rules: SLA/SLO monitoring - Dashboard integration: Grafana visualization</p> <p>Jaeger Tracing: - Distributed tracing: End-to-end request flow - Performance analysis: Latency breakdown - Dependency mapping: Service interaction visualization - Error tracking: Failure analysis and debugging</p>"},{"location":"architecture/istio-service-mesh/#operations-and-troubleshooting","title":"Operations and Troubleshooting","text":""},{"location":"architecture/istio-service-mesh/#common-commands","title":"Common Commands","text":"<pre><code># Check mesh status\nistioctl proxy-status\n\n# Validate configuration\nistioctl analyze --all-namespaces\n\n# View proxy configuration\nistioctl proxy-config cluster &lt;pod-name&gt;\n\n# Debug networking\nistioctl proxy-config listeners &lt;pod-name&gt;\n\n# Certificate verification\nistioctl proxy-config secret &lt;pod-name&gt;\n</code></pre>"},{"location":"architecture/istio-service-mesh/#performance-tuning","title":"Performance Tuning","text":"<p>Resource Optimization: - Sidecar resources: Right-sizing based on traffic - Control plane scaling: CPU/memory optimization - Connection pooling: Service-specific limits - Circuit breaker tuning: Failure threshold adjustment</p> <p>Traffic Optimization: - Keep-alive settings: Persistent connection reuse - Compression: Response compression for large payloads - Caching headers: Static asset optimization - Retry policies: Intelligent failure handling</p>"},{"location":"architecture/istio-service-mesh/#troubleshooting-guide","title":"Troubleshooting Guide","text":"<p>Common Issues:</p> <ol> <li>mTLS Configuration:</li> <li>Verify PeerAuthentication policies</li> <li>Check certificate validity</li> <li> <p>Validate trust domain configuration</p> </li> <li> <p>Traffic Routing:</p> </li> <li>Analyze VirtualService rules</li> <li>Check DestinationRule subsets</li> <li> <p>Verify service label selectors</p> </li> <li> <p>Authorization Failures:</p> </li> <li>Review AuthorizationPolicy rules</li> <li>Check JWT token validity</li> <li> <p>Validate service account permissions</p> </li> <li> <p>Performance Issues:</p> </li> <li>Monitor connection pool metrics</li> <li>Check circuit breaker status</li> <li>Analyze request latency patterns</li> </ol> <p>This Istio service mesh implementation provides a comprehensive, secure, and observable platform for the MVP Zero Trust Auth system, enabling advanced traffic management while maintaining strong security posture and operational visibility.</p>"},{"location":"architecture/observability/","title":"Observability","text":"<p>This document is a placeholder for Observability. Information regarding the observability setup (logging, monitoring, tracing) will be added here.</p> <p>This file was auto-generated as part of a documentation update initiative.</p>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>This document is a placeholder for Architecture Overview. Information regarding the system architecture will be added here.</p> <p>This file was auto-generated as part of a documentation update initiative.</p>"},{"location":"architecture/security-diagrams/","title":"Security Diagrams","text":"<p>This document is a placeholder for Security Diagrams. Information regarding security-related diagrams and visualisations will be added here.</p> <p>This file was auto-generated as part of a documentation update initiative.</p>"},{"location":"architecture/security/","title":"Security Architecture Guide","text":"<p>This document outlines the comprehensive security architecture of the Zero Trust Auth MVP, covering authentication mechanisms, authorization models, encryption, and security best practices.</p>"},{"location":"architecture/security/#zero-trust-security-model","title":"\ud83d\udd10 Zero Trust Security Model","text":""},{"location":"architecture/security/#core-principles","title":"Core Principles","text":"<p>The MVP implements a Zero Trust Architecture based on these fundamental principles:</p> <ol> <li>Never Trust, Always Verify: Every request is authenticated and authorized</li> <li>Least Privilege Access: Users and services get minimal required permissions</li> <li>Assume Breach: Design assumes the network is already compromised</li> <li>Verify Explicitly: Use all available data points for access decisions</li> <li>Continuous Monitoring: Real-time security monitoring and alerting</li> </ol>"},{"location":"architecture/security/#security-layers","title":"Security Layers","text":"<pre><code>graph TB\n    Internet[Internet] --&gt; WAF[Web Application Firewall]\n    WAF --&gt; LB[Load Balancer + TLS]\n    LB --&gt; Envoy[Envoy Proxy]\n    Envoy --&gt; AuthZ[Authorization Middleware]\n    AuthZ --&gt; App[Application Layer]\n\n    subgraph \"Security Controls\"\n        Identity[Identity Verification]\n        Device[Device Attestation]\n        Network[Network Segmentation]\n        Encryption[End-to-End Encryption]\n        Monitoring[Security Monitoring]\n    end\n\n    subgraph \"Trust Evaluation\"\n        Context[Context Analysis]\n        Risk[Risk Assessment]\n        Policy[Policy Engine]\n        Decision[Access Decision]\n    end</code></pre>"},{"location":"architecture/security/#authentication-architecture","title":"\ud83d\udd11 Authentication Architecture","text":""},{"location":"architecture/security/#multi-factor-authentication-flow","title":"Multi-Factor Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Frontend\n    participant AuthService\n    participant DeviceService\n    participant SPIRE\n    participant Database\n\n    User-&gt;&gt;Frontend: Login Request\n    Frontend-&gt;&gt;AuthService: Credentials + Device Info\n    AuthService-&gt;&gt;Database: Validate User Credentials\n    Database--&gt;&gt;AuthService: User Record\n    AuthService-&gt;&gt;DeviceService: Request Device Attestation\n    DeviceService-&gt;&gt;SPIRE: Verify Device Identity\n    SPIRE--&gt;&gt;DeviceService: Device Certificate\n    DeviceService--&gt;&gt;AuthService: Attestation Result\n    AuthService-&gt;&gt;AuthService: Calculate Trust Score\n    AuthService--&gt;&gt;Frontend: JWT Token + Trust Level\n    Frontend--&gt;&gt;User: Authentication Success</code></pre>"},{"location":"architecture/security/#authentication-methods","title":"Authentication Methods","text":""},{"location":"architecture/security/#1-primary-authentication","title":"1. Primary Authentication","text":"<ul> <li>Username/Password: PBKDF2 with salt for password hashing</li> <li>Multi-Factor Authentication: TOTP (Time-based One-Time Password)</li> <li>Biometric Authentication: WebAuthn for fingerprint/face recognition</li> <li>Certificate-based: X.509 client certificates for automated systems</li> </ul>"},{"location":"architecture/security/#2-device-authentication","title":"2. Device Authentication","text":"<ul> <li>Device Registration: Unique device fingerprinting</li> <li>Hardware Attestation: TPM-based device verification</li> <li>SPIFFE/SPIRE Integration: Workload identity verification</li> <li>Certificate Pinning: Public key pinning for mobile apps</li> </ul>"},{"location":"architecture/security/#3-continuous-authentication","title":"3. Continuous Authentication","text":"<ul> <li>Behavioral Analysis: User behavior pattern recognition</li> <li>Geolocation Verification: Location-based risk assessment</li> <li>Session Monitoring: Real-time session anomaly detection</li> <li>Adaptive Authentication: Dynamic authentication requirements</li> </ul>"},{"location":"architecture/security/#jwt-token-structure","title":"JWT Token Structure","text":"<pre><code>{\n  \"header\": {\n    \"alg\": \"HS256\",\n    \"typ\": \"JWT\",\n    \"kid\": \"key-id-2024\"\n  },\n  \"payload\": {\n    \"sub\": \"user-id\",\n    \"username\": \"admin\",\n    \"email\": \"admin@company.com\",\n    \"roles\": [\"admin\", \"user\"],\n    \"permissions\": [\"system:admin\", \"device:verify\", \"user:read\"],\n    \"device_id\": \"device-12345\",\n    \"trust_level\": \"high\",\n    \"session_id\": \"session-abcdef\",\n    \"iat\": 1640995200,\n    \"exp\": 1641081600,\n    \"iss\": \"mvp-zero-trust-auth\",\n    \"aud\": \"mvp-client-app\",\n    \"context\": {\n      \"ip_address\": \"192.168.1.100\",\n      \"user_agent\": \"Mozilla/5.0...\",\n      \"location\": \"US-CA-SF\",\n      \"risk_score\": 0.2\n    }\n  },\n  \"signature\": \"HMACSHA256(...)\"\n}\n</code></pre>"},{"location":"architecture/security/#token-management","title":"Token Management","text":""},{"location":"architecture/security/#access-tokens","title":"Access Tokens","text":"<ul> <li>Short-lived: 1 hour expiration for production</li> <li>Stateless: Self-contained with user context</li> <li>Scoped: Specific permissions and resources</li> <li>Revocable: Centralized revocation list</li> </ul>"},{"location":"architecture/security/#refresh-tokens","title":"Refresh Tokens","text":"<ul> <li>Long-lived: 24 hours expiration</li> <li>Rotating: New refresh token on each use</li> <li>Secure Storage: HttpOnly, Secure cookies</li> <li>Device-bound: Tied to specific device fingerprint</li> </ul>"},{"location":"architecture/security/#token-security","title":"Token Security","text":"<pre><code>// Token configuration\ntype JWTConfig struct {\n    Secret                string        `env:\"JWT_SECRET\"`\n    AccessTokenTTL        time.Duration `env:\"JWT_ACCESS_TOKEN_TTL\" default:\"1h\"`\n    RefreshTokenTTL       time.Duration `env:\"JWT_REFRESH_TOKEN_TTL\" default:\"24h\"`\n    Issuer                string        `env:\"JWT_ISSUER\" default:\"mvp-zero-trust-auth\"`\n    Audience              string        `env:\"JWT_AUDIENCE\" default:\"mvp-client\"`\n    Algorithm             string        `env:\"JWT_ALGORITHM\" default:\"HS256\"`\n    ClockSkewTolerance    time.Duration `env:\"JWT_CLOCK_SKEW\" default:\"30s\"`\n    RefreshTokenRotation  bool          `env:\"JWT_REFRESH_ROTATION\" default:\"true\"`\n    RevokedTokenCacheSize int           `env:\"JWT_REVOCATION_CACHE_SIZE\" default:\"10000\"`\n}\n</code></pre>"},{"location":"architecture/security/#authorization-model","title":"\ud83d\udee1\ufe0f Authorization Model","text":""},{"location":"architecture/security/#role-based-access-control-rbac","title":"Role-Based Access Control (RBAC)","text":""},{"location":"architecture/security/#role-hierarchy","title":"Role Hierarchy","text":"<pre><code>Super Admin\n\u251c\u2500\u2500 System Admin\n\u2502   \u251c\u2500\u2500 User Admin\n\u2502   \u2514\u2500\u2500 Device Admin\n\u251c\u2500\u2500 Security Officer\n\u2502   \u251c\u2500\u2500 Auditor\n\u2502   \u2514\u2500\u2500 Analyst\n\u2514\u2500\u2500 Regular User\n    \u251c\u2500\u2500 Device Owner\n    \u2514\u2500\u2500 Guest User\n</code></pre>"},{"location":"architecture/security/#permission-matrix","title":"Permission Matrix","text":"Resource Create Read Update Delete Verify Admin Users \u2713 SA \u2713 UA \u2713 UA \u2713 SA \u2713 SO \u2713 SA Devices \u2713 U \u2713 U \u2713 DO \u2713 DA \u2713 SO \u2713 DA Policies \u2717 \u2713 SO \u2717 \u2717 \u2717 \u2713 SA Audit \u2717 \u2713 A \u2717 \u2717 \u2717 \u2713 SO <p>Legend: SA=Super Admin, UA=User Admin, DA=Device Admin, SO=Security Officer, A=Auditor, U=User, DO=Device Owner</p>"},{"location":"architecture/security/#attribute-based-access-control-abac","title":"Attribute-Based Access Control (ABAC)","text":""},{"location":"architecture/security/#context-attributes","title":"Context Attributes","text":"<pre><code>{\n  \"subject\": {\n    \"user_id\": \"user-123\",\n    \"roles\": [\"admin\"],\n    \"clearance_level\": \"secret\",\n    \"department\": \"engineering\"\n  },\n  \"resource\": {\n    \"type\": \"device\",\n    \"classification\": \"confidential\",\n    \"owner\": \"user-456\",\n    \"location\": \"datacenter-1\"\n  },\n  \"environment\": {\n    \"time\": \"2024-01-15T14:30:00Z\",\n    \"location\": \"office-network\",\n    \"risk_level\": \"low\",\n    \"security_posture\": \"compliant\"\n  },\n  \"action\": {\n    \"operation\": \"read\",\n    \"method\": \"API\",\n    \"urgency\": \"normal\"\n  }\n}\n</code></pre>"},{"location":"architecture/security/#policy-examples","title":"Policy Examples","text":"<pre><code>{\n  \"policy_id\": \"device-access-policy\",\n  \"name\": \"Device Access Control\",\n  \"description\": \"Controls device access based on user role and device trust level\",\n  \"rules\": [\n    {\n      \"effect\": \"ALLOW\",\n      \"condition\": {\n        \"AND\": [\n          {\"subject.roles\": {\"contains\": \"admin\"}},\n          {\"resource.type\": {\"equals\": \"device\"}},\n          {\"environment.location\": {\"in\": [\"office-network\", \"vpn\"]}}\n        ]\n      }\n    },\n    {\n      \"effect\": \"DENY\",\n      \"condition\": {\n        \"OR\": [\n          {\"environment.risk_level\": {\"equals\": \"high\"}},\n          {\"resource.classification\": {\"equals\": \"top-secret\"}}\n        ]\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"architecture/security/#dynamic-authorization","title":"Dynamic Authorization","text":""},{"location":"architecture/security/#trust-score-calculation","title":"Trust Score Calculation","text":"<pre><code>type TrustCalculator struct {\n    DeviceScore      float64 `json:\"device_score\"`      // 0.0 - 1.0\n    LocationScore    float64 `json:\"location_score\"`    // 0.0 - 1.0\n    BehaviorScore    float64 `json:\"behavior_score\"`    // 0.0 - 1.0\n    TimeScore        float64 `json:\"time_score\"`        // 0.0 - 1.0\n    NetworkScore     float64 `json:\"network_score\"`     // 0.0 - 1.0\n}\n\nfunc (tc *TrustCalculator) CalculateOverallTrust() TrustLevel {\n    weights := map[string]float64{\n        \"device\":   0.3,\n        \"location\": 0.2,\n        \"behavior\": 0.25,\n        \"time\":     0.1,\n        \"network\":  0.15,\n    }\n\n    score := tc.DeviceScore*weights[\"device\"] +\n             tc.LocationScore*weights[\"location\"] +\n             tc.BehaviorScore*weights[\"behavior\"] +\n             tc.TimeScore*weights[\"time\"] +\n             tc.NetworkScore*weights[\"network\"]\n\n    switch {\n    case score &gt;= 0.8:\n        return TrustLevelHigh\n    case score &gt;= 0.6:\n        return TrustLevelMedium\n    case score &gt;= 0.4:\n        return TrustLevelLow\n    default:\n        return TrustLevelDeny\n    }\n}\n</code></pre>"},{"location":"architecture/security/#encryption-and-data-protection","title":"\ud83d\udd12 Encryption and Data Protection","text":""},{"location":"architecture/security/#encryption-at-rest","title":"Encryption at Rest","text":""},{"location":"architecture/security/#database-encryption","title":"Database Encryption","text":"<ul> <li>Field-level Encryption: PII and sensitive data encrypted</li> <li>Transparent Data Encryption: PostgreSQL encryption</li> <li>Key Management: Separate encryption keys per data type</li> <li>Key Rotation: Automated quarterly key rotation</li> </ul> <pre><code>type EncryptedField struct {\n    Value     string    `json:\"-\"`                    // Never serialized\n    Encrypted string    `json:\"encrypted\"`            // Base64 encoded\n    KeyID     string    `json:\"key_id\"`              // Key identifier\n    Algorithm string    `json:\"algorithm\"`            // Encryption algorithm\n    CreatedAt time.Time `json:\"created_at\"`          // Encryption timestamp\n}\n\nfunc (e *EncryptedField) Encrypt(plaintext string, keyID string) error {\n    key, err := e.keyManager.GetKey(keyID)\n    if err != nil {\n        return err\n    }\n\n    // Use AES-256-GCM for authenticated encryption\n    block, err := aes.NewCipher(key)\n    if err != nil {\n        return err\n    }\n\n    gcm, err := cipher.NewGCM(block)\n    if err != nil {\n        return err\n    }\n\n    nonce := make([]byte, gcm.NonceSize())\n    if _, err := rand.Read(nonce); err != nil {\n        return err\n    }\n\n    ciphertext := gcm.Seal(nonce, nonce, []byte(plaintext), nil)\n    e.Encrypted = base64.StdEncoding.EncodeToString(ciphertext)\n    e.KeyID = keyID\n    e.Algorithm = \"AES-256-GCM\"\n    e.CreatedAt = time.Now()\n\n    return nil\n}\n</code></pre>"},{"location":"architecture/security/#file-system-encryption","title":"File System Encryption","text":"<ul> <li>Volume Encryption: LUKS for Linux, FileVault for macOS</li> <li>Application Data: Encrypted application logs and temporary files</li> <li>Backup Encryption: All backups encrypted with separate keys</li> </ul>"},{"location":"architecture/security/#encryption-in-transit","title":"Encryption in Transit","text":""},{"location":"architecture/security/#tls-configuration","title":"TLS Configuration","text":"<pre><code># TLS security configuration\ntls:\n  version: \"1.3\"                    # Minimum TLS version\n  cipher_suites:\n    - \"TLS_AES_256_GCM_SHA384\"\n    - \"TLS_CHACHA20_POLY1305_SHA256\"\n    - \"TLS_AES_128_GCM_SHA256\"\n  curves:\n    - \"P-256\"\n    - \"P-384\"\n    - \"X25519\"\n  prefer_server_cipher_suites: true\n  session_timeout: \"24h\"\n  session_cache_size: 10000\n  hsts:\n    enabled: true\n    max_age: \"31536000\"\n    include_subdomains: true\n    preload: true\n</code></pre>"},{"location":"architecture/security/#certificate-management","title":"Certificate Management","text":"<ul> <li>Certificate Authority: Internal CA for service-to-service communication</li> <li>Certificate Pinning: Pin certificates in mobile applications</li> <li>Certificate Transparency: Monitor certificate issuance</li> <li>Automated Renewal: Automated certificate renewal with Let's Encrypt</li> </ul>"},{"location":"architecture/security/#key-management","title":"Key Management","text":""},{"location":"architecture/security/#key-hierarchy","title":"Key Hierarchy","text":"<pre><code>Root Key (HSM)\n\u251c\u2500\u2500 Domain Encryption Key\n\u2502   \u251c\u2500\u2500 Database Encryption Key\n\u2502   \u251c\u2500\u2500 Application Encryption Key\n\u2502   \u2514\u2500\u2500 Backup Encryption Key\n\u251c\u2500\u2500 JWT Signing Key\n\u2502   \u251c\u2500\u2500 Access Token Key\n\u2502   \u2514\u2500\u2500 Refresh Token Key\n\u2514\u2500\u2500 TLS Certificate Key\n    \u251c\u2500\u2500 Server Certificate\n    \u2514\u2500\u2500 Client Certificate\n</code></pre>"},{"location":"architecture/security/#key-rotation-policy","title":"Key Rotation Policy","text":"<pre><code>type KeyRotationPolicy struct {\n    KeyType        string        `json:\"key_type\"`\n    RotationPeriod time.Duration `json:\"rotation_period\"`\n    GracePeriod    time.Duration `json:\"grace_period\"`\n    MaxKeyAge      time.Duration `json:\"max_key_age\"`\n    NotifyBefore   time.Duration `json:\"notify_before\"`\n}\n\nvar DefaultKeyPolicies = map[string]KeyRotationPolicy{\n    \"jwt_signing\": {\n        KeyType:        \"jwt_signing\",\n        RotationPeriod: 90 * 24 * time.Hour,  // 90 days\n        GracePeriod:    7 * 24 * time.Hour,   // 7 days\n        MaxKeyAge:      180 * 24 * time.Hour, // 180 days\n        NotifyBefore:   14 * 24 * time.Hour,  // 14 days\n    },\n    \"database_encryption\": {\n        KeyType:        \"database_encryption\",\n        RotationPeriod: 365 * 24 * time.Hour, // 1 year\n        GracePeriod:    30 * 24 * time.Hour,  // 30 days\n        MaxKeyAge:      730 * 24 * time.Hour, // 2 years\n        NotifyBefore:   60 * 24 * time.Hour,  // 60 days\n    },\n}\n</code></pre>"},{"location":"architecture/security/#device-trust-and-attestation","title":"\ud83d\udee1\ufe0f Device Trust and Attestation","text":""},{"location":"architecture/security/#device-registration-process","title":"Device Registration Process","text":"<pre><code>sequenceDiagram\n    participant Device\n    participant App\n    participant DeviceService\n    participant SPIRE\n    participant TPM\n    participant CA\n\n    Device-&gt;&gt;App: Device Registration Request\n    App-&gt;&gt;TPM: Generate Key Pair\n    TPM--&gt;&gt;App: Public/Private Key\n    App-&gt;&gt;DeviceService: Registration Request + Public Key\n    DeviceService-&gt;&gt;DeviceService: Validate Device Info\n    DeviceService-&gt;&gt;SPIRE: Request SVID\n    SPIRE-&gt;&gt;CA: Sign Certificate\n    CA--&gt;&gt;SPIRE: Device Certificate\n    SPIRE--&gt;&gt;DeviceService: SVID + Certificate\n    DeviceService--&gt;&gt;App: Registration Success + Certificate\n    App--&gt;&gt;Device: Device Registered</code></pre>"},{"location":"architecture/security/#hardware-attestation","title":"Hardware Attestation","text":""},{"location":"architecture/security/#tpm-based-attestation","title":"TPM-based Attestation","text":"<pre><code>type AttestationRequest struct {\n    DeviceID        string    `json:\"device_id\"`\n    Platform        string    `json:\"platform\"`          // Windows, macOS, Linux, iOS, Android\n    TPMVersion      string    `json:\"tpm_version\"`        // TPM 2.0\n    PCRMeasurements []PCR     `json:\"pcr_measurements\"`   // Platform Configuration Registers\n    Quote           string    `json:\"quote\"`              // TPM Quote\n    Signature       string    `json:\"signature\"`          // Quote signature\n    Certificate     string    `json:\"certificate\"`        // AIK certificate\n    Timestamp       time.Time `json:\"timestamp\"`\n}\n\ntype PCR struct {\n    Index  int    `json:\"index\"`\n    Value  string `json:\"value\"`  // SHA-256 hash\n    Bank   string `json:\"bank\"`   // Hash algorithm\n}\n\nfunc (a *AttestationService) VerifyTPMAttestation(req *AttestationRequest) (*AttestationResult, error) {\n    // 1. Verify TPM quote signature\n    if err := a.verifyQuoteSignature(req.Quote, req.Signature, req.Certificate); err != nil {\n        return nil, fmt.Errorf(\"invalid quote signature: %w\", err)\n    }\n\n    // 2. Validate PCR measurements against known good values\n    if err := a.validatePCRMeasurements(req.PCRMeasurements); err != nil {\n        return nil, fmt.Errorf(\"invalid PCR measurements: %w\", err)\n    }\n\n    // 3. Check certificate chain\n    if err := a.validateCertificateChain(req.Certificate); err != nil {\n        return nil, fmt.Errorf(\"invalid certificate chain: %w\", err)\n    }\n\n    // 4. Calculate trust score\n    trustScore := a.calculateDeviceTrustScore(req)\n\n    return &amp;AttestationResult{\n        DeviceID:    req.DeviceID,\n        Verified:    true,\n        TrustScore:  trustScore,\n        ValidUntil:  time.Now().Add(24 * time.Hour),\n        Attestation: req,\n    }, nil\n}\n</code></pre>"},{"location":"architecture/security/#mobile-device-attestation","title":"Mobile Device Attestation","text":"<pre><code>// iOS DeviceCheck and Android SafetyNet integration\ntype MobileAttestationRequest struct {\n    DeviceID          string `json:\"device_id\"`\n    Platform          string `json:\"platform\"`           // ios, android\n    AttestationToken  string `json:\"attestation_token\"`   // Platform-specific token\n    AppBundleID       string `json:\"app_bundle_id\"`      // App identifier\n    AppVersion        string `json:\"app_version\"`        // App version\n    DeviceModel       string `json:\"device_model\"`       // Device model\n    OSVersion         string `json:\"os_version\"`         // OS version\n    JailbrokenRooted  bool   `json:\"jailbroken_rooted\"`  // Security status\n}\n</code></pre>"},{"location":"architecture/security/#trust-level-assessment","title":"Trust Level Assessment","text":""},{"location":"architecture/security/#device-trust-factors","title":"Device Trust Factors","text":"<pre><code>type DeviceTrustFactors struct {\n    // Hardware Security\n    TPMPresent        bool    `json:\"tpm_present\"`\n    SecureBootEnabled bool    `json:\"secure_boot_enabled\"`\n    HardwareIntegrity float64 `json:\"hardware_integrity\"`    // 0.0 - 1.0\n\n    // Software Security\n    OSVersion         string  `json:\"os_version\"`\n    SecurityPatches   bool    `json:\"security_patches\"`\n    AntivirusActive   bool    `json:\"antivirus_active\"`\n    SoftwareIntegrity float64 `json:\"software_integrity\"`    // 0.0 - 1.0\n\n    // Behavioral Factors\n    UsagePattern      string  `json:\"usage_pattern\"`         // normal, suspicious, unknown\n    LocationPattern   string  `json:\"location_pattern\"`      // consistent, variable, anomalous\n    AccessPattern     string  `json:\"access_pattern\"`        // regular, irregular, unusual\n\n    // Risk Factors\n    CompromiseHistory bool    `json:\"compromise_history\"`\n    PolicyCompliance  bool    `json:\"policy_compliance\"`\n    LastVerification  time.Time `json:\"last_verification\"`\n}\n</code></pre>"},{"location":"architecture/security/#security-monitoring-and-auditing","title":"\ud83d\udd0d Security Monitoring and Auditing","text":""},{"location":"architecture/security/#security-events","title":"Security Events","text":""},{"location":"architecture/security/#event-types","title":"Event Types","text":"<pre><code>type SecurityEventType string\n\nconst (\n    // Authentication Events\n    EventLoginSuccess        SecurityEventType = \"auth.login.success\"\n    EventLoginFailure        SecurityEventType = \"auth.login.failure\"\n    EventPasswordChange      SecurityEventType = \"auth.password.change\"\n    EventTokenRefresh        SecurityEventType = \"auth.token.refresh\"\n    EventLogout              SecurityEventType = \"auth.logout\"\n\n    // Authorization Events\n    EventAccessGranted       SecurityEventType = \"authz.access.granted\"\n    EventAccessDenied        SecurityEventType = \"authz.access.denied\"\n    EventPrivilegeEscalation SecurityEventType = \"authz.privilege.escalation\"\n    EventRoleChange          SecurityEventType = \"authz.role.change\"\n\n    // Device Events\n    EventDeviceRegistered    SecurityEventType = \"device.registered\"\n    EventDeviceAttested      SecurityEventType = \"device.attested\"\n    EventDeviceCompromised   SecurityEventType = \"device.compromised\"\n    EventDeviceRevoked       SecurityEventType = \"device.revoked\"\n\n    // Security Events\n    EventSuspiciousActivity  SecurityEventType = \"security.suspicious.activity\"\n    EventBruteForceAttempt   SecurityEventType = \"security.brute.force\"\n    EventAnomalousAccess     SecurityEventType = \"security.anomalous.access\"\n    EventSecurityPolicyViolation SecurityEventType = \"security.policy.violation\"\n)\n</code></pre>"},{"location":"architecture/security/#security-event-structure","title":"Security Event Structure","text":"<pre><code>type SecurityEvent struct {\n    ID          string                 `json:\"id\"`\n    Type        SecurityEventType      `json:\"type\"`\n    Timestamp   time.Time             `json:\"timestamp\"`\n    UserID      string                `json:\"user_id,omitempty\"`\n    DeviceID    string                `json:\"device_id,omitempty\"`\n    SessionID   string                `json:\"session_id,omitempty\"`\n    Resource    string                `json:\"resource,omitempty\"`\n    Action      string                `json:\"action,omitempty\"`\n    Result      string                `json:\"result\"`              // success, failure, denied\n    Severity    string                `json:\"severity\"`            // low, medium, high, critical\n    Source      EventSource           `json:\"source\"`\n    Details     map[string]interface{} `json:\"details\"`\n    Risk        RiskAssessment        `json:\"risk\"`\n    Response    ResponseAction        `json:\"response,omitempty\"`\n}\n\ntype EventSource struct {\n    IPAddress   string `json:\"ip_address\"`\n    UserAgent   string `json:\"user_agent\"`\n    Location    string `json:\"location\"`\n    Service     string `json:\"service\"`\n    Component   string `json:\"component\"`\n}\n\ntype RiskAssessment struct {\n    Score       float64           `json:\"score\"`        // 0.0 - 1.0\n    Factors     []string          `json:\"factors\"`\n    Confidence  float64           `json:\"confidence\"`   // 0.0 - 1.0\n    Context     map[string]string `json:\"context\"`\n}\n</code></pre>"},{"location":"architecture/security/#real-time-monitoring","title":"Real-time Monitoring","text":""},{"location":"architecture/security/#anomaly-detection","title":"Anomaly Detection","text":"<pre><code>type AnomalyDetector struct {\n    UserBehaviorModels    map[string]*BehaviorModel `json:\"user_behavior_models\"`\n    DeviceBehaviorModels  map[string]*BehaviorModel `json:\"device_behavior_models\"`\n    NetworkBehaviorModel  *BehaviorModel            `json:\"network_behavior_model\"`\n    ThresholdConfig       *ThresholdConfig          `json:\"threshold_config\"`\n}\n\ntype BehaviorModel struct {\n    ID                string                 `json:\"id\"`\n    Type              string                 `json:\"type\"`      // user, device, network\n    Features          map[string]float64     `json:\"features\"`\n    Baseline          map[string]Statistics  `json:\"baseline\"`\n    LastUpdated       time.Time             `json:\"last_updated\"`\n    ConfidenceLevel   float64               `json:\"confidence_level\"`\n}\n\ntype Statistics struct {\n    Mean              float64 `json:\"mean\"`\n    StdDev            float64 `json:\"std_dev\"`\n    Min               float64 `json:\"min\"`\n    Max               float64 `json:\"max\"`\n    Percentile95      float64 `json:\"percentile_95\"`\n    SampleCount       int64   `json:\"sample_count\"`\n}\n\nfunc (ad *AnomalyDetector) DetectAnomalies(event *SecurityEvent) []Anomaly {\n    var anomalies []Anomaly\n\n    // Check user behavior anomalies\n    if model, exists := ad.UserBehaviorModels[event.UserID]; exists {\n        if anomaly := ad.checkUserBehavior(event, model); anomaly != nil {\n            anomalies = append(anomalies, *anomaly)\n        }\n    }\n\n    // Check device behavior anomalies\n    if model, exists := ad.DeviceBehaviorModels[event.DeviceID]; exists {\n        if anomaly := ad.checkDeviceBehavior(event, model); anomaly != nil {\n            anomalies = append(anomalies, *anomaly)\n        }\n    }\n\n    // Check network behavior anomalies\n    if anomaly := ad.checkNetworkBehavior(event, ad.NetworkBehaviorModel); anomaly != nil {\n        anomalies = append(anomalies, *anomaly)\n    }\n\n    return anomalies\n}\n</code></pre>"},{"location":"architecture/security/#alert-management","title":"Alert Management","text":"<pre><code>type AlertManager struct {\n    Rules        []AlertRule      `json:\"rules\"`\n    Channels     []AlertChannel   `json:\"channels\"`\n    Escalation   EscalationPolicy `json:\"escalation\"`\n    Suppressions []Suppression    `json:\"suppressions\"`\n}\n\ntype AlertRule struct {\n    ID          string            `json:\"id\"`\n    Name        string            `json:\"name\"`\n    Description string            `json:\"description\"`\n    Condition   AlertCondition    `json:\"condition\"`\n    Severity    string            `json:\"severity\"`\n    Enabled     bool              `json:\"enabled\"`\n    Throttle    time.Duration     `json:\"throttle\"`\n    Actions     []AlertAction     `json:\"actions\"`\n}\n\ntype AlertCondition struct {\n    EventType     SecurityEventType     `json:\"event_type\"`\n    Threshold     map[string]float64    `json:\"threshold\"`\n    TimeWindow    time.Duration         `json:\"time_window\"`\n    Aggregation   string                `json:\"aggregation\"`  // count, rate, sum, avg\n    Filters       map[string]string     `json:\"filters\"`\n}\n</code></pre>"},{"location":"architecture/security/#audit-trail","title":"Audit Trail","text":""},{"location":"architecture/security/#comprehensive-logging","title":"Comprehensive Logging","text":"<pre><code>type AuditLog struct {\n    ID            string                 `json:\"id\"`\n    Timestamp     time.Time             `json:\"timestamp\"`\n    EventType     string                `json:\"event_type\"`\n    Actor         AuditActor            `json:\"actor\"`\n    Target        AuditTarget           `json:\"target\"`\n    Action        AuditAction           `json:\"action\"`\n    Result        AuditResult           `json:\"result\"`\n    Context       map[string]interface{} `json:\"context\"`\n    Metadata      AuditMetadata         `json:\"metadata\"`\n    Signature     string                `json:\"signature\"`     // Tamper protection\n}\n\ntype AuditActor struct {\n    Type      string `json:\"type\"`       // user, service, system\n    ID        string `json:\"id\"`\n    Name      string `json:\"name\"`\n    IP        string `json:\"ip\"`\n    UserAgent string `json:\"user_agent\"`\n    Session   string `json:\"session\"`\n}\n\ntype AuditTarget struct {\n    Type       string                 `json:\"type\"`        // user, device, policy, system\n    ID         string                 `json:\"id\"`\n    Name       string                 `json:\"name\"`\n    Properties map[string]interface{} `json:\"properties\"`\n}\n\ntype AuditAction struct {\n    Type        string                 `json:\"type\"`         // create, read, update, delete, execute\n    Resource    string                 `json:\"resource\"`\n    Method      string                 `json:\"method\"`       // API method or function\n    Parameters  map[string]interface{} `json:\"parameters\"`\n}\n\ntype AuditResult struct {\n    Status      string                 `json:\"status\"`       // success, failure, denied\n    StatusCode  int                    `json:\"status_code\"`\n    Message     string                 `json:\"message\"`\n    Duration    time.Duration          `json:\"duration\"`\n    Changes     map[string]interface{} `json:\"changes\"`      // What was changed\n    Error       string                 `json:\"error,omitempty\"`\n}\n</code></pre>"},{"location":"architecture/security/#tamper-evident-logging","title":"Tamper-Evident Logging","text":"<pre><code>type TamperEvidenceManager struct {\n    HashChain    []string    `json:\"hash_chain\"`\n    MerkleTree   *MerkleTree `json:\"merkle_tree\"`\n    DigitalSign  *RSAPrivKey `json:\"digital_sign\"`\n    TimestampCA  string      `json:\"timestamp_ca\"`\n}\n\nfunc (tem *TamperEvidenceManager) CreateTamperProof(log *AuditLog) error {\n    // 1. Calculate hash of log entry\n    logHash := sha256.Sum256([]byte(log.String()))\n\n    // 2. Chain with previous hash\n    if len(tem.HashChain) &gt; 0 {\n        prevHash := tem.HashChain[len(tem.HashChain)-1]\n        chainInput := fmt.Sprintf(\"%s%x\", prevHash, logHash)\n        chainHash := sha256.Sum256([]byte(chainInput))\n        tem.HashChain = append(tem.HashChain, fmt.Sprintf(\"%x\", chainHash))\n    } else {\n        tem.HashChain = append(tem.HashChain, fmt.Sprintf(\"%x\", logHash))\n    }\n\n    // 3. Add to Merkle tree\n    tem.MerkleTree.AddLeaf(logHash[:])\n\n    // 4. Digital signature\n    signature, err := rsa.SignPKCS1v15(rand.Reader, tem.DigitalSign, crypto.SHA256, logHash[:])\n    if err != nil {\n        return err\n    }\n    log.Signature = base64.StdEncoding.EncodeToString(signature)\n\n    return nil\n}\n</code></pre>"},{"location":"architecture/security/#incident-response","title":"\ud83d\udea8 Incident Response","text":""},{"location":"architecture/security/#automated-response-actions","title":"Automated Response Actions","text":""},{"location":"architecture/security/#security-automation","title":"Security Automation","text":"<pre><code>type SecurityAutomation struct {\n    TriggerRules    []TriggerRule     `json:\"trigger_rules\"`\n    ResponseActions []ResponseAction  `json:\"response_actions\"`\n    Playbooks      []SecurityPlaybook `json:\"playbooks\"`\n}\n\ntype TriggerRule struct {\n    ID          string            `json:\"id\"`\n    Name        string            `json:\"name\"`\n    EventType   SecurityEventType `json:\"event_type\"`\n    Conditions  []Condition       `json:\"conditions\"`\n    Severity    string            `json:\"severity\"`\n    Confidence  float64           `json:\"confidence\"`\n    Actions     []string          `json:\"actions\"`     // Action IDs to execute\n}\n\ntype ResponseAction struct {\n    ID          string                 `json:\"id\"`\n    Type        string                 `json:\"type\"`        // block, quarantine, notify, escalate\n    Parameters  map[string]interface{} `json:\"parameters\"`\n    AutoExecute bool                   `json:\"auto_execute\"`\n    RequireApproval bool               `json:\"require_approval\"`\n    Timeout     time.Duration          `json:\"timeout\"`\n}\n\nvar DefaultResponseActions = []ResponseAction{\n    {\n        ID:   \"block_user\",\n        Type: \"block\",\n        Parameters: map[string]interface{}{\n            \"target_type\": \"user\",\n            \"duration\":    \"1h\",\n            \"reason\":      \"Suspicious activity detected\",\n        },\n        AutoExecute: true,\n        Timeout:     5 * time.Minute,\n    },\n    {\n        ID:   \"quarantine_device\",\n        Type: \"quarantine\",\n        Parameters: map[string]interface{}{\n            \"target_type\":    \"device\",\n            \"network_access\": false,\n            \"reason\":         \"Device compromise suspected\",\n        },\n        AutoExecute:     false,\n        RequireApproval: true,\n        Timeout:         15 * time.Minute,\n    },\n}\n</code></pre>"},{"location":"architecture/security/#security-playbooks","title":"Security Playbooks","text":""},{"location":"architecture/security/#incident-response-workflow","title":"Incident Response Workflow","text":"<pre><code># security-playbooks/credential-compromise.yml\nplaybook:\n  name: \"Credential Compromise Response\"\n  version: \"1.0\"\n  description: \"Automated response to credential compromise\"\n\n  triggers:\n    - event_type: \"auth.login.failure\"\n      threshold: 5\n      time_window: \"5m\"\n    - event_type: \"auth.login.success\"\n      anomaly_score: \"&gt; 0.8\"\n\n  steps:\n    - name: \"immediate_containment\"\n      type: \"parallel\"\n      actions:\n        - action: \"block_user\"\n          parameters:\n            user_id: \"${event.user_id}\"\n            duration: \"1h\"\n            reason: \"Credential compromise suspected\"\n        - action: \"revoke_tokens\"\n          parameters:\n            user_id: \"${event.user_id}\"\n            scope: \"all\"\n        - action: \"notify_security_team\"\n          parameters:\n            severity: \"high\"\n            message: \"Credential compromise detected for user ${event.user_id}\"\n\n    - name: \"investigation\"\n      type: \"sequential\"\n      actions:\n        - action: \"collect_evidence\"\n          parameters:\n            user_id: \"${event.user_id}\"\n            time_range: \"24h\"\n        - action: \"analyze_behavior\"\n          parameters:\n            user_id: \"${event.user_id}\"\n            comparison_period: \"30d\"\n        - action: \"check_related_accounts\"\n          parameters:\n            user_id: \"${event.user_id}\"\n            relationship_types: [\"same_department\", \"shared_devices\"]\n\n    - name: \"recovery\"\n      type: \"manual_approval\"\n      actions:\n        - action: \"force_password_reset\"\n          parameters:\n            user_id: \"${event.user_id}\"\n            require_mfa: true\n        - action: \"revoke_device_certificates\"\n          parameters:\n            user_id: \"${event.user_id}\"\n        - action: \"schedule_security_training\"\n          parameters:\n            user_id: \"${event.user_id}\"\n            training_type: \"credential_security\"\n</code></pre>"},{"location":"architecture/security/#security-configuration","title":"\ud83d\udd27 Security Configuration","text":""},{"location":"architecture/security/#security-headers","title":"Security Headers","text":""},{"location":"architecture/security/#http-security-headers","title":"HTTP Security Headers","text":"<pre><code>func SecurityHeadersMiddleware() fiber.Handler {\n    return func(c *fiber.Ctx) error {\n        // Prevent MIME sniffing\n        c.Set(\"X-Content-Type-Options\", \"nosniff\")\n\n        // Prevent clickjacking\n        c.Set(\"X-Frame-Options\", \"DENY\")\n\n        // XSS protection\n        c.Set(\"X-XSS-Protection\", \"1; mode=block\")\n\n        // HSTS\n        c.Set(\"Strict-Transport-Security\", \"max-age=31536000; includeSubDomains; preload\")\n\n        // CSP\n        csp := \"default-src 'self'; \" +\n               \"script-src 'self' 'unsafe-inline'; \" +\n               \"style-src 'self' 'unsafe-inline'; \" +\n               \"img-src 'self' data: https:; \" +\n               \"font-src 'self'; \" +\n               \"connect-src 'self' wss: https:; \" +\n               \"frame-ancestors 'none'; \" +\n               \"base-uri 'self'; \" +\n               \"object-src 'none'\"\n        c.Set(\"Content-Security-Policy\", csp)\n\n        // Referrer policy\n        c.Set(\"Referrer-Policy\", \"strict-origin-when-cross-origin\")\n\n        // Feature policy\n        c.Set(\"Feature-Policy\", \"geolocation 'none'; microphone 'none'; camera 'none'\")\n\n        // Permissions policy\n        c.Set(\"Permissions-Policy\", \"geolocation=(), microphone=(), camera=()\")\n\n        return c.Next()\n    }\n}\n</code></pre>"},{"location":"architecture/security/#rate-limiting","title":"Rate Limiting","text":""},{"location":"architecture/security/#advanced-rate-limiting","title":"Advanced Rate Limiting","text":"<pre><code>type RateLimiter struct {\n    Redis     *redis.Client\n    Rules     []RateLimitRule\n    Whitelist []string\n    Blacklist []string\n}\n\ntype RateLimitRule struct {\n    ID          string        `json:\"id\"`\n    Path        string        `json:\"path\"`\n    Method      string        `json:\"method\"`\n    Limit       int           `json:\"limit\"`\n    Window      time.Duration `json:\"window\"`\n    Burst       int           `json:\"burst\"`\n    PerUser     bool          `json:\"per_user\"`\n    PerIP       bool          `json:\"per_ip\"`\n    PerDevice   bool          `json:\"per_device\"`\n}\n\nvar DefaultRateLimitRules = []RateLimitRule{\n    {\n        ID:     \"auth_login\",\n        Path:   \"/api/auth/login\",\n        Method: \"POST\",\n        Limit:  5,\n        Window: time.Minute,\n        Burst:  2,\n        PerIP:  true,\n    },\n    {\n        ID:     \"auth_general\",\n        Path:   \"/api/auth/*\",\n        Method: \"*\",\n        Limit:  100,\n        Window: time.Minute,\n        PerUser: true,\n    },\n    {\n        ID:     \"api_general\",\n        Path:   \"/api/*\",\n        Method: \"*\",\n        Limit:  1000,\n        Window: time.Minute,\n        PerUser: true,\n    },\n}\n</code></pre>"},{"location":"architecture/security/#input-validation","title":"Input Validation","text":""},{"location":"architecture/security/#comprehensive-input-validation","title":"Comprehensive Input Validation","text":"<pre><code>type InputValidator struct {\n    Rules map[string]ValidationRule `json:\"rules\"`\n}\n\ntype ValidationRule struct {\n    Required     bool              `json:\"required\"`\n    Type         string            `json:\"type\"`         // string, int, email, uuid, etc.\n    MinLength    int               `json:\"min_length\"`\n    MaxLength    int               `json:\"max_length\"`\n    Pattern      string            `json:\"pattern\"`      // Regex pattern\n    Whitelist    []string          `json:\"whitelist\"`\n    Blacklist    []string          `json:\"blacklist\"`\n    Sanitize     bool              `json:\"sanitize\"`\n    CustomRules  []string          `json:\"custom_rules\"`\n}\n\nvar InputValidationRules = map[string]ValidationRule{\n    \"username\": {\n        Required:  true,\n        Type:      \"string\",\n        MinLength: 3,\n        MaxLength: 32,\n        Pattern:   \"^[a-zA-Z0-9_-]+$\",\n        Sanitize:  true,\n    },\n    \"password\": {\n        Required:  true,\n        Type:      \"string\",\n        MinLength: 12,\n        MaxLength: 128,\n        CustomRules: []string{\"password_complexity\", \"password_history\"},\n    },\n    \"email\": {\n        Required:  true,\n        Type:      \"email\",\n        MaxLength: 254,\n        Sanitize:  true,\n    },\n    \"device_id\": {\n        Required: true,\n        Type:     \"uuid\",\n        Pattern:  \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\",\n    },\n}\n</code></pre>"},{"location":"architecture/security/#security-compliance","title":"\ud83d\udccb Security Compliance","text":""},{"location":"architecture/security/#compliance-frameworks","title":"Compliance Frameworks","text":""},{"location":"architecture/security/#implementation-mapping","title":"Implementation Mapping","text":"Control NIST ISO 27001 SOC 2 Implementation Access Control AC-2, AC-3 A.9.1, A.9.2 CC6.1, CC6.2 RBAC + ABAC Authentication IA-2, IA-5 A.9.4 CC6.1 MFA + Device Attestation Encryption SC-8, SC-13 A.10.1 CC6.1 AES-256-GCM Audit Logging AU-2, AU-3 A.12.4 CC7.1 Comprehensive Audit Trail Incident Response IR-4, IR-6 A.16.1 CC7.3 Automated + Manual Response"},{"location":"architecture/security/#gdpr-compliance","title":"GDPR Compliance","text":"<pre><code>type GDPRCompliance struct {\n    DataProcessor     *DataProcessor     `json:\"data_processor\"`\n    ConsentManager    *ConsentManager    `json:\"consent_manager\"`\n    DataRetention     *RetentionPolicy   `json:\"data_retention\"`\n    RightToErasure    *ErasureService    `json:\"right_to_erasure\"`\n    DataPortability   *PortabilityService `json:\"data_portability\"`\n    PrivacyByDesign   *PrivacyControls   `json:\"privacy_by_design\"`\n}\n\ntype DataProcessor struct {\n    PurposeLimitation map[string][]string `json:\"purpose_limitation\"`\n    DataMinimization  map[string][]string `json:\"data_minimization\"`\n    StorageLimitation map[string]time.Duration `json:\"storage_limitation\"`\n    ProcessingBasis   map[string]string   `json:\"processing_basis\"`\n}\n</code></pre>"},{"location":"architecture/security/#security-metrics","title":"Security Metrics","text":""},{"location":"architecture/security/#key-performance-indicators","title":"Key Performance Indicators","text":"<pre><code>type SecurityMetrics struct {\n    AuthenticationMetrics   AuthMetrics      `json:\"authentication_metrics\"`\n    AuthorizationMetrics    AuthzMetrics     `json:\"authorization_metrics\"`\n    IncidentMetrics        IncidentMetrics   `json:\"incident_metrics\"`\n    ComplianceMetrics      ComplianceMetrics `json:\"compliance_metrics\"`\n}\n\ntype AuthMetrics struct {\n    LoginSuccessRate       float64 `json:\"login_success_rate\"`\n    LoginFailureRate       float64 `json:\"login_failure_rate\"`\n    MFAAdoptionRate        float64 `json:\"mfa_adoption_rate\"`\n    PasswordStrengthScore  float64 `json:\"password_strength_score\"`\n    AccountLockoutRate     float64 `json:\"account_lockout_rate\"`\n    SuspiciousLoginRate    float64 `json:\"suspicious_login_rate\"`\n}\n\ntype AuthzMetrics struct {\n    AccessDenialRate       float64 `json:\"access_denial_rate\"`\n    PrivilegeEscalations   int64   `json:\"privilege_escalations\"`\n    PolicyViolations       int64   `json:\"policy_violations\"`\n    UnauthorizedAccess     int64   `json:\"unauthorized_access\"`\n}\n\ntype IncidentMetrics struct {\n    IncidentCount          int64         `json:\"incident_count\"`\n    MeanTimeToDetection    time.Duration `json:\"mean_time_to_detection\"`\n    MeanTimeToResponse     time.Duration `json:\"mean_time_to_response\"`\n    MeanTimeToResolution   time.Duration `json:\"mean_time_to_resolution\"`\n    FalsePositiveRate      float64       `json:\"false_positive_rate\"`\n    SecurityEventVolume    int64         `json:\"security_event_volume\"`\n}\n</code></pre>"},{"location":"architecture/security/#security-configuration-management","title":"\ud83d\udd27 Security Configuration Management","text":""},{"location":"architecture/security/#environment-specific-security","title":"Environment-specific Security","text":""},{"location":"architecture/security/#development-security","title":"Development Security","text":"<pre><code>security:\n  environment: development\n  auth:\n    jwt_secret: \"development-secret-do-not-use-in-production\"\n    token_expiration: \"24h\"\n    mfa_required: false\n    demo_tokens_enabled: true\n\n  encryption:\n    at_rest: false\n    in_transit: true\n    tls_version: \"1.2\"\n\n  monitoring:\n    audit_level: \"basic\"\n    log_level: \"debug\"\n    retention: \"7d\"\n\n  rate_limiting:\n    enabled: true\n    strict: false\n</code></pre>"},{"location":"architecture/security/#production-security","title":"Production Security","text":"<pre><code>security:\n  environment: production\n  auth:\n    jwt_secret: \"${JWT_SECRET_FROM_VAULT}\"\n    token_expiration: \"1h\"\n    mfa_required: true\n    demo_tokens_enabled: false\n    certificate_validation: strict\n\n  encryption:\n    at_rest: true\n    in_transit: true\n    tls_version: \"1.3\"\n    cipher_suites: [\"TLS_AES_256_GCM_SHA384\"]\n    key_rotation: \"90d\"\n\n  monitoring:\n    audit_level: \"comprehensive\"\n    log_level: \"warn\"\n    retention: \"7y\"\n    real_time_alerting: true\n\n  rate_limiting:\n    enabled: true\n    strict: true\n    adaptive: true\n\n  compliance:\n    frameworks: [\"NIST\", \"ISO27001\", \"SOC2\"]\n    data_retention: \"as_required\"\n    gdpr_enabled: true\n</code></pre>"},{"location":"architecture/security/#security-documentation-and-training","title":"\ud83d\udcda Security Documentation and Training","text":""},{"location":"architecture/security/#security-procedures","title":"Security Procedures","text":""},{"location":"architecture/security/#security-incident-response-procedures","title":"Security Incident Response Procedures","text":"<ol> <li>Detection and Analysis (0-15 minutes)</li> <li>Automated detection triggers alert</li> <li>Security team notified immediately</li> <li>Initial impact assessment performed</li> <li> <p>Incident severity classified</p> </li> <li> <p>Containment (15-60 minutes)</p> </li> <li>Immediate containment actions executed</li> <li>Affected systems isolated</li> <li>User accounts secured</li> <li> <p>Evidence preservation initiated</p> </li> <li> <p>Investigation (1-24 hours)</p> </li> <li>Detailed forensic analysis</li> <li>Root cause identification</li> <li>Impact assessment completion</li> <li> <p>Timeline reconstruction</p> </li> <li> <p>Recovery (Variable)</p> </li> <li>System restoration</li> <li>Security patches applied</li> <li>Configuration hardening</li> <li> <p>Service restoration</p> </li> <li> <p>Post-Incident (1-7 days)</p> </li> <li>Lessons learned documentation</li> <li>Process improvements</li> <li>Policy updates</li> <li>Training updates</li> </ol>"},{"location":"architecture/security/#security-training","title":"Security Training","text":""},{"location":"architecture/security/#required-training-programs","title":"Required Training Programs","text":"<ul> <li>Security Awareness: All users (quarterly)</li> <li>Secure Development: Developers (annually)</li> <li>Incident Response: Security team (bi-annually)</li> <li>Compliance Training: Management (annually)</li> <li>Privacy Training: All staff (annually)</li> </ul>"},{"location":"architecture/security/#security-references","title":"Security References","text":""},{"location":"architecture/security/#external-resources","title":"External Resources","text":"<ul> <li>NIST Cybersecurity Framework</li> <li>OWASP Top 10</li> <li>Zero Trust Architecture (NIST SP 800-207)</li> <li>CIS Controls</li> <li>ISO 27001:2013</li> </ul>"},{"location":"architecture/security/#internal-documentation","title":"Internal Documentation","text":"<ul> <li>Security Policies</li> <li>Incident Response Playbooks</li> <li>Security Architecture Diagrams</li> <li>Threat Model</li> </ul>"},{"location":"architecture/service-discovery/","title":"Service Discovery Architecture","text":"<p>This document outlines the service discovery implementation for the MVP Zero Trust Auth system, providing both Consul and Kubernetes-native discovery patterns.</p>"},{"location":"architecture/service-discovery/#overview","title":"Overview","text":"<p>The service discovery system is designed with a pluggable architecture that supports multiple backends:</p> <ul> <li>Consul - HashiCorp Consul for hybrid/multi-cloud deployments</li> <li>Kubernetes - Native K8s service discovery for cloud-native environments  </li> <li>Memory - In-memory registry for testing and development</li> </ul>"},{"location":"architecture/service-discovery/#architecture-components","title":"Architecture Components","text":""},{"location":"architecture/service-discovery/#core-interfaces","title":"Core Interfaces","text":"<pre><code>// ServiceRegistry - Main discovery interface\ntype ServiceRegistry interface {\n    Register(ctx context.Context, service *Service) error\n    Deregister(ctx context.Context, serviceID string) error\n    Discover(ctx context.Context, serviceName string) ([]*Service, error)\n    Watch(ctx context.Context, serviceName string) (&lt;-chan ServiceEvent, error)\n    Health() error\n    Close() error\n}\n\n// Service - Represents a discoverable service\ntype Service struct {\n    ID          string\n    Name        string\n    Address     string\n    Port        int\n    Tags        []string\n    Meta        map[string]string\n    Health      HealthStatus\n    Environment string\n    Version     string\n    Namespace   string\n}\n</code></pre>"},{"location":"architecture/service-discovery/#load-balancing-strategies","title":"Load Balancing Strategies","text":"<p>The system implements multiple load balancing algorithms:</p> <ul> <li>Round Robin - Even distribution across healthy instances</li> <li>Weighted Round Robin - Distribution based on instance weights</li> <li>Random - Random selection for simple load distribution</li> <li>Consistent Hash - Session affinity using client attributes</li> <li>IP Hash - Client IP-based routing for sticky sessions</li> <li>Least Connections - Route to instance with fewest active connections</li> </ul>"},{"location":"architecture/service-discovery/#implementation-details","title":"Implementation Details","text":""},{"location":"architecture/service-discovery/#consul-integration","title":"Consul Integration","text":"<p>Features: - Service registration with health checks - KV store for configuration management - Service mesh integration via Consul Connect - Multi-datacenter support - Advanced health monitoring</p> <p>Configuration: <pre><code>consul:\n  address: \"localhost:8500\"\n  datacenter: \"dc1\"\n  health_check:\n    interval: \"10s\"\n    timeout: \"3s\"\n    deregister_after: \"60s\"\n</code></pre></p> <p>Health Checks: - HTTP endpoints (<code>/health</code>) - TCP connectivity checks - Custom script execution - TTL-based checks</p>"},{"location":"architecture/service-discovery/#kubernetes-integration","title":"Kubernetes Integration","text":"<p>Features: - Native service discovery via K8s API - Label selector-based service filtering - Endpoint health monitoring - Namespace isolation - Automatic service registration</p> <p>Service Definition: <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: zamaz-api-service\n  namespace: zamaz\n  labels:\n    app.kubernetes.io/name: zamaz\n    app.kubernetes.io/component: api\nspec:\n  type: ClusterIP\n  ports:\n  - name: http\n    port: 8080\n    targetPort: http\n  selector:\n    app.kubernetes.io/name: zamaz\n    app.kubernetes.io/component: api\n</code></pre></p>"},{"location":"architecture/service-discovery/#usage-examples","title":"Usage Examples","text":""},{"location":"architecture/service-discovery/#basic-service-registration","title":"Basic Service Registration","text":"<pre><code>// Initialize registry\nregistry, err := discovery.CreateFromEnvironment(logger)\nif err != nil {\n    log.Fatal(err)\n}\n\n// Register service\nservice := discovery.NewService(\"api-1\", \"zamaz-api\", \"127.0.0.1\", 8080)\nservice.AddTag(\"environment=development\")\nservice.AddMeta(\"version\", \"1.0.0\")\n\nerr = registry.Register(ctx, service)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"architecture/service-discovery/#service-discovery","title":"Service Discovery","text":"<pre><code>// Discover services\nservices, err := registry.Discover(ctx, \"zamaz-api\")\nif err != nil {\n    log.Fatal(err)\n}\n\n// Load balance across instances\nlb := loadbalancer.NewRoundRobinBalancer()\nselected, err := lb.Select(services, &amp;loadbalancer.Request{\n    ClientIP: \"192.168.1.100\",\n    Method:   \"GET\",\n    Path:     \"/api/users\",\n})\n</code></pre>"},{"location":"architecture/service-discovery/#service-watching","title":"Service Watching","text":"<pre><code>// Watch for service changes\neventChan, err := registry.Watch(ctx, \"zamaz-api\")\nif err != nil {\n    log.Fatal(err)\n}\n\nfor event := range eventChan {\n    switch event.Type {\n    case discovery.EventServiceRegistered:\n        log.Info(\"New service instance:\", event.Service.ID)\n    case discovery.EventServiceDeregistered:\n        log.Info(\"Service instance removed:\", event.Service.ID)\n    case discovery.EventServiceHealthChange:\n        log.Info(\"Health changed:\", event.Service.ID, event.Service.Health)\n    }\n}\n</code></pre>"},{"location":"architecture/service-discovery/#configuration","title":"Configuration","text":""},{"location":"architecture/service-discovery/#environment-variables","title":"Environment Variables","text":"<pre><code># Service Registry Provider\nSERVICE_REGISTRY_PROVIDER=consul  # consul, kubernetes, memory\n\n# Consul Configuration\nCONSUL_ADDRESS=localhost:8500\nCONSUL_DATACENTER=dc1\nCONSUL_TOKEN=\nCONSUL_NAMESPACE=\n\n# Kubernetes Configuration  \nK8S_IN_CLUSTER=true\nK8S_NAMESPACE=zamaz\nK8S_LABEL_SELECTOR=app.kubernetes.io/part-of=zamaz-platform\n\n# Load Balancer Configuration\nLB_STRATEGY=round_robin\nLB_HEALTHY_ONLY=true\nLB_MAX_RETRIES=3\nLB_CIRCUIT_BREAKER=true\n</code></pre>"},{"location":"architecture/service-discovery/#feature-flags","title":"Feature Flags","text":"<p>The system supports feature flags stored in Consul KV:</p> <pre><code># Enable/disable features\nmvp-zero-trust-auth/features/consul-discovery=true\nmvp-zero-trust-auth/features/load-balancing=true\nmvp-zero-trust-auth/features/circuit-breaker=true\nmvp-zero-trust-auth/features/health-monitoring=true\n</code></pre>"},{"location":"architecture/service-discovery/#deployment-patterns","title":"Deployment Patterns","text":""},{"location":"architecture/service-discovery/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Start Consul: <pre><code>make consul-start\n</code></pre></p> </li> <li> <p>Configure Services: <pre><code>make consul-setup\n</code></pre></p> </li> <li> <p>Verify Registration: <pre><code>make consul-services\n</code></pre></p> </li> </ol>"},{"location":"architecture/service-discovery/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: zamaz-api\nspec:\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: zamaz\n        app.kubernetes.io/component: api\n    spec:\n      containers:\n      - name: api\n        image: zamaz/api:latest\n        env:\n        - name: SERVICE_REGISTRY_PROVIDER\n          value: \"kubernetes\"\n        - name: K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n</code></pre>"},{"location":"architecture/service-discovery/#multi-registry-setup","title":"Multi-Registry Setup","text":"<pre><code>// Create multi-registry for hybrid environments\nmultiRegistry := discovery.NewMultiRegistry(logger)\n\n// Add Consul for external services\nconsulRegistry, _ := discovery.NewConsulRegistry(consulConfig, logger)\nmultiRegistry.AddRegistry(\"consul\", consulRegistry)\n\n// Add Kubernetes for internal services\nk8sRegistry, _ := discovery.NewKubernetesRegistry(k8sConfig, logger)\nmultiRegistry.AddRegistry(\"kubernetes\", k8sRegistry)\nmultiRegistry.SetPrimary(\"kubernetes\")\n</code></pre>"},{"location":"architecture/service-discovery/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"architecture/service-discovery/#health-checks","title":"Health Checks","text":"<p>The system provides comprehensive health monitoring:</p> <ul> <li>Service Health - Individual service instance health</li> <li>Registry Health - Backend registry connectivity</li> <li>Load Balancer Stats - Distribution metrics and failure rates</li> </ul>"},{"location":"architecture/service-discovery/#metrics","title":"Metrics","text":"<p>Key metrics exposed via Prometheus:</p> <pre><code># Service discovery metrics\nservice_registry_services_total{registry=\"consul\",namespace=\"zamaz\"}\nservice_registry_health_checks_total{status=\"passing\"}\nservice_registry_discovery_duration_seconds\n\n# Load balancer metrics  \nload_balancer_requests_total{strategy=\"round_robin\",backend=\"api-1\"}\nload_balancer_failures_total{strategy=\"round_robin\",error=\"connection_refused\"}\nload_balancer_selection_duration_seconds\n</code></pre>"},{"location":"architecture/service-discovery/#alerting","title":"Alerting","text":"<p>Recommended alerts:</p> <ul> <li>Service registration failures</li> <li>Health check failures exceeding threshold</li> <li>Load balancer backend unavailability</li> <li>Registry connectivity issues</li> </ul>"},{"location":"architecture/service-discovery/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/service-discovery/#service-authentication","title":"Service Authentication","text":"<ul> <li>Consul - ACL tokens for API access</li> <li>Kubernetes - RBAC for service account permissions</li> <li>mTLS - Mutual TLS for service-to-service communication</li> </ul>"},{"location":"architecture/service-discovery/#network-security","title":"Network Security","text":"<ul> <li>Service Mesh - Istio integration for traffic encryption</li> <li>Network Policies - K8s network policies for traffic isolation</li> <li>Firewall Rules - Consul agent communication security</li> </ul>"},{"location":"architecture/service-discovery/#best-practices","title":"Best Practices","text":"<ol> <li>Health Check Design</li> <li>Use lightweight health checks</li> <li>Include dependency health in checks</li> <li> <p>Set appropriate timeouts and intervals</p> </li> <li> <p>Service Naming</p> </li> <li>Use consistent naming conventions</li> <li>Include environment and version tags</li> <li> <p>Namespace services appropriately</p> </li> <li> <p>Load Balancing</p> </li> <li>Choose appropriate strategy for workload</li> <li>Monitor backend health and performance</li> <li> <p>Implement circuit breakers for resilience</p> </li> <li> <p>Configuration Management</p> </li> <li>Use feature flags for gradual rollouts</li> <li>Store configuration in centralized KV store</li> <li>Version configuration changes</li> </ol>"},{"location":"architecture/service-discovery/#troubleshooting","title":"Troubleshooting","text":""},{"location":"architecture/service-discovery/#common-issues","title":"Common Issues","text":"<p>Service Not Discovered: - Check service registration status - Verify health check configuration - Validate label selectors (Kubernetes)</p> <p>Load Balancer Failures: - Monitor backend health status - Check connection limits and timeouts - Review circuit breaker settings</p> <p>Registry Connectivity: - Verify network connectivity to registry - Check authentication/authorization - Review TLS configuration</p>"},{"location":"architecture/service-discovery/#debugging-commands","title":"Debugging Commands","text":"<pre><code># Check Consul services\nmake consul-services\n\n# Verify Consul health\ncurl http://localhost:8500/v1/status/leader\n\n# Check Kubernetes services\nkubectl get services -n zamaz\n\n# View service endpoints\nkubectl get endpoints -n zamaz\n</code></pre> <p>This service discovery implementation provides a robust, scalable foundation for microservice communication in the MVP Zero Trust Auth system, supporting both cloud-native and hybrid deployment patterns.</p>"},{"location":"architecture/zero-trust/","title":"Zero Trust Architecture","text":"<p>This document is a placeholder for Zero Trust Architecture. Information regarding the zero trust security model implementation will be added here.</p> <p>This file was auto-generated as part of a documentation update initiative.</p>"},{"location":"cli/","title":"Zero Trust CLI (ztcli) - Developer Tool Documentation","text":"<p>The Zero Trust CLI (<code>ztcli</code>) is a comprehensive command-line tool for managing and testing the MVP Zero Trust Authentication system. It provides developers and administrators with powerful utilities for authentication testing, user management, token operations, and system administration.</p>"},{"location":"cli/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Configuration</li> <li>Authentication Commands</li> <li>Token Operations</li> <li>User Management</li> <li>System Administration</li> <li>Development Utilities</li> <li>Output Formats</li> <li>Configuration File</li> <li>Environment Variables</li> <li>Examples &amp; Workflows</li> <li>Troubleshooting</li> </ul>"},{"location":"cli/#installation","title":"Installation","text":""},{"location":"cli/#from-source","title":"From Source","text":"<pre><code># Clone the repository\ngit clone https://github.com/mvp/zerotrust-auth.git\ncd zerotrust-auth\n\n# Build the CLI tool\nmake build\n# or specifically for CLI\ngo build -o bin/ztcli cmd/ztcli/main.go\n\n# Install to system PATH\nsudo cp bin/ztcli /usr/local/bin/\n</code></pre>"},{"location":"cli/#using-go-install","title":"Using Go Install","text":"<pre><code>go install mvp.local/cmd/ztcli@latest\n</code></pre>"},{"location":"cli/#pre-built-binaries","title":"Pre-built Binaries","text":"<p>Download the latest release from the releases page and place the binary in your PATH.</p>"},{"location":"cli/#configuration","title":"Configuration","text":""},{"location":"cli/#quick-setup","title":"Quick Setup","text":"<pre><code># Set the base URL and API key\nztcli config --url https://auth.example.com --api-key your-api-key\n\n# Or use environment variables\nexport ZTCLI_BASE_URL=\"https://auth.example.com\"\nexport ZTCLI_API_KEY=\"your-api-key\"\n\n# Test the connection\nztcli system health\n</code></pre>"},{"location":"cli/#global-flags","title":"Global Flags","text":"<p>All commands support these global flags:</p> <ul> <li><code>--url</code> / <code>-u</code>: Zero Trust Auth service URL</li> <li><code>--api-key</code>: API key for authentication</li> <li><code>--output</code> / <code>-o</code>: Output format (table, json, yaml)</li> <li><code>--verbose</code> / <code>-v</code>: Enable verbose output</li> <li><code>--config</code>: Custom config file path</li> </ul>"},{"location":"cli/#authentication-commands","title":"Authentication Commands","text":""},{"location":"cli/#login","title":"Login","text":"<p>Authenticate a user and obtain access tokens.</p> <pre><code># Basic login\nztcli auth login user@example.com\n\n# Login with password (non-interactive)\nztcli auth login user@example.com --password mypassword\n\n# Login with MFA\nztcli auth login user@example.com --mfa 123456\n\n# Remember login session\nztcli auth login user@example.com --remember\n\n# Example output\n\u2705 Authentication successful!\nAccess Token: eyJhbGciOiJSUzI1NiIs...\nExpires At: 2024-12-31T23:59:59Z\n</code></pre>"},{"location":"cli/#logout","title":"Logout","text":"<p>Logout from current or all sessions.</p> <pre><code># Logout current session\nztcli auth logout\n\n# Logout specific token\nztcli auth logout --token eyJhbGciOiJSUzI1NiIs...\n\n# Logout from all devices\nztcli auth logout --everywhere\n\n# Example output\n\u2705 Logout successful!\n</code></pre>"},{"location":"cli/#refresh-token","title":"Refresh Token","text":"<p>Refresh an access token using a refresh token.</p> <pre><code># Refresh token\nztcli auth refresh &lt;refresh_token&gt;\n\n# Example output\n\u2705 Token refreshed successfully!\n{\n  \"access_token\": \"eyJhbGciOiJSUzI1NiIs...\",\n  \"refresh_token\": \"eyJhbGciOiJSUzI1NiIs...\",\n  \"expires_at\": \"2024-12-31T23:59:59Z\",\n  \"token_type\": \"Bearer\"\n}\n</code></pre>"},{"location":"cli/#token-operations","title":"Token Operations","text":""},{"location":"cli/#validate-token","title":"Validate Token","text":"<p>Validate an access token and view its claims.</p> <pre><code># Basic token validation\nztcli token validate eyJhbGciOiJSUzI1NiIs...\n\n# Validate with required scopes\nztcli token validate eyJhbGciOiJSUzI1NiIs... --scopes read:profile,write:profile\n\n# Validate with audience\nztcli token validate eyJhbGciOiJSUzI1NiIs... --audience api.example.com\n\n# Example output\n\u2705 Token is valid!\n{\n  \"valid\": true,\n  \"claims\": {\n    \"sub\": \"user-123\",\n    \"email\": \"user@example.com\",\n    \"roles\": [\"user\", \"admin\"],\n    \"scopes\": [\"read:profile\", \"write:profile\"],\n    \"iat\": 1640995200,\n    \"exp\": 1640998800\n  },\n  \"trust_score\": 0.95\n}\n</code></pre>"},{"location":"cli/#token-introspection","title":"Token Introspection","text":"<p>Get detailed information about a token (same as validate with full details).</p> <pre><code># Introspect token\nztcli token introspect eyJhbGciOiJSUzI1NiIs...\n\n# Output includes all token metadata\n{\n  \"valid\": true,\n  \"active\": true,\n  \"token_type\": \"Bearer\",\n  \"claims\": {\n    \"sub\": \"user-123\",\n    \"email\": \"user@example.com\",\n    \"roles\": [\"user\"],\n    \"permissions\": [\"read:profile\", \"write:profile\"],\n    \"iat\": 1640995200,\n    \"exp\": 1640998800,\n    \"aud\": \"api.example.com\",\n    \"iss\": \"https://auth.example.com\"\n  },\n  \"trust_score\": 0.95,\n  \"issued_at\": \"2024-01-01T00:00:00Z\",\n  \"expires_at\": \"2024-01-01T01:00:00Z\"\n}\n</code></pre>"},{"location":"cli/#user-management","title":"User Management","text":""},{"location":"cli/#list-users","title":"List Users","text":"<p>List users with filtering options.</p> <pre><code># List all users\nztcli user list\n\n# Filter by role\nztcli user list --role admin\n\n# Filter by status\nztcli user list --status active\n\n# Pagination\nztcli user list --limit 10 --offset 0\n\n# Example output\n\ud83d\udccb User list functionality not yet implemented\nThis would connect to the user management API\n</code></pre>"},{"location":"cli/#create-user","title":"Create User","text":"<p>Create a new user account.</p> <pre><code># Create basic user\nztcli user create --email newuser@example.com\n\n# Create user with full details\nztcli user create \\\n  --email admin@example.com \\\n  --first-name John \\\n  --last-name Doe \\\n  --password securepassword \\\n  --roles admin,user \\\n  --active \\\n  --verified\n\n# Example output\n\ud83d\udcdd Creating user: admin@example.com\nName: John Doe\nPassword provided: true\nRoles: [admin user]\nActive: true, Verified: true\n\ud83d\udea7 User creation functionality not yet implemented\n</code></pre>"},{"location":"cli/#show-user","title":"Show User","text":"<p>Display detailed information about a specific user.</p> <pre><code># Show user by ID\nztcli user show user-123\n\n# Example output\n\ud83d\udc64 Showing user: user-123\n\ud83d\udea7 User show functionality not yet implemented\n</code></pre>"},{"location":"cli/#update-user","title":"Update User","text":"<p>Update user information.</p> <pre><code># Update user details\nztcli user update user-123 \\\n  --first-name Jane \\\n  --last-name Smith \\\n  --roles admin \\\n  --active\n\n# Example output\n\u270f\ufe0f Updating user: user-123\n\ud83d\udea7 User update functionality not yet implemented\n</code></pre>"},{"location":"cli/#delete-user","title":"Delete User","text":"<p>Delete a user account.</p> <pre><code># Delete user\nztcli user delete user-123\n\n# Example output\n\ud83d\uddd1\ufe0f Deleting user: user-123\n\ud83d\udea7 User deletion functionality not yet implemented\n</code></pre>"},{"location":"cli/#system-administration","title":"System Administration","text":""},{"location":"cli/#health-check","title":"Health Check","text":"<p>Check if the Zero Trust Auth service is healthy.</p> <pre><code># Basic health check\nztcli system health\n\n# Example output\n\u2705 System is healthy!\n</code></pre>"},{"location":"cli/#system-status","title":"System Status","text":"<p>Get comprehensive system status including connection details.</p> <pre><code># Show system status\nztcli system status\n\n# Example output\n\ud83d\udcca System Status:\nBase URL: https://auth.example.com\nAPI Key: your****key\nConnection: \u2705 Successful\n</code></pre>"},{"location":"cli/#configuration_1","title":"Configuration","text":"<p>Display current CLI configuration.</p> <pre><code># Show current config\nztcli system config\n\n# Example output (JSON format)\n{\n  \"base_url\": \"https://auth.example.com\",\n  \"api_key\": \"your-api-key\",\n  \"timeout\": \"30s\",\n  \"debug\": false\n}\n</code></pre>"},{"location":"cli/#development-utilities","title":"Development Utilities","text":""},{"location":"cli/#generate-api-key","title":"Generate API Key","text":"<p>Generate a new API key for development.</p> <pre><code># Generate API key\nztcli dev generate-key\n\n# Example output\n\ud83d\udd11 Generated API Key: dev-api-key-abc123xyz789\n\ud83d\udca1 Store this key securely and use it for API authentication\n</code></pre>"},{"location":"cli/#generate-sdk-client","title":"Generate SDK Client","text":"<p>Generate SDK client code for different languages.</p> <pre><code># Generate Go SDK\nztcli dev generate-client --lang go --output-dir ./sdk/go\n\n# Generate JavaScript SDK\nztcli dev generate-client --lang javascript --output-dir ./sdk/js --package @company/auth-sdk\n\n# Generate Python SDK\nztcli dev generate-client --lang python --output-dir ./sdk/python --package zerotrust-sdk\n\n# Example output\n\ud83d\udd27 Generating go SDK client...\nOutput directory: ./sdk/go\n\ud83d\udea7 Code generation functionality not yet implemented\nThis would generate SDK client code in the specified language\n</code></pre>"},{"location":"cli/#test-connection","title":"Test Connection","text":"<p>Test connectivity to the Zero Trust Auth service with timing information.</p> <pre><code># Test connection\nztcli dev test-connection\n\n# Example output\n\ud83d\udd17 Testing connection to https://auth.example.com...\n\u2705 Connection successful! Response time: 45ms\n</code></pre>"},{"location":"cli/#output-formats","title":"Output Formats","text":"<p>The CLI supports multiple output formats for structured data:</p>"},{"location":"cli/#json-output","title":"JSON Output","text":"<pre><code># Get JSON output\nztcli token validate &lt;token&gt; --output json\n\n{\n  \"valid\": true,\n  \"claims\": {\n    \"sub\": \"user-123\",\n    \"email\": \"user@example.com\"\n  }\n}\n</code></pre>"},{"location":"cli/#yaml-output","title":"YAML Output","text":"<pre><code># Get YAML output\nztcli token validate &lt;token&gt; --output yaml\n\n# Currently returns JSON format\n# YAML formatting planned for future release\n</code></pre>"},{"location":"cli/#table-output-default","title":"Table Output (Default)","text":"<pre><code># Default table format\nztcli token validate &lt;token&gt; --output table\n\n# Returns formatted JSON for now\n# Table formatting planned for future release\n</code></pre>"},{"location":"cli/#configuration-file","title":"Configuration File","text":"<p>The CLI uses a YAML configuration file located at <code>~/.ztcli.yaml</code> by default.</p>"},{"location":"cli/#sample-configuration","title":"Sample Configuration","text":"<pre><code># ~/.ztcli.yaml\nbase_url: \"https://auth.example.com\"\napi_key: \"your-api-key\"\ntimeout: \"30s\"\ndebug: false\noutput_format: \"json\"\n\n# Optional: Custom user agent\nuser_agent: \"MyApp/1.0 ztcli\"\n\n# Optional: TLS settings for development\ninsecure_skip_verify: false\n</code></pre>"},{"location":"cli/#custom-config-file","title":"Custom Config File","text":"<pre><code># Use custom config file\nztcli --config /path/to/custom-config.yaml system health\n</code></pre>"},{"location":"cli/#environment-variables","title":"Environment Variables","text":"<p>Override configuration with environment variables:</p> <pre><code># Required variables\nexport ZTCLI_BASE_URL=\"https://auth.example.com\"\nexport ZTCLI_API_KEY=\"your-api-key\"\n\n# Optional variables\nexport ZTCLI_TIMEOUT=\"30s\"\nexport ZTCLI_DEBUG=\"true\"\nexport ZTCLI_OUTPUT=\"json\"\nexport ZTCLI_VERBOSE=\"true\"\n\n# Use the CLI\nztcli system health\n</code></pre>"},{"location":"cli/#examples-workflows","title":"Examples &amp; Workflows","text":""},{"location":"cli/#complete-authentication-flow","title":"Complete Authentication Flow","text":"<pre><code># 1. Test connection\nztcli dev test-connection\n\n# 2. Login user\nztcli auth login user@example.com --password mypassword\n\n# 3. Validate the returned token\nztcli token validate eyJhbGciOiJSUzI1NiIs...\n\n# 4. Check system status\nztcli system status\n\n# 5. Logout\nztcli auth logout\n</code></pre>"},{"location":"cli/#development-workflow","title":"Development Workflow","text":"<pre><code># 1. Generate API key for development\nztcli dev generate-key\n\n# 2. Set up configuration\ncat &gt; ~/.ztcli.yaml &lt;&lt; EOF\nbase_url: \"http://localhost:8080\"\napi_key: \"dev-api-key-abc123\"\ndebug: true\nEOF\n\n# 3. Test local development server\nztcli system health\n\n# 4. Test authentication\nztcli auth login dev@example.com --password devpassword\n\n# 5. Generate SDK code\nztcli dev generate-client --lang go --output-dir ./sdk\n</code></pre>"},{"location":"cli/#token-testing-workflow","title":"Token Testing Workflow","text":"<pre><code># 1. Login and capture output\nLOGIN_RESPONSE=$(ztcli auth login user@example.com --output json)\nACCESS_TOKEN=$(echo $LOGIN_RESPONSE | jq -r '.access_token')\nREFRESH_TOKEN=$(echo $LOGIN_RESPONSE | jq -r '.refresh_token')\n\n# 2. Validate token\nztcli token validate $ACCESS_TOKEN --scopes read:profile\n\n# 3. Test token with specific audience\nztcli token validate $ACCESS_TOKEN --audience api.example.com\n\n# 4. Refresh token when needed\nztcli auth refresh $REFRESH_TOKEN\n\n# 5. Logout when done\nztcli auth logout --token $ACCESS_TOKEN\n</code></pre>"},{"location":"cli/#system-administration-workflow","title":"System Administration Workflow","text":"<pre><code># 1. Check system health\nztcli system health\n\n# 2. Get system status\nztcli system status --output json\n\n# 3. List users (when implemented)\nztcli user list --role admin\n\n# 4. Create admin user (when implemented)\nztcli user create \\\n  --email admin@company.com \\\n  --first-name System \\\n  --last-name Admin \\\n  --roles admin,user \\\n  --active \\\n  --verified\n\n# 5. Monitor system\nwatch -n 5 'ztcli system health'\n</code></pre>"},{"location":"cli/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/#common-issues","title":"Common Issues","text":""},{"location":"cli/#connection-failed","title":"Connection Failed","text":"<pre><code># Problem\n\u274c Connection failed after 45ms: dial tcp: connect: connection refused\n\n# Solutions\n1. Check if the service is running\n2. Verify the base URL is correct\n3. Check firewall/network settings\n4. Verify API key is valid\n</code></pre>"},{"location":"cli/#authentication-failed","title":"Authentication Failed","text":"<pre><code># Problem\n\u274c Authentication failed: invalid credentials\n\n# Solutions\n1. Verify email and password are correct\n2. Check if account is active\n3. Try password reset if needed\n4. Verify API key has proper permissions\n</code></pre>"},{"location":"cli/#token-validation-failed","title":"Token Validation Failed","text":"<pre><code># Problem\n\u274c Token is invalid!\n\n# Solutions\n1. Check if token has expired\n2. Verify token format is correct\n3. Ensure required scopes are available\n4. Check if audience matches\n</code></pre>"},{"location":"cli/#configuration-issues","title":"Configuration Issues","text":"<pre><code># Problem\nError initializing client: missing base URL\n\n# Solutions\n1. Set ZTCLI_BASE_URL environment variable\n2. Use --url flag\n3. Create ~/.ztcli.yaml config file\n4. Check config file syntax\n</code></pre>"},{"location":"cli/#debug-mode","title":"Debug Mode","text":"<p>Enable verbose output for debugging:</p> <pre><code># Enable debug mode\nztcli --verbose system health\n\n# Or set environment variable\nexport ZTCLI_DEBUG=true\nztcli system health\n</code></pre>"},{"location":"cli/#getting-help","title":"Getting Help","text":"<pre><code># Show general help\nztcli --help\n\n# Show command-specific help\nztcli auth --help\nztcli auth login --help\nztcli token validate --help\n\n# Show version information\nztcli version  # (if implemented)\n</code></pre>"},{"location":"cli/#logging","title":"Logging","text":"<p>The CLI outputs to stderr for errors and stdout for results:</p> <pre><code># Capture only results\nztcli token validate &lt;token&gt; --output json &gt; token-info.json\n\n# Capture only errors\nztcli system health 2&gt; error.log\n\n# Capture both\nztcli auth login user@example.com &gt; result.json 2&gt; error.log\n</code></pre>"},{"location":"cli/#integration-with-makefile","title":"Integration with Makefile","text":"<p>The CLI integrates with the project's Makefile for common operations:</p> <pre><code># CLI help\nmake cli-help\n\n# Health check\nmake cli-health\n\n# System status\nmake cli-status\n\n# Generate API key\nmake cli-generate-key\n\n# Test connection\nmake cli-test-connection\n</code></pre> <p>For more detailed information about the Zero Trust Authentication system, see the main documentation and SDK documentation.</p>"},{"location":"database/bytebase/","title":"Bytebase Database Change Management","text":"<p>This project uses Bytebase for enterprise-grade PostgreSQL change management with GitOps integration.</p>"},{"location":"database/bytebase/#quick-start","title":"Quick Start","text":"<ol> <li> <p>Start Bytebase Service: <pre><code>make bytebase-start\n</code></pre></p> </li> <li> <p>Initialize Configuration: <pre><code>make bytebase-setup\n</code></pre></p> </li> <li> <p>Access Web Console:    Open http://localhost:5678 and login with <code>admin@bytebase.com</code> / <code>admin</code></p> </li> </ol>"},{"location":"database/bytebase/#automated-setup","title":"Automated Setup","text":"<p>The project includes automated Bytebase configuration:</p> <ul> <li>Docker Compose: Latest Bytebase image with persistent data</li> <li>Multi-Environment: Development, Staging, Production environments</li> <li>SQL Review Policies: Enforced naming conventions and safety rules</li> <li>GitOps Integration: VCS-based change management ready</li> </ul>"},{"location":"database/bytebase/#available-commands","title":"Available Commands","text":"<pre><code>make bytebase-start    # Start Bytebase service\nmake bytebase-stop     # Stop Bytebase service  \nmake bytebase-status   # Check service health\nmake bytebase-setup    # Run automated configuration\nmake bytebase-migrate  # Apply pending migrations\n</code></pre>"},{"location":"database/bytebase/#gitops-workflow","title":"GitOps Workflow","text":"<p>Bytebase is configured for GitOps with:</p> <ul> <li>File Structure: <code>{{ENV_ID}}/{{DB_NAME}}/{{VERSION}}__{{TYPE}}.sql</code></li> <li>Schema Templates: Latest schema tracking per environment</li> <li>Approval Policies: </li> <li>Development: Automatic approval</li> <li>Staging: Manual approval required</li> <li>Production: Multi-approver with issue tracking</li> </ul>"},{"location":"database/bytebase/#sql-review-policies","title":"SQL Review Policies","text":"<p>Enforced rules include:</p> <ul> <li>Snake_case naming for tables and columns</li> <li>Explicit WHERE clauses for DELETE/UPDATE</li> <li>No SELECT * in production queries</li> <li>Backward compatibility checks</li> <li>Commit transaction restrictions</li> </ul>"},{"location":"database/bytebase/#best-practices-2025","title":"Best Practices (2025)","text":"<ul> <li>Schema Versioning: All migrations in <code>db/migrations</code> with semantic versioning</li> <li>Review Process: Automated SQL review with configurable rule sets</li> <li>Rollback Planning: Comprehensive backup and rollback strategies</li> <li>Multi-Environment: Staged deployments with environment-specific policies</li> <li>Observability: Complete audit trails and migration monitoring</li> <li>Security: Role-based access control and compliance tracking</li> </ul>"},{"location":"database/bytebase/#configuration-files","title":"Configuration Files","text":"<ul> <li><code>docker-compose.bytebase.yml</code> - Service configuration</li> <li><code>scripts/bytebase-setup.sh</code> - Automated setup script</li> <li><code>bytebase/config/gitops.yml</code> - GitOps workflow configuration</li> </ul>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/","title":"Deployment Runbook","text":""},{"location":"deployment/DEPLOYMENT_RUNBOOK/#pre-deployment-checklist","title":"Pre-Deployment Checklist","text":""},{"location":"deployment/DEPLOYMENT_RUNBOOK/#code-quality-and-testing","title":"Code Quality and Testing","text":"<ul> <li> All tests passing (unit, integration, e2e)</li> <li> Code coverage meets minimum threshold (&gt;80%)</li> <li> No critical or high security vulnerabilities</li> <li> Static code analysis passes</li> <li> Dependencies are up to date</li> </ul>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#infrastructure-readiness","title":"Infrastructure Readiness","text":"<ul> <li> ArgoCD is operational</li> <li> Prometheus and Grafana are functioning</li> <li> Vault is accessible</li> <li> Required secrets are configured</li> <li> Cluster has sufficient resources</li> </ul>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#deployment-process","title":"Deployment Process","text":""},{"location":"deployment/DEPLOYMENT_RUNBOOK/#1-staging-deployment","title":"1. Staging Deployment","text":"<pre><code># Deployment is automated via GitHub Actions but can be triggered manually:\nargocd app sync zamaz-staging\n</code></pre>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#monitoring-deployment","title":"Monitoring Deployment","text":"<ol> <li>Check ArgoCD UI for sync status</li> <li>Monitor canary metrics in Grafana dashboard</li> <li>Verify endpoints:</li> <li>/health/live</li> <li>/health/ready</li> <li>/metrics</li> </ol>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#verification-steps","title":"Verification Steps","text":"<ol> <li>Check pod status and logs</li> <li>Verify metrics in Prometheus</li> <li>Run smoke tests</li> <li>Check error rates in Grafana</li> </ol>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#2-production-deployment","title":"2. Production Deployment","text":""},{"location":"deployment/DEPLOYMENT_RUNBOOK/#pre-production-checks","title":"Pre-Production Checks","text":"<ul> <li> Staging deployment successful for &gt;24 hours</li> <li> No open critical issues</li> <li> All security scans passed</li> <li> Load testing completed</li> <li> Rollback plan reviewed</li> </ul>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#deploy-to-production","title":"Deploy to Production","text":"<pre><code># Automated via GitHub Actions with manual approval\nargocd app sync zamaz-production\n</code></pre>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#production-verification","title":"Production Verification","text":"<ol> <li>Monitor canary deployment metrics</li> <li>Check error rates and latency</li> <li>Verify all health endpoints</li> <li>Monitor business metrics</li> </ol>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#rollback-procedures","title":"Rollback Procedures","text":""},{"location":"deployment/DEPLOYMENT_RUNBOOK/#automatic-rollbacks","title":"Automatic Rollbacks","text":"<p>The system will automatically rollback if: - Error rate exceeds 5% during canary - P99 latency exceeds 500ms - Health checks fail consistently</p>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#manual-rollback","title":"Manual Rollback","text":"<pre><code># Revert to previous version\nargocd app rollback zamaz-production\n</code></pre>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#monitoring-and-alerts","title":"Monitoring and Alerts","text":""},{"location":"deployment/DEPLOYMENT_RUNBOOK/#key-metrics-to-monitor","title":"Key Metrics to Monitor","text":"<ul> <li>Request success rate</li> <li>Latency (p50, p90, p99)</li> <li>Error rates by type</li> <li>Resource utilization</li> <li>Authentication success/failure rates</li> </ul>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#alert-response","title":"Alert Response","text":"<ol> <li>Check Grafana dashboards</li> <li>Review application logs</li> <li>Analyze error patterns</li> <li>Escalate if needed per severity</li> </ol>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#troubleshooting-guide","title":"Troubleshooting Guide","text":""},{"location":"deployment/DEPLOYMENT_RUNBOOK/#common-issues","title":"Common Issues","text":""},{"location":"deployment/DEPLOYMENT_RUNBOOK/#high-error-rate","title":"High Error Rate","text":"<ol> <li>Check application logs</li> <li>Verify external dependencies</li> <li>Review recent changes</li> <li>Check resource utilization</li> </ol>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#performance-issues","title":"Performance Issues","text":"<ol> <li>Monitor resource usage</li> <li>Check database performance</li> <li>Review network metrics</li> <li>Analyze trace data</li> </ol>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#authentication-failures","title":"Authentication Failures","text":"<ol> <li>Verify Vault connectivity</li> <li>Check certificate validity</li> <li>Review auth service logs</li> <li>Validate RBAC configuration</li> </ol>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#disaster-recovery","title":"Disaster Recovery","text":""},{"location":"deployment/DEPLOYMENT_RUNBOOK/#database-recovery","title":"Database Recovery","text":"<ol> <li>Stop application pods</li> <li>Restore from backup</li> <li>Verify data integrity</li> <li>Restart application</li> </ol>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#certificate-rotation","title":"Certificate Rotation","text":"<ol> <li>Generate new certificates</li> <li>Update Vault secrets</li> <li>Rotate pods to pick up new certs</li> </ol>"},{"location":"deployment/DEPLOYMENT_RUNBOOK/#complete-service-recovery","title":"Complete Service Recovery","text":"<ol> <li>Identify failure point</li> <li>Restore from last known good state</li> <li>Verify system integrity</li> <li>Update documentation with lessons learned</li> </ol>"},{"location":"deployment/docker/","title":"Docker Deployment Guide","text":"<p>This guide covers deploying the Zero Trust Auth MVP using Docker and Docker Compose for both development and production environments.</p>"},{"location":"deployment/docker/#overview","title":"\ud83d\udc33 Overview","text":"<p>The application supports multiple Docker deployment strategies:</p> <ol> <li>Development: Docker Compose with hot reload</li> <li>Production: Optimized multi-stage Docker images</li> <li>Hybrid: Local development with containerized services</li> </ol>"},{"location":"deployment/docker/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"deployment/docker/#development-deployment","title":"Development Deployment","text":"<pre><code># Clone repository\ngit clone &lt;repository-url&gt;\ncd root-zamaz\n\n# Start all services\nmake dev-up\n\n# Check service status\ndocker ps\n\n# View logs\nmake logs\n\n# Stop services\nmake dev-down\n</code></pre>"},{"location":"deployment/docker/#production-deployment","title":"Production Deployment","text":"<pre><code># Build production image\ndocker build -t mvp-auth:latest .\n\n# Run with production configuration\ndocker run -d \\\n  --name mvp-auth-prod \\\n  --restart=unless-stopped \\\n  -p 8080:8080 \\\n  -e DATABASE_URL=postgres://user:pass@host:5432/db \\\n  -e REDIS_URL=redis://redis:6379 \\\n  -e JWT_SECRET=your-production-secret \\\n  mvp-auth:latest\n</code></pre>"},{"location":"deployment/docker/#docker-configuration-files","title":"\ud83d\udcc1 Docker Configuration Files","text":""},{"location":"deployment/docker/#main-docker-compose-docker-composeyml","title":"Main Docker Compose (<code>docker-compose.yml</code>)","text":"<pre><code>services:\n  # Core Infrastructure\n  envoy:\n    image: envoyproxy/envoy:v1.28-latest\n    platform: linux/amd64\n    ports:\n      - \"8080:8080\"\n      - \"8443:8443\"\n      - \"9901:9901\"\n    volumes:\n      - ./envoy/configs:/etc/envoy\n      - ./envoy/certs:/etc/ssl/certs\n    depends_on:\n      - jaeger\n      - prometheus\n    networks:\n      - mvp-network\n\n  # SPIRE Infrastructure\n  spire-server:\n    image: ghcr.io/spiffe/spire-server:1.8.5\n    hostname: spire-server\n    ports:\n      - \"8081:8081\"\n    volumes:\n      - ./deployments/spire/server:/opt/spire/conf/server\n      - spire-server-data:/opt/spire/data\n    command: [\"-config\", \"/opt/spire/conf/server/server.conf\"]\n    networks:\n      - mvp-network\n\n  spire-agent:\n    image: ghcr.io/spiffe/spire-agent:1.8.5\n    hostname: spire-agent\n    depends_on:\n      - spire-server\n    volumes:\n      - ./deployments/spire/agent:/opt/spire/conf/agent\n      - spire-agent-socket:/tmp/spire-agent/public\n    command: [\"-config\", \"/opt/spire/conf/agent/agent.conf\"]\n    networks:\n      - mvp-network\n\n  # Database\n  postgres:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_DB: mvp_db\n      POSTGRES_USER: mvp_user\n      POSTGRES_PASSWORD: mvp_password\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n      - ./scripts/sql/init:/docker-entrypoint-initdb.d\n    ports:\n      - \"5432:5432\"\n    networks:\n      - mvp-network\n\n  # Cache\n  redis:\n    image: redis:7-alpine\n    command: redis-server --appendonly yes\n    volumes:\n      - redis-data:/data\n    ports:\n      - \"6379:6379\"\n    networks:\n      - mvp-network\n\n  # Message Queue\n  nats:\n    image: nats:2.10-alpine\n    command: [\"-js\", \"-m\", \"8222\"]\n    volumes:\n      - nats-data:/data\n    ports:\n      - \"4222:4222\"\n      - \"8222:8222\"\n    networks:\n      - mvp-network\n\n  # Observability Stack\n  prometheus:\n    image: prom/prometheus:v2.47.0\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./observability/prometheus:/etc/prometheus\n      - prometheus-data:/prometheus\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\n      - '--web.console.templates=/etc/prometheus/consoles'\n      - '--storage.tsdb.retention.time=200h'\n      - '--web.enable-lifecycle'\n    networks:\n      - mvp-network\n\n  grafana:\n    image: grafana/grafana:10.1.0\n    ports:\n      - \"3000:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n      - GF_USERS_ALLOW_SIGN_UP=false\n      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource\n    volumes:\n      - grafana-data:/var/lib/grafana\n      - ./observability/grafana/provisioning:/etc/grafana/provisioning\n      - ./observability/dashboards:/var/lib/grafana/dashboards\n    networks:\n      - mvp-network\n\n  jaeger:\n    image: jaegertracing/all-in-one:1.49\n    ports:\n      - \"5775:5775/udp\"\n      - \"6831:6831/udp\"\n      - \"6832:6832/udp\"\n      - \"5778:5778\"\n      - \"16686:16686\"\n      - \"14268:14268\"\n      - \"14250:14250\"\n      - \"9411:9411\"\n    environment:\n      - COLLECTOR_ZIPKIN_HOST_PORT=:9411\n    networks:\n      - mvp-network\n\n  loki:\n    image: grafana/loki:2.9.0\n    ports:\n      - \"3100:3100\"\n    volumes:\n      - ./observability/loki/config.yml:/etc/loki/local-config.yaml\n      - loki-data:/loki\n    command: -config.file=/etc/loki/local-config.yaml\n    networks:\n      - mvp-network\n\n  promtail:\n    image: grafana/promtail:2.9.0\n    volumes:\n      - /var/log:/var/log:ro\n      - /var/lib/docker/containers:/var/lib/docker/containers:ro\n      - ./observability/promtail/config.yml:/etc/promtail/config.yml\n    command: -config.file=/etc/promtail/config.yml\n    networks:\n      - mvp-network\n\nvolumes:\n  postgres-data:\n  redis-data:\n  nats-data:\n  prometheus-data:\n  grafana-data:\n  loki-data:\n  spire-server-data:\n  spire-agent-socket:\n\nnetworks:\n  mvp-network:\n    driver: bridge\n</code></pre>"},{"location":"deployment/docker/#application-dockerfile","title":"Application Dockerfile","text":"<pre><code># Multi-stage Dockerfile for MVP Zero Trust Auth System\n# Stage 1: Build stage\nFROM golang:1.23-alpine AS builder\n\n# Install build dependencies\nRUN apk add --no-cache git ca-certificates tzdata\n\n# Set working directory\nWORKDIR /app\n\n# Copy go mod files first for better caching\nCOPY go.mod go.sum ./\nRUN go mod download\n\n# Copy source code\nCOPY . .\n\n# Build arguments\nARG VERSION=dev\nARG COMMIT_SHA=unknown\nARG BUILD_TIME=unknown\n\n# Build the application\nRUN CGO_ENABLED=0 GOOS=linux go build \\\n    -ldflags \"-X main.version=${VERSION} -X main.commit=${COMMIT_SHA} -X main.buildTime=${BUILD_TIME} -w -s\" \\\n    -a -installsuffix cgo \\\n    -o mvp-auth ./cmd/server\n\n# Stage 2: Runtime stage\nFROM alpine:3.18\n\n# Install runtime dependencies\nRUN apk --no-cache add ca-certificates tzdata curl &amp;&amp; \\\n    adduser -D -s /bin/sh -u 1001 appuser\n\n# Set working directory\nWORKDIR /app\n\n# Copy binary from builder\nCOPY --from=builder /app/mvp-auth .\nCOPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\n\n# Copy configuration files if they exist\nCOPY --from=builder /app/configs/ ./configs/ 2&gt;/dev/null || true\n\n# Create necessary directories\nRUN mkdir -p /app/logs /app/data &amp;&amp; \\\n    chown -R appuser:appuser /app\n\n# Switch to non-root user\nUSER appuser\n\n# Expose ports\nEXPOSE 8080 9000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:8080/health || exit 1\n\n# Set entrypoint\nENTRYPOINT [\"./mvp-auth\"]\n</code></pre>"},{"location":"deployment/docker/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"deployment/docker/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file for local development:</p> <pre><code># Database Configuration\nDATABASE_HOST=postgres\nDATABASE_PORT=5432\nDATABASE_NAME=mvp_db\nDATABASE_USER=mvp_user\nDATABASE_PASSWORD=mvp_password\nDATABASE_SSL_MODE=disable\n\n# Redis Configuration\nREDIS_HOST=redis\nREDIS_PORT=6379\nREDIS_PASSWORD=\nREDIS_DATABASE=0\n\n# NATS Configuration\nNATS_URL=nats://nats:4222\n\n# JWT Configuration\nJWT_SECRET=your-super-secret-jwt-key-change-in-production\nJWT_ACCESS_TOKEN_EXPIRATION=24h\nJWT_REFRESH_TOKEN_EXPIRATION=7d\n\n# Server Configuration\nHTTP_HOST=0.0.0.0\nHTTP_PORT=8080\nHTTP_READ_TIMEOUT=30s\nHTTP_WRITE_TIMEOUT=30s\n\n# Observability\nJAEGER_ENDPOINT=http://jaeger:14268/api/traces\nPROMETHEUS_PORT=9000\nLOG_LEVEL=info\nLOG_FORMAT=json\n\n# Security\nCORS_ALLOWED_ORIGINS=http://localhost:5175,http://localhost:3000\nDISABLE_AUTH=false\n\n# Environment\nENVIRONMENT=development\nSERVICE_NAME=mvp-zero-trust-auth\nSERVICE_VERSION=1.0.0\n</code></pre>"},{"location":"deployment/docker/#production-environment-variables","title":"Production Environment Variables","text":"<pre><code># Database Configuration (use managed database in production)\nDATABASE_URL=postgres://user:password@prod-db-host:5432/mvp_db?sslmode=require\n\n# Redis Configuration (use managed Redis in production)\nREDIS_URL=redis://prod-redis-host:6379\n\n# JWT Configuration (use strong secrets)\nJWT_SECRET=${STRONG_RANDOM_SECRET}\nJWT_ACCESS_TOKEN_EXPIRATION=1h\nJWT_REFRESH_TOKEN_EXPIRATION=24h\n\n# Server Configuration\nHTTP_HOST=0.0.0.0\nHTTP_PORT=8080\nHTTP_READ_TIMEOUT=15s\nHTTP_WRITE_TIMEOUT=15s\n\n# TLS Configuration\nTLS_ENABLED=true\nTLS_CERT_FILE=/etc/ssl/certs/server.crt\nTLS_KEY_FILE=/etc/ssl/private/server.key\n\n# Observability\nJAEGER_ENDPOINT=https://jaeger.monitoring.svc.cluster.local:14268/api/traces\nPROMETHEUS_PORT=9000\nLOG_LEVEL=warn\nLOG_FORMAT=json\n\n# Security\nCORS_ALLOWED_ORIGINS=https://yourdomain.com\nDISABLE_AUTH=false\n\n# Environment\nENVIRONMENT=production\nSERVICE_NAME=mvp-zero-trust-auth\nSERVICE_VERSION=${BUILD_VERSION}\n</code></pre>"},{"location":"deployment/docker/#deployment-strategies","title":"\ud83d\ude80 Deployment Strategies","text":""},{"location":"deployment/docker/#1-development-environment","title":"1. Development Environment","text":"<pre><code># Start development environment\nmake dev-up\n\n# Check all services are running\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"\n\n# Access services\nopen http://localhost:3000  # Grafana\nopen http://localhost:9090  # Prometheus\nopen http://localhost:16686 # Jaeger\n</code></pre>"},{"location":"deployment/docker/#2-production-single-host","title":"2. Production Single-Host","text":"<pre><code># Create production directory\nmkdir -p /opt/mvp-auth\ncd /opt/mvp-auth\n\n# Create production docker-compose\ncat &gt; docker-compose.prod.yml &lt;&lt; 'EOF'\nversion: '3.8'\nservices:\n  mvp-auth:\n    image: mvp-auth:latest\n    restart: unless-stopped\n    ports:\n      - \"80:8080\"\n      - \"443:8080\"  # Configure TLS termination\n    environment:\n      - DATABASE_URL=${DATABASE_URL}\n      - REDIS_URL=${REDIS_URL}\n      - JWT_SECRET=${JWT_SECRET}\n      - ENVIRONMENT=production\n    volumes:\n      - ./logs:/app/logs\n      - ./certs:/etc/ssl/certs:ro\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n    depends_on:\n      - postgres\n      - redis\n\n  postgres:\n    image: postgres:15-alpine\n    restart: unless-stopped\n    environment:\n      - POSTGRES_DB=mvp_db\n      - POSTGRES_USER=${DB_USER}\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n\n  redis:\n    image: redis:7-alpine\n    restart: unless-stopped\n    command: redis-server --requirepass ${REDIS_PASSWORD}\n    volumes:\n      - redis-data:/data\n\nvolumes:\n  postgres-data:\n  redis-data:\nEOF\n\n# Start production services\ndocker-compose -f docker-compose.prod.yml up -d\n</code></pre>"},{"location":"deployment/docker/#3-production-with-reverse-proxy","title":"3. Production with Reverse Proxy","text":"<pre><code># /etc/nginx/sites-available/mvp-auth\nserver {\n    listen 80;\n    server_name auth.yourdomain.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name auth.yourdomain.com;\n\n    ssl_certificate /etc/ssl/certs/auth.yourdomain.com.crt;\n    ssl_certificate_key /etc/ssl/private/auth.yourdomain.com.key;\n\n    # Security headers\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options DENY;\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\";\n\n    location / {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # Health check endpoint\n        location /health {\n            access_log off;\n            proxy_pass http://127.0.0.1:8080/health;\n        }\n    }\n}\n</code></pre>"},{"location":"deployment/docker/#4-multi-host-with-docker-swarm","title":"4. Multi-Host with Docker Swarm","text":"<pre><code># docker-stack.yml\nversion: '3.8'\n\nservices:\n  mvp-auth:\n    image: mvp-auth:latest\n    deploy:\n      replicas: 3\n      update_config:\n        parallelism: 1\n        delay: 10s\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n      placement:\n        constraints:\n          - node.role == worker\n    ports:\n      - \"8080:8080\"\n    environment:\n      - DATABASE_URL=${DATABASE_URL}\n      - REDIS_URL=${REDIS_URL}\n      - JWT_SECRET=${JWT_SECRET}\n    networks:\n      - mvp-network\n\n  postgres:\n    image: postgres:15-alpine\n    deploy:\n      replicas: 1\n      placement:\n        constraints:\n          - node.role == manager\n    environment:\n      - POSTGRES_DB=mvp_db\n      - POSTGRES_USER=${DB_USER}\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    networks:\n      - mvp-network\n\n  redis:\n    image: redis:7-alpine\n    deploy:\n      replicas: 1\n      placement:\n        constraints:\n          - node.role == manager\n    command: redis-server --requirepass ${REDIS_PASSWORD}\n    volumes:\n      - redis-data:/data\n    networks:\n      - mvp-network\n\nvolumes:\n  postgres-data:\n  redis-data:\n\nnetworks:\n  mvp-network:\n    driver: overlay\n    attachable: true\n</code></pre> <p>Deploy with Docker Swarm:</p> <pre><code># Initialize swarm\ndocker swarm init\n\n# Deploy stack\ndocker stack deploy -c docker-stack.yml mvp-auth\n\n# Check services\ndocker service ls\ndocker stack ps mvp-auth\n</code></pre>"},{"location":"deployment/docker/#monitoring-health-checks","title":"\ud83d\udd0d Monitoring &amp; Health Checks","text":""},{"location":"deployment/docker/#health-check-configuration","title":"Health Check Configuration","text":"<pre><code># In docker-compose.yml\nhealthcheck:\n  test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health\"]\n  interval: 30s\n  timeout: 10s\n  retries: 3\n  start_period: 40s\n</code></pre>"},{"location":"deployment/docker/#monitoring-with-docker","title":"Monitoring with Docker","text":"<pre><code># Check container health\ndocker ps --filter \"health=healthy\"\ndocker ps --filter \"health=unhealthy\"\n\n# View container logs\ndocker logs mvp-zero-trust-auth-envoy-1 --tail 100 --follow\n\n# Monitor resource usage\ndocker stats\n\n# Check container details\ndocker inspect mvp-zero-trust-auth-envoy-1\n</code></pre>"},{"location":"deployment/docker/#log-management","title":"Log Management","text":"<pre><code># Configure log rotation\nlogging:\n  driver: \"json-file\"\n  options:\n    max-size: \"10m\"\n    max-file: \"3\"\n</code></pre>"},{"location":"deployment/docker/#security-considerations","title":"\ud83d\udd12 Security Considerations","text":""},{"location":"deployment/docker/#1-secrets-management","title":"1. Secrets Management","text":"<pre><code># Use Docker secrets in production\necho \"your-jwt-secret\" | docker secret create jwt_secret -\necho \"your-db-password\" | docker secret create db_password -\n\n# Reference in docker-compose\nservices:\n  mvp-auth:\n    secrets:\n      - jwt_secret\n      - db_password\n    environment:\n      - JWT_SECRET_FILE=/run/secrets/jwt_secret\n      - DB_PASSWORD_FILE=/run/secrets/db_password\n\nsecrets:\n  jwt_secret:\n    external: true\n  db_password:\n    external: true\n</code></pre>"},{"location":"deployment/docker/#2-network-security","title":"2. Network Security","text":"<pre><code># Isolate networks\nnetworks:\n  frontend:\n    driver: bridge\n  backend:\n    driver: bridge\n    internal: true  # No external access\n\nservices:\n  mvp-auth:\n    networks:\n      - frontend\n      - backend\n\n  postgres:\n    networks:\n      - backend  # Only internal access\n</code></pre>"},{"location":"deployment/docker/#3-container-security","title":"3. Container Security","text":"<pre><code># Security best practices\nFROM alpine:3.18\n\n# Create non-root user\nRUN adduser -D -s /bin/sh -u 1001 appuser\n\n# Remove unnecessary packages\nRUN apk del --purge build-dependencies\n\n# Use read-only filesystem\ndocker run --read-only --tmpfs /tmp mvp-auth:latest\n\n# Limit resources\ndocker run --memory=512m --cpus=1.0 mvp-auth:latest\n\n# Drop capabilities\ndocker run --cap-drop=ALL --cap-add=NET_BIND_SERVICE mvp-auth:latest\n</code></pre>"},{"location":"deployment/docker/#testing-docker-deployment","title":"\ud83e\uddea Testing Docker Deployment","text":""},{"location":"deployment/docker/#development-testing","title":"Development Testing","text":"<pre><code># Start development environment\nmake dev-up\n\n# Wait for services to be ready\n./scripts/wait-for-services.sh\n\n# Run integration tests\nmake test-integration\n\n# Test API endpoints\ncurl http://localhost:8080/health\ncurl http://localhost:8080/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"admin\",\"password\":\"password\"}'\n</code></pre>"},{"location":"deployment/docker/#production-testing","title":"Production Testing","text":"<pre><code># Test production image\ndocker build -t mvp-auth:test .\n\n# Run production tests\ndocker run --rm \\\n  -e DATABASE_URL=postgres://test:test@host:5432/test \\\n  -e REDIS_URL=redis://redis:6379 \\\n  -e JWT_SECRET=test-secret \\\n  mvp-auth:test \\\n  /app/mvp-auth --test\n\n# Load testing\ndocker run --rm \\\n  --network=host \\\n  loadimpact/k6 run \\\n  -e BASE_URL=http://localhost:8080 \\\n  tests/load/basic-load-test.js\n</code></pre>"},{"location":"deployment/docker/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"deployment/docker/#common-issues","title":"Common Issues","text":""},{"location":"deployment/docker/#1-container-wont-start","title":"1. Container Won't Start","text":"<pre><code># Check logs\ndocker logs container-name\n\n# Check health status\ndocker inspect --format='{{.State.Health.Status}}' container-name\n\n# Check resource constraints\ndocker stats container-name\n</code></pre>"},{"location":"deployment/docker/#2-service-discovery-issues","title":"2. Service Discovery Issues","text":"<pre><code># Check network connectivity\ndocker exec container-name ping other-container\n\n# Check DNS resolution\ndocker exec container-name nslookup postgres\n\n# List networks\ndocker network ls\ndocker network inspect mvp-zero-trust-auth_mvp-network\n</code></pre>"},{"location":"deployment/docker/#3-volume-mount-issues","title":"3. Volume Mount Issues","text":"<pre><code># Check volume mounts\ndocker inspect container-name | grep -A 10 \"Mounts\"\n\n# Check permissions\ndocker exec container-name ls -la /app/data\n\n# Fix permissions\ndocker exec --user root container-name chown -R appuser:appuser /app/data\n</code></pre>"},{"location":"deployment/docker/#4-database-connection-issues","title":"4. Database Connection Issues","text":"<pre><code># Test database connectivity\ndocker exec postgres-container psql -U mvp_user -d mvp_db -c \"SELECT 1;\"\n\n# Check database logs\ndocker logs postgres-container\n\n# Verify environment variables\ndocker exec mvp-auth-container env | grep DATABASE\n</code></pre>"},{"location":"deployment/docker/#performance-tuning","title":"Performance Tuning","text":"<pre><code># Resource limits in docker-compose\nservices:\n  mvp-auth:\n    deploy:\n      resources:\n        limits:\n          cpus: '1.0'\n          memory: 512M\n        reservations:\n          cpus: '0.5'\n          memory: 256M\n</code></pre>"},{"location":"deployment/docker/#backup-and-recovery","title":"Backup and Recovery","text":"<pre><code># Database backup\ndocker exec postgres-container pg_dump -U mvp_user mvp_db &gt; backup.sql\n\n# Volume backup\ndocker run --rm \\\n  -v mvp_postgres_data:/data \\\n  -v $(pwd):/backup \\\n  alpine tar czf /backup/postgres-backup.tar.gz /data\n\n# Restore database\ndocker exec -i postgres-container psql -U mvp_user mvp_db &lt; backup.sql\n</code></pre>"},{"location":"deployment/docker/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Docker Best Practices</li> <li>Docker Compose Documentation</li> <li>Container Security</li> <li>Production Deployment</li> </ul>"},{"location":"deployment/kubernetes/","title":"Kubernetes Deployment Guide","text":"<p>This guide covers deploying the Zero Trust Auth MVP on Kubernetes for production environments with high availability, scalability, and security.</p>"},{"location":"deployment/kubernetes/#overview","title":"\ud83d\udea2 Overview","text":"<p>The Kubernetes deployment includes:</p> <ul> <li>Application Pods: Horizontally scalable auth service</li> <li>Database: PostgreSQL with persistent storage</li> <li>Cache: Redis cluster for session management</li> <li>Observability: Prometheus, Grafana, Jaeger</li> <li>Security: SPIRE for workload identity</li> <li>Networking: Ingress with TLS termination</li> <li>Monitoring: Health checks and auto-scaling</li> </ul>"},{"location":"deployment/kubernetes/#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<pre><code>graph TB\n    Internet --&gt; Ingress[Ingress Controller]\n    Ingress --&gt; Service[Auth Service]\n    Service --&gt; Pod1[Auth Pod 1]\n    Service --&gt; Pod2[Auth Pod 2]\n    Service --&gt; Pod3[Auth Pod 3]\n\n    Pod1 --&gt; DB[(PostgreSQL)]\n    Pod2 --&gt; DB\n    Pod3 --&gt; DB\n\n    Pod1 --&gt; Redis[(Redis Cluster)]\n    Pod2 --&gt; Redis\n    Pod3 --&gt; Redis\n\n    subgraph \"Observability\"\n        Prometheus[Prometheus]\n        Grafana[Grafana]\n        Jaeger[Jaeger]\n    end\n\n    subgraph \"SPIRE\"\n        SpireServer[SPIRE Server]\n        SpireAgent[SPIRE Agent]\n    end\n\n    Pod1 --&gt; SpireAgent\n    Pod2 --&gt; SpireAgent\n    Pod3 --&gt; SpireAgent</code></pre>"},{"location":"deployment/kubernetes/#kubernetes-manifests","title":"\ud83d\udcc1 Kubernetes Manifests","text":""},{"location":"deployment/kubernetes/#namespace","title":"Namespace","text":"<pre><code># kubernetes/apps/zamaz/base/namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: mvp-auth\n  labels:\n    name: mvp-auth\n    app.kubernetes.io/name: mvp-zero-trust-auth\n    app.kubernetes.io/component: namespace\n</code></pre>"},{"location":"deployment/kubernetes/#configmap","title":"ConfigMap","text":"<pre><code># kubernetes/apps/zamaz/base/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mvp-auth-config\n  namespace: mvp-auth\ndata:\n  # Application configuration\n  HTTP_HOST: \"0.0.0.0\"\n  HTTP_PORT: \"8080\"\n  HTTP_READ_TIMEOUT: \"30s\"\n  HTTP_WRITE_TIMEOUT: \"30s\"\n\n  # Database configuration\n  DATABASE_HOST: \"postgres-service\"\n  DATABASE_PORT: \"5432\"\n  DATABASE_NAME: \"mvp_db\"\n  DATABASE_USER: \"mvp_user\"\n  DATABASE_SSL_MODE: \"require\"\n\n  # Redis configuration\n  REDIS_HOST: \"redis-service\"\n  REDIS_PORT: \"6379\"\n  REDIS_DATABASE: \"0\"\n\n  # Observability configuration\n  JAEGER_ENDPOINT: \"http://jaeger-collector:14268/api/traces\"\n  PROMETHEUS_PORT: \"9000\"\n  LOG_LEVEL: \"info\"\n  LOG_FORMAT: \"json\"\n\n  # Security configuration\n  CORS_ALLOWED_ORIGINS: \"https://auth.yourdomain.com\"\n  DISABLE_AUTH: \"false\"\n\n  # Environment\n  ENVIRONMENT: \"production\"\n  SERVICE_NAME: \"mvp-zero-trust-auth\"\n  SERVICE_VERSION: \"1.0.0\"\n</code></pre>"},{"location":"deployment/kubernetes/#secrets","title":"Secrets","text":"<pre><code># kubernetes/apps/zamaz/base/secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mvp-auth-secrets\n  namespace: mvp-auth\ntype: Opaque\ndata:\n  # Base64 encoded values (use proper secret management in production)\n  jwt-secret: eW91ci1zdXBlci1zZWNyZXQtand0LWtleQ==\n  database-password: bXZwX3Bhc3N3b3Jk\n  redis-password: cmVkaXNfcGFzc3dvcmQ=\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: postgres-secrets\n  namespace: mvp-auth\ntype: Opaque\ndata:\n  postgres-password: bXZwX3Bhc3N3b3Jk\n  postgres-user: bXZwX3VzZXI=\n  postgres-db: bXZwX2Ri\n</code></pre>"},{"location":"deployment/kubernetes/#deployment","title":"Deployment","text":"<pre><code># kubernetes/apps/zamaz/base/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mvp-auth\n  namespace: mvp-auth\n  labels:\n    app: mvp-auth\n    version: v1\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: mvp-auth\n  template:\n    metadata:\n      labels:\n        app: mvp-auth\n        version: v1\n      annotations:\n        prometheus.io/scrape: \"true\"\n        prometheus.io/port: \"9000\"\n        prometheus.io/path: \"/metrics\"\n    spec:\n      serviceAccountName: mvp-auth\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1001\n        fsGroup: 1001\n      containers:\n      - name: mvp-auth\n        image: mvp-auth:latest\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 8080\n          name: http\n          protocol: TCP\n        - containerPort: 9000\n          name: metrics\n          protocol: TCP\n        env:\n        # Configuration from ConfigMap\n        - name: HTTP_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: mvp-auth-config\n              key: HTTP_HOST\n        - name: HTTP_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: mvp-auth-config\n              key: HTTP_PORT\n        - name: DATABASE_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: mvp-auth-config\n              key: DATABASE_HOST\n        - name: DATABASE_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: mvp-auth-config\n              key: DATABASE_PORT\n        - name: DATABASE_NAME\n          valueFrom:\n            configMapKeyRef:\n              name: mvp-auth-config\n              key: DATABASE_NAME\n        - name: DATABASE_USER\n          valueFrom:\n            configMapKeyRef:\n              name: mvp-auth-config\n              key: DATABASE_USER\n        - name: REDIS_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: mvp-auth-config\n              key: REDIS_HOST\n        - name: REDIS_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: mvp-auth-config\n              key: REDIS_PORT\n\n        # Secrets\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: mvp-auth-secrets\n              key: jwt-secret\n        - name: DATABASE_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mvp-auth-secrets\n              key: database-password\n        - name: REDIS_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mvp-auth-secrets\n              key: redis-password\n\n        # Resource limits\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n\n        # Health checks\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n\n        # Startup probe for slow starting containers\n        startupProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 10\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 6\n\n        # Security context\n        securityContext:\n          allowPrivilegeEscalation: false\n          runAsNonRoot: true\n          runAsUser: 1001\n          capabilities:\n            drop:\n              - ALL\n          readOnlyRootFilesystem: true\n\n        # Volume mounts\n        volumeMounts:\n        - name: tmp\n          mountPath: /tmp\n        - name: logs\n          mountPath: /app/logs\n\n      volumes:\n      - name: tmp\n        emptyDir: {}\n      - name: logs\n        emptyDir: {}\n\n      # Pod disruption budget\n      affinity:\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - weight: 100\n            podAffinityTerm:\n              labelSelector:\n                matchExpressions:\n                - key: app\n                  operator: In\n                  values:\n                  - mvp-auth\n              topologyKey: kubernetes.io/hostname\n</code></pre>"},{"location":"deployment/kubernetes/#service","title":"Service","text":"<pre><code># kubernetes/apps/zamaz/base/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: mvp-auth-service\n  namespace: mvp-auth\n  labels:\n    app: mvp-auth\nspec:\n  type: ClusterIP\n  ports:\n  - port: 8080\n    targetPort: 8080\n    protocol: TCP\n    name: http\n  - port: 9000\n    targetPort: 9000\n    protocol: TCP\n    name: metrics\n  selector:\n    app: mvp-auth\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres-service\n  namespace: mvp-auth\n  labels:\n    app: postgres\nspec:\n  type: ClusterIP\n  ports:\n  - port: 5432\n    targetPort: 5432\n    protocol: TCP\n    name: postgres\n  selector:\n    app: postgres\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis-service\n  namespace: mvp-auth\n  labels:\n    app: redis\nspec:\n  type: ClusterIP\n  ports:\n  - port: 6379\n    targetPort: 6379\n    protocol: TCP\n    name: redis\n  selector:\n    app: redis\n</code></pre>"},{"location":"deployment/kubernetes/#rbac","title":"RBAC","text":"<pre><code># kubernetes/apps/zamaz/base/rbac.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: mvp-auth\n  namespace: mvp-auth\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: mvp-auth\n  name: mvp-auth-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"services\", \"endpoints\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\", \"replicasets\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: mvp-auth-rolebinding\n  namespace: mvp-auth\nsubjects:\n- kind: ServiceAccount\n  name: mvp-auth\n  namespace: mvp-auth\nroleRef:\n  kind: Role\n  name: mvp-auth-role\n  apiGroup: rbac.authorization.k8s.io\n</code></pre>"},{"location":"deployment/kubernetes/#postgresql-deployment","title":"PostgreSQL Deployment","text":"<pre><code># kubernetes/apps/zamaz/base/postgres.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: mvp-auth\n  labels:\n    app: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: postgres-db\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: postgres-user\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: postgres-password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - $(POSTGRES_USER)\n            - -d\n            - $(POSTGRES_DB)\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - pg_isready\n            - -U\n            - $(POSTGRES_USER)\n            - -d\n            - $(POSTGRES_DB)\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: postgres-pvc\n  namespace: mvp-auth\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n  storageClassName: fast-ssd  # Use appropriate storage class\n</code></pre>"},{"location":"deployment/kubernetes/#redis-deployment","title":"Redis Deployment","text":"<pre><code># kubernetes/apps/zamaz/base/redis.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: mvp-auth\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        command:\n        - redis-server\n        - --requirepass\n        - $(REDIS_PASSWORD)\n        - --appendonly\n        - \"yes\"\n        env:\n        - name: REDIS_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mvp-auth-secrets\n              key: redis-password\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"256Mi\"\n            cpu: \"200m\"\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: redis-pvc\n\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: redis-pvc\n  namespace: mvp-auth\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 5Gi\n  storageClassName: fast-ssd\n</code></pre>"},{"location":"deployment/kubernetes/#ingress","title":"Ingress","text":"<pre><code># kubernetes/apps/zamaz/base/ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: mvp-auth-ingress\n  namespace: mvp-auth\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/force-ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/backend-protocol: \"HTTP\"\n    nginx.ingress.kubernetes.io/proxy-body-size: \"10m\"\n    nginx.ingress.kubernetes.io/rate-limit: \"100\"\n    nginx.ingress.kubernetes.io/rate-limit-window: \"1m\"\nspec:\n  tls:\n  - hosts:\n    - auth.yourdomain.com\n    secretName: mvp-auth-tls\n  rules:\n  - host: auth.yourdomain.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: mvp-auth-service\n            port:\n              number: 8080\n</code></pre>"},{"location":"deployment/kubernetes/#kustomization","title":"\ud83d\udd27 Kustomization","text":""},{"location":"deployment/kubernetes/#base-kustomization","title":"Base Kustomization","text":"<pre><code># kubernetes/apps/zamaz/base/kustomization.yaml\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nnamespace: mvp-auth\n\nresources:\n- namespace.yaml\n- configmap.yaml\n- secrets.yaml\n- rbac.yaml\n- deployment.yaml\n- service.yaml\n- postgres.yaml\n- redis.yaml\n- ingress.yaml\n- network-policy.yaml\n\ncommonLabels:\n  app.kubernetes.io/name: mvp-zero-trust-auth\n  app.kubernetes.io/instance: production\n  app.kubernetes.io/version: \"1.0.0\"\n  app.kubernetes.io/component: authentication\n  app.kubernetes.io/part-of: zero-trust-platform\n\nimages:\n- name: mvp-auth\n  newTag: latest\n</code></pre>"},{"location":"deployment/kubernetes/#production-overlay","title":"Production Overlay","text":"<pre><code># kubernetes/apps/zamaz/overlays/production/kustomization.yaml\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nnamespace: mvp-auth-prod\n\nnamePrefix: prod-\n\nresources:\n- ../../base\n\npatchesStrategicMerge:\n- deployment-patch.yaml\n- configmap-patch.yaml\n\nreplicas:\n- name: mvp-auth\n  count: 5\n\nimages:\n- name: mvp-auth\n  newTag: v1.0.0\n\nconfigMapGenerator:\n- name: mvp-auth-config\n  behavior: merge\n  envs:\n  - config.env\n\nsecretGenerator:\n- name: mvp-auth-secrets\n  behavior: replace\n  envs:\n  - secrets.env\n</code></pre>"},{"location":"deployment/kubernetes/#production-patches","title":"Production Patches","text":"<pre><code># kubernetes/apps/zamaz/overlays/production/deployment-patch.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mvp-auth\nspec:\n  template:\n    spec:\n      containers:\n      - name: mvp-auth\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"1000m\"\n        env:\n        - name: ENVIRONMENT\n          value: \"production\"\n        - name: LOG_LEVEL\n          value: \"warn\"\n</code></pre>"},{"location":"deployment/kubernetes/#deployment-commands","title":"\ud83d\ude80 Deployment Commands","text":""},{"location":"deployment/kubernetes/#initial-deployment","title":"Initial Deployment","text":"<pre><code># Create namespace\nkubectl apply -f kubernetes/apps/zamaz/base/namespace.yaml\n\n# Deploy base resources\nkubectl apply -k kubernetes/apps/zamaz/base/\n\n# Check deployment status\nkubectl get pods -n mvp-auth\nkubectl get services -n mvp-auth\nkubectl get ingress -n mvp-auth\n</code></pre>"},{"location":"deployment/kubernetes/#production-deployment","title":"Production Deployment","text":"<pre><code># Deploy production overlay\nkubectl apply -k kubernetes/apps/zamaz/overlays/production/\n\n# Check rollout status\nkubectl rollout status deployment/prod-mvp-auth -n mvp-auth-prod\n\n# Check pod status\nkubectl get pods -n mvp-auth-prod -l app=mvp-auth\n\n# Check logs\nkubectl logs -n mvp-auth-prod -l app=mvp-auth --tail=100 -f\n</code></pre>"},{"location":"deployment/kubernetes/#using-helm-alternative","title":"Using Helm (Alternative)","text":"<pre><code># Install with Helm\nhelm install mvp-auth ./deployments/helm/mvp-auth \\\n  --namespace mvp-auth \\\n  --create-namespace \\\n  --values ./deployments/helm/mvp-auth/values-production.yaml\n\n# Upgrade deployment\nhelm upgrade mvp-auth ./deployments/helm/mvp-auth \\\n  --namespace mvp-auth \\\n  --values ./deployments/helm/mvp-auth/values-production.yaml\n\n# Check status\nhelm status mvp-auth -n mvp-auth\n</code></pre>"},{"location":"deployment/kubernetes/#monitoring-observability","title":"\ud83d\udcca Monitoring &amp; Observability","text":""},{"location":"deployment/kubernetes/#prometheus-servicemonitor","title":"Prometheus ServiceMonitor","text":"<pre><code># monitoring/servicemonitor.yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: mvp-auth-metrics\n  namespace: mvp-auth\n  labels:\n    app: mvp-auth\nspec:\n  selector:\n    matchLabels:\n      app: mvp-auth\n  endpoints:\n  - port: metrics\n    interval: 30s\n    path: /metrics\n</code></pre>"},{"location":"deployment/kubernetes/#horizontalpodautoscaler","title":"HorizontalPodAutoscaler","text":"<pre><code># kubernetes/apps/zamaz/overlays/production/hpa.yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: mvp-auth-hpa\n  namespace: mvp-auth\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: mvp-auth\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n  behavior:\n    scaleDown:\n      stabilizationWindowSeconds: 300\n      policies:\n      - type: Percent\n        value: 50\n        periodSeconds: 60\n    scaleUp:\n      stabilizationWindowSeconds: 60\n      policies:\n      - type: Percent\n        value: 100\n        periodSeconds: 60\n</code></pre>"},{"location":"deployment/kubernetes/#poddisruptionbudget","title":"PodDisruptionBudget","text":"<pre><code># kubernetes/apps/zamaz/overlays/production/pdb.yaml\napiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: mvp-auth-pdb\n  namespace: mvp-auth\nspec:\n  minAvailable: 2\n  selector:\n    matchLabels:\n      app: mvp-auth\n</code></pre>"},{"location":"deployment/kubernetes/#security","title":"\ud83d\udd12 Security","text":""},{"location":"deployment/kubernetes/#network-policies","title":"Network Policies","text":"<pre><code># kubernetes/apps/zamaz/base/network-policy.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: mvp-auth-network-policy\n  namespace: mvp-auth\nspec:\n  podSelector:\n    matchLabels:\n      app: mvp-auth\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: ingress-nginx\n    ports:\n    - protocol: TCP\n      port: 8080\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: monitoring\n    ports:\n    - protocol: TCP\n      port: 9000\n  egress:\n  - to:\n    - podSelector:\n        matchLabels:\n          app: postgres\n    ports:\n    - protocol: TCP\n      port: 5432\n  - to:\n    - podSelector:\n        matchLabels:\n          app: redis\n    ports:\n    - protocol: TCP\n      port: 6379\n  - to: []\n    ports:\n    - protocol: TCP\n      port: 53\n    - protocol: UDP\n      port: 53\n</code></pre>"},{"location":"deployment/kubernetes/#pod-security-standards","title":"Pod Security Standards","text":"<pre><code># Add to namespace\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: mvp-auth\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\n</code></pre>"},{"location":"deployment/kubernetes/#security-context","title":"Security Context","text":"<pre><code># In deployment.yaml\nsecurityContext:\n  runAsNonRoot: true\n  runAsUser: 1001\n  runAsGroup: 1001\n  fsGroup: 1001\n  seccompProfile:\n    type: RuntimeDefault\ncontainers:\n- name: mvp-auth\n  securityContext:\n    allowPrivilegeEscalation: false\n    runAsNonRoot: true\n    runAsUser: 1001\n    capabilities:\n      drop:\n      - ALL\n    readOnlyRootFilesystem: true\n</code></pre>"},{"location":"deployment/kubernetes/#testing","title":"\ud83e\uddea Testing","text":""},{"location":"deployment/kubernetes/#health-check-scripts","title":"Health Check Scripts","text":"<pre><code>#!/bin/bash\n# scripts/k8s-health-check.sh\n\nNAMESPACE=${1:-mvp-auth}\n\necho \"Checking MVP Auth deployment health in namespace: $NAMESPACE\"\n\n# Check deployment status\necho \"=== Deployment Status ===\"\nkubectl get deployment mvp-auth -n $NAMESPACE\n\n# Check pod status\necho \"=== Pod Status ===\"\nkubectl get pods -n $NAMESPACE -l app=mvp-auth\n\n# Check service endpoints\necho \"=== Service Endpoints ===\"\nkubectl get endpoints mvp-auth-service -n $NAMESPACE\n\n# Test health endpoint\necho \"=== Health Check ===\"\nkubectl run test-pod --rm -it --restart=Never --image=curlimages/curl -- \\\n  curl -f http://mvp-auth-service.$NAMESPACE.svc.cluster.local:8080/health\n\n# Check logs for errors\necho \"=== Recent Logs ===\"\nkubectl logs -n $NAMESPACE -l app=mvp-auth --tail=10\n</code></pre>"},{"location":"deployment/kubernetes/#load-testing","title":"Load Testing","text":"<pre><code>#!/bin/bash\n# scripts/k8s-load-test.sh\n\nNAMESPACE=${1:-mvp-auth}\nSERVICE_URL=\"http://mvp-auth-service.$NAMESPACE.svc.cluster.local:8080\"\n\nkubectl run load-test --rm -it --restart=Never --image=loadimpact/k6 -- \\\n  run -e BASE_URL=$SERVICE_URL - &lt;&lt;EOF\nimport http from 'k6/http';\nimport { check } from 'k6';\n\nexport let options = {\n  stages: [\n    { duration: '2m', target: 100 },\n    { duration: '5m', target: 100 },\n    { duration: '2m', target: 200 },\n    { duration: '5m', target: 200 },\n    { duration: '2m', target: 0 },\n  ],\n};\n\nexport default function() {\n  let response = http.get('${SERVICE_URL}/health');\n  check(response, {\n    'status is 200': (r) =&gt; r.status === 200,\n    'response time &lt; 500ms': (r) =&gt; r.timings.duration &lt; 500,\n  });\n}\nEOF\n</code></pre>"},{"location":"deployment/kubernetes/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"deployment/kubernetes/#common-issues","title":"Common Issues","text":""},{"location":"deployment/kubernetes/#1-pods-not-starting","title":"1. Pods Not Starting","text":"<pre><code># Check pod events\nkubectl describe pod &lt;pod-name&gt; -n mvp-auth\n\n# Check logs\nkubectl logs &lt;pod-name&gt; -n mvp-auth\n\n# Check resource availability\nkubectl top nodes\nkubectl top pods -n mvp-auth\n</code></pre>"},{"location":"deployment/kubernetes/#2-service-discovery-issues","title":"2. Service Discovery Issues","text":"<pre><code># Check service\nkubectl get svc -n mvp-auth\n\n# Check endpoints\nkubectl get endpoints -n mvp-auth\n\n# Test DNS resolution\nkubectl run debug --rm -it --restart=Never --image=busybox -- \\\n  nslookup mvp-auth-service.mvp-auth.svc.cluster.local\n</code></pre>"},{"location":"deployment/kubernetes/#3-database-connection-issues","title":"3. Database Connection Issues","text":"<pre><code># Check postgres pod\nkubectl logs postgres-&lt;pod-id&gt; -n mvp-auth\n\n# Test database connectivity\nkubectl run pg-test --rm -it --restart=Never --image=postgres:15 -- \\\n  psql -h postgres-service.mvp-auth.svc.cluster.local -U mvp_user -d mvp_db\n</code></pre>"},{"location":"deployment/kubernetes/#4-ingress-issues","title":"4. Ingress Issues","text":"<pre><code># Check ingress status\nkubectl get ingress -n mvp-auth\n\n# Check ingress controller logs\nkubectl logs -n ingress-nginx deployment/ingress-nginx-controller\n\n# Test internal service\nkubectl run curl-test --rm -it --restart=Never --image=curlimages/curl -- \\\n  curl -v http://mvp-auth-service.mvp-auth.svc.cluster.local:8080/health\n</code></pre>"},{"location":"deployment/kubernetes/#debug-commands","title":"Debug Commands","text":"<pre><code># Get all resources in namespace\nkubectl get all -n mvp-auth\n\n# Describe deployment\nkubectl describe deployment mvp-auth -n mvp-auth\n\n# Check resource usage\nkubectl top pods -n mvp-auth\n\n# Get events\nkubectl get events -n mvp-auth --sort-by='.lastTimestamp'\n\n# Port forward for debugging\nkubectl port-forward svc/mvp-auth-service 8080:8080 -n mvp-auth\n\n# Execute commands in pod\nkubectl exec -it &lt;pod-name&gt; -n mvp-auth -- /bin/sh\n</code></pre>"},{"location":"deployment/kubernetes/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Kubernetes Documentation</li> <li>Kustomize Documentation</li> <li>Kubernetes Security Best Practices</li> <li>Production Checklist</li> </ul>"},{"location":"deployment/production/","title":"Production Environment","text":"<p>This document is a placeholder for Production Environment. Information regarding the production environment setup and deployment process will be added here.</p> <p>This file was auto-generated as part of a documentation update initiative.</p>"},{"location":"deployment/security/","title":"Deployment Security","text":"<p>This document is a placeholder for Deployment Security. Information regarding security considerations for deployment will be added here.</p> <p>This file was auto-generated as part of a documentation update initiative.</p>"},{"location":"development/","title":"Development Guide","text":""},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.22+</li> <li>Node.js 20+</li> <li>Docker</li> <li>Kubernetes (local development with kind/minikube)</li> <li>Helm 3.14+</li> </ul>"},{"location":"development/#quick-start","title":"Quick Start","text":"<pre><code># Clone and set up development environment\nmake dev-setup\n\n# Start local development environment with observability\nmake dev-up\n\n# Start frontend development server\nmake dev-frontend\n\n# Run tests\nmake test-all\n\n# Run GitOps local environment\nmake dev-gitops\n</code></pre>"},{"location":"development/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Local Development <pre><code>make dev-setup    # First time setup\nmake dev-up       # Start local services\nmake dev-frontend # Start frontend\n</code></pre></p> </li> <li> <p>Testing <pre><code>make test        # Run unit tests\nmake test-e2e    # Run end-to-end tests\nmake test-load   # Run load tests\n</code></pre></p> </li> <li> <p>Quality Checks <pre><code>make quality-all  # Run all quality checks\nmake lint-fix     # Fix linting issues\n</code></pre></p> </li> <li> <p>GitOps Development <pre><code>make dev-gitops   # Start local GitOps environment\nmake gitops-validate # Validate configurations\n</code></pre></p> </li> </ol>"},{"location":"development/#project-structure","title":"Project Structure","text":"<pre><code>\u251c\u2500\u2500 cmd/            # Application entrypoints\n\u251c\u2500\u2500 pkg/            # Internal packages\n\u251c\u2500\u2500 api/            # API definitions\n\u251c\u2500\u2500 internal/       # Private application code\n\u251c\u2500\u2500 frontend/       # Frontend application\n\u251c\u2500\u2500 charts/         # Helm charts\n\u251c\u2500\u2500 deployments/    # Deployment configurations\n\u251c\u2500\u2500 docs/          # Documentation\n\u2514\u2500\u2500 scripts/       # Development and CI scripts\n</code></pre>"},{"location":"development/#development-best-practices","title":"Development Best Practices","text":"<ol> <li>Code Style</li> <li>Follow Go style guide</li> <li>Use TypeScript for frontend development</li> <li> <p>Document all public APIs</p> </li> <li> <p>Testing</p> </li> <li>Write unit tests for new code</li> <li>Include integration tests for API changes</li> <li> <p>E2E tests for critical paths</p> </li> <li> <p>GitOps</p> </li> <li>All configuration changes through Git</li> <li>Use ArgoCD for deployments</li> <li> <p>Follow progressive delivery pattern</p> </li> <li> <p>Security</p> </li> <li>Run SAST in CI pipeline</li> <li>Regular dependency updates</li> <li> <p>Follow zero-trust principles</p> </li> <li> <p>Observability</p> </li> <li>Include metrics for new features</li> <li>Add tracing for API endpoints</li> <li>Update dashboards for new services</li> </ol>"},{"location":"development/#environment-setup","title":"Environment Setup","text":""},{"location":"development/#configuration","title":"Configuration","text":"<p>Environment variables are managed through: - <code>.env</code> for local development - Helm values for Kubernetes - Vault for secrets</p>"},{"location":"development/#dependencies","title":"Dependencies","text":"<p>Dependencies are managed using: - Go modules - npm/pnpm for frontend - Helm for Kubernetes resources</p>"},{"location":"development/#debugging","title":"Debugging","text":"<ol> <li> <p>Local Development <pre><code>make dev-logs     # View service logs\nmake dev-status   # Check service status\n</code></pre></p> </li> <li> <p>Kubernetes <pre><code>make k8s-debug    # Start debug session\nmake k8s-logs     # View pod logs\n</code></pre></p> </li> </ol>"},{"location":"development/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>Our CI/CD pipeline includes: 1. Automated tests 2. Quality gates 3. Security scanning 4. GitOps deployment</p>"},{"location":"development/#additional-resources","title":"Additional Resources","text":"<ul> <li>Architecture Documentation</li> <li>API Documentation</li> <li>Security Guidelines</li> <li>Operations Manual</li> </ul>"},{"location":"development/api-documentation/","title":"Interactive API Documentation","text":"<p>This guide explains how to view and regenerate the interactive API documentation for the Zero Trust Authentication API.</p>"},{"location":"development/api-documentation/#viewing-the-documentation","title":"Viewing the Documentation","text":"<p>Run the server in development mode and open the Swagger UI in your browser:</p> <pre><code>make dev-up\n# in another terminal\nmake dev-frontend\n</code></pre> <p>Once the services are running, navigate to:</p> <pre><code>http://localhost:8080/swagger/index.html\n</code></pre> <p>The Swagger UI provides an interactive interface to explore and test the API endpoints.</p>"},{"location":"development/api-documentation/#regenerating-the-swagger-spec","title":"Regenerating the Swagger Spec","text":"<p>API documentation is generated from source code comments using <code>swag</code>. To regenerate the OpenAPI specification:</p> <pre><code>make swag\n</code></pre> <p>This command runs <code>swag init</code> and updates the files in the <code>docs</code> package that are served by the Swagger UI.</p>"},{"location":"development/cli/","title":"Developer CLI","text":"<p>The <code>mvpctl</code> command-line tool allows developers to interact with the Zero Trust Auth API.</p>"},{"location":"development/cli/#building","title":"Building","text":"<pre><code>go build -o mvpctl ./cmd/cli\n</code></pre>"},{"location":"development/cli/#examples","title":"Examples","text":"<pre><code># Login and get tokens\n./mvpctl login -u admin -p password\n\n# Register a new user\n./mvpctl register -u alice -e alice@example.com -p secret\n\n# Inspect the current user\n./mvpctl whoami -t &lt;access-token&gt;\n</code></pre> <p>The API base URL can be changed with the <code>--api</code> flag.</p>"},{"location":"development/code-style/","title":"Code Style Guide","text":"<p>This document outlines the coding standards used throughout the project for both Go and TypeScript code.</p>"},{"location":"development/code-style/#go-guidelines","title":"Go Guidelines","text":"<ul> <li>Formatting: All Go code must be formatted using <code>goimports</code>. Run <code>make fmt</code> before committing.</li> <li>Linting: We use <code>golangci-lint</code> with the configuration in <code>.golangci.yml</code>. Run <code>make lint</code> to check for issues.</li> <li>Error Handling: Prefer wrapped errors using <code>fmt.Errorf(\"context: %w\", err)</code>.</li> <li>Testing: Table-driven tests are encouraged. Aim for 80% coverage or higher.</li> <li>Packages: Keep packages focused. Avoid cyclic dependencies and use internal packages when code should not be consumed externally.</li> </ul>"},{"location":"development/code-style/#typescript-guidelines","title":"TypeScript Guidelines","text":"<ul> <li>Formatting: The repository uses Prettier. Run <code>npm run format</code> in the <code>frontend</code> directory.</li> <li>Linting: ESLint rules are enforced via <code>npm run lint</code>.</li> <li>Components: Use functional React components and hooks. Keep files under 300 lines when possible.</li> <li>Types: Prefer explicit types and interfaces. Avoid <code>any</code> except in tests or temporary code.</li> </ul>"},{"location":"development/code-style/#commit-messages","title":"Commit Messages","text":"<p>We follow Conventional Commits. Example:</p> <pre><code>feat(auth): add JWT middleware\n</code></pre> <p>Type scopes should match package or feature areas. Use the imperative mood and keep the summary under 72 characters.</p>"},{"location":"development/code-style/#pull-requests","title":"Pull Requests","text":"<ul> <li>Keep PRs focused and small when possible.</li> <li>Reference relevant issues in the description.</li> <li>Ensure <code>make quality-check</code> and all tests pass before requesting review.</li> </ul>"},{"location":"development/contributing/","title":"Contributing Guidelines","text":"<p>Thank you for taking the time to contribute! This project welcomes pull requests from the community. The following guidelines help keep the process smooth.</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository and clone your fork.</li> <li>Create a feature branch using a descriptive name: <code>git checkout -b feat/my-change</code>.</li> <li>Run <code>make dev-setup</code> to install dependencies and hooks.</li> </ol>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":"<ul> <li>Follow the Code Style Guide for Go and TypeScript conventions.</li> <li>Write or update tests for any code you change. Run <code>make test</code> to ensure all tests pass.</li> <li>Use <code>make fmt</code> and <code>make lint</code> before committing.</li> <li>Keep commits focused and use Conventional Commits.</li> </ul>"},{"location":"development/contributing/#pull-requests","title":"Pull Requests","text":"<ol> <li>Ensure your branch is up to date with <code>main</code>.</li> <li>Open a draft PR early if you'd like feedback.</li> <li>Fill out the PR template, describing the change and linking related issues.</li> <li>Verify CI checks pass. Run <code>make quality-check</code> locally to catch issues early.</li> <li>Request review from maintainers once ready.</li> </ol>"},{"location":"development/contributing/#code-reviews","title":"Code Reviews","text":"<ul> <li>Reviews focus on correctness, readability, and alignment with project goals.</li> <li>Address all comments or questions before merging.</li> <li>Squash or rebase if necessary to keep history clean.</li> </ul>"},{"location":"development/contributing/#reporting-issues","title":"Reporting Issues","text":"<p>If you encounter a bug or have a feature request, please open an issue with detailed steps to reproduce or a clear description of the desired behavior.</p>"},{"location":"development/contributing/#community","title":"Community","text":"<p>Join the discussion in GitHub issues to ask questions or share ideas. We appreciate all contributions, whether code, documentation, or feedback.</p>"},{"location":"development/project-structure/","title":"Project Structure (2025)","text":"<pre><code>root-zamaz/\n\u251c\u2500\u2500 api/                    # API definitions and contracts\n\u251c\u2500\u2500 bin/                    # Compiled binaries\n\u251c\u2500\u2500 charts/                 # Helm charts\n\u2502   \u251c\u2500\u2500 istio-mesh/        # Service mesh configurations\n\u2502   \u251c\u2500\u2500 observability/     # Monitoring stack\n\u2502   \u251c\u2500\u2500 security-policies/ # Security configurations\n\u2502   \u251c\u2500\u2500 spire-integration/ # SPIRE authentication\n\u2502   \u2514\u2500\u2500 zamaz/            # Main application chart\n\u251c\u2500\u2500 cmd/                   # Application entrypoints\n\u2502   \u251c\u2500\u2500 server/           # Main server\n\u2502   \u251c\u2500\u2500 cli/              # CLI tools\n\u2502   \u2514\u2500\u2500 dboptimize/       # Database tools\n\u251c\u2500\u2500 configs/              # Configuration files\n\u2502   \u251c\u2500\u2500 development/     # Development environment\n\u2502   \u251c\u2500\u2500 staging/        # Staging environment\n\u2502   \u2514\u2500\u2500 production/     # Production environment\n\u251c\u2500\u2500 deployments/         # Deployment configurations\n\u2502   \u251c\u2500\u2500 kubernetes/     # Kubernetes manifests\n\u2502   \u2502   \u251c\u2500\u2500 base/      # Base configurations\n\u2502   \u2502   \u251c\u2500\u2500 overlays/  # Environment overlays\n\u2502   \u2502   \u2514\u2500\u2500 policies/  # Security policies\n\u2502   \u2514\u2500\u2500 terraform/     # Infrastructure as code\n\u251c\u2500\u2500 docs/              # Documentation\n\u2502   \u251c\u2500\u2500 api/          # API documentation\n\u2502   \u251c\u2500\u2500 architecture/ # System design\n\u2502   \u251c\u2500\u2500 deployment/   # Deployment guides\n\u2502   \u251c\u2500\u2500 development/  # Development guides\n\u2502   \u251c\u2500\u2500 operations/   # Runbooks and procedures\n\u2502   \u251c\u2500\u2500 reference/    # Technical reference\n\u2502   \u2514\u2500\u2500 security/     # Security guidelines\n\u251c\u2500\u2500 frontend/         # Frontend application\n\u251c\u2500\u2500 logs/            # Application logs\n\u2502   \u251c\u2500\u2500 auth/        # Authentication logs\n\u2502   \u251c\u2500\u2500 server/      # Server logs\n\u2502   \u2514\u2500\u2500 frontend/    # Frontend logs\n\u251c\u2500\u2500 observability/   # Observability stack\n\u2502   \u251c\u2500\u2500 grafana/    # Dashboards\n\u2502   \u251c\u2500\u2500 prometheus/ # Metrics\n\u2502   \u2514\u2500\u2500 jaeger/     # Tracing\n\u251c\u2500\u2500 pkg/            # Internal packages\n\u251c\u2500\u2500 scripts/        # Automation scripts\n\u251c\u2500\u2500 test-results/   # Test outputs\n\u2502   \u251c\u2500\u2500 unit/      # Unit test results\n\u2502   \u251c\u2500\u2500 e2e/       # End-to-end test results\n\u2502   \u2514\u2500\u2500 integration/ # Integration test results\n\u2514\u2500\u2500 tests/          # Test suites\n    \u251c\u2500\u2500 e2e/        # End-to-end tests\n    \u251c\u2500\u2500 integration/ # Integration tests\n    \u2514\u2500\u2500 unit/       # Unit tests\n\n# Key Files\n\u251c\u2500\u2500 .gitignore              # Git ignore patterns\n\u251c\u2500\u2500 README.md              # Project overview\n\u251c\u2500\u2500 Makefile              # Build automation\n\u251c\u2500\u2500 go.mod                # Go dependencies\n\u2514\u2500\u2500 package.json          # Node.js dependencies\n</code></pre>"},{"location":"development/project-structure/#structure-rationale","title":"Structure Rationale","text":"<ol> <li>Clear Separation of Concerns</li> <li>Each directory has a single responsibility</li> <li>Environment-specific configs are isolated</li> <li> <p>Clear distinction between application and infrastructure code</p> </li> <li> <p>GitOps Ready</p> </li> <li>Kubernetes manifests organized for Kustomize</li> <li>Environment-specific overlays</li> <li> <p>Clear separation of base and environment configs</p> </li> <li> <p>Developer Friendly</p> </li> <li>Documentation organized by domain</li> <li>Clear build and test organization</li> <li> <p>Consistent logging structure</p> </li> <li> <p>Security First</p> </li> <li>Dedicated security documentation</li> <li>Clear policy management</li> <li> <p>Separate security configurations</p> </li> <li> <p>Observable</p> </li> <li>Centralized observability configuration</li> <li>Structured logging</li> <li>Organized dashboards and alerts</li> </ol>"},{"location":"development/project-structure/#maintenance-guidelines","title":"Maintenance Guidelines","text":"<ol> <li>Documentation</li> <li>Keep README.md up to date</li> <li>Document all new features</li> <li> <p>Update architecture diagrams</p> </li> <li> <p>Configuration</p> </li> <li>Use environment overlays</li> <li>Keep secrets in Vault</li> <li> <p>Document config changes</p> </li> <li> <p>Testing</p> </li> <li>Maintain test organization</li> <li>Keep coverage high</li> <li> <p>Regular test maintenance</p> </li> <li> <p>Security</p> </li> <li>Regular policy updates</li> <li>Security scan reports</li> <li> <p>Dependency updates</p> </li> <li> <p>Observability</p> </li> <li>Update dashboards</li> <li>Maintain alerts</li> <li>Review logging</li> </ol>"},{"location":"development/sdk_generation/","title":"SDK Generation","text":"<p>Client SDKs can be generated from the OpenAPI specification using the provided script.</p> <pre><code>./scripts/generate-sdks.sh\n</code></pre> <p>The script uses the <code>openapitools/openapi-generator-cli</code> Docker image to create Go, Python and JavaScript SDKs under the <code>sdk/</code> directory.</p>"},{"location":"development/setup/","title":"Development Setup Guide","text":"<p>This guide will help you set up a complete development environment for the Zero Trust Auth MVP.</p>"},{"location":"development/setup/#prerequisites","title":"\ud83d\udee0\ufe0f Prerequisites","text":""},{"location":"development/setup/#required-software","title":"Required Software","text":"Tool Version Purpose Go 1.23+ Backend development Node.js 18+ Frontend development Docker 20+ Container orchestration Docker Compose 2.0+ Development services Make Latest Build automation Git Latest Version control"},{"location":"development/setup/#optional-but-recommended","title":"Optional but Recommended","text":"Tool Purpose VS Code IDE with Go/TypeScript support Postman API testing k6 Load testing kubectl Kubernetes management helm Kubernetes package management"},{"location":"development/setup/#quick-setup","title":"\ud83d\ude80 Quick Setup","text":""},{"location":"development/setup/#1-clone-repository","title":"1. Clone Repository","text":"<pre><code># Clone the repository\ngit clone &lt;repository-url&gt;\ncd root-zamaz\n\n# Verify you're in the right directory\nls -la\n# Should see: Makefile, docker-compose.yml, go.mod, frontend/, etc.\n</code></pre>"},{"location":"development/setup/#2-verify-prerequisites","title":"2. Verify Prerequisites","text":"<pre><code># Check Go version\ngo version\n# Expected: go version go1.23.x\n\n# Check Node.js version\nnode --version\n# Expected: v18.x.x or higher\n\n# Check Docker\ndocker --version\n# Expected: Docker version 20.x.x\n\n# Check Docker Compose\ndocker-compose --version\n# Expected: Docker Compose version 2.x.x\n\n# Check Make\nmake --version\n# Expected: GNU Make 3.81 or higher\n</code></pre>"},{"location":"development/setup/#3-initial-setup","title":"3. Initial Setup","text":"<pre><code># Run initial setup\nmake dev-setup\n\n# This will:\n# - Create .env file if it doesn't exist\n# - Install frontend dependencies\n# - Generate development certificates\n# - Set up Git hooks (if configured)\n</code></pre>"},{"location":"development/setup/#4-start-development-environment","title":"4. Start Development Environment","text":"<pre><code># Start all infrastructure services\nmake dev-up\n\n# Wait for services to be ready (about 2-3 minutes)\n# You should see output indicating services are starting\n\n# In another terminal, start the frontend\nmake dev-frontend\n\n# Or start everything at once\nmake dev-all\n</code></pre>"},{"location":"development/setup/#5-verify-installation","title":"5. Verify Installation","text":"<pre><code># Check all services are running\ndocker ps\n\n# Test backend API\ncurl http://localhost:8080/health\n\n# Open frontend in browser\nopen http://localhost:5175\n\n# Test login with default credentials\n# Username: admin\n# Password: password\n</code></pre>"},{"location":"development/setup/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>root-zamaz/\n\u251c\u2500\u2500 \ud83d\udcc1 cmd/                    # Application entry points\n\u2502   \u2514\u2500\u2500 server/               # Main server application\n\u2502       \u2514\u2500\u2500 main.go          # Server entry point\n\u251c\u2500\u2500 \ud83d\udcc1 pkg/                   # Core packages (reusable)\n\u2502   \u251c\u2500\u2500 auth/                # Authentication &amp; authorization\n\u2502   \u251c\u2500\u2500 config/              # Configuration management\n\u2502   \u251c\u2500\u2500 database/            # Database layer\n\u2502   \u251c\u2500\u2500 handlers/            # HTTP handlers\n\u2502   \u251c\u2500\u2500 middleware/          # HTTP middleware\n\u2502   \u251c\u2500\u2500 models/              # Data models\n\u2502   \u251c\u2500\u2500 observability/       # Metrics, tracing, logging\n\u2502   \u2514\u2500\u2500 testutil/            # Testing utilities\n\u251c\u2500\u2500 \ud83d\udcc1 frontend/              # React TypeScript SPA\n\u2502   \u251c\u2500\u2500 src/                 # Source code\n\u2502   \u251c\u2500\u2500 tests/               # Frontend tests\n\u2502   \u251c\u2500\u2500 public/              # Static assets\n\u2502   \u2514\u2500\u2500 dist/                # Built assets (generated)\n\u251c\u2500\u2500 \ud83d\udcc1 deployments/           # Deployment configurations\n\u2502   \u251c\u2500\u2500 kubernetes/          # K8s manifests\n\u2502   \u251c\u2500\u2500 helm/                # Helm charts\n\u2502   \u2514\u2500\u2500 spire/               # SPIRE configurations\n\u251c\u2500\u2500 \ud83d\udcc1 envoy/                 # Envoy proxy configuration\n\u2502   \u251c\u2500\u2500 configs/             # Envoy YAML configs\n\u2502   \u2514\u2500\u2500 certs/               # TLS certificates\n\u251c\u2500\u2500 \ud83d\udcc1 observability/         # Monitoring configurations\n\u2502   \u251c\u2500\u2500 prometheus/          # Prometheus config\n\u2502   \u251c\u2500\u2500 grafana/             # Grafana dashboards\n\u2502   \u2514\u2500\u2500 jaeger/              # Jaeger config\n\u251c\u2500\u2500 \ud83d\udcc1 scripts/               # Build and utility scripts\n\u251c\u2500\u2500 \ud83d\udcc1 tests/                 # Integration and E2E tests\n\u251c\u2500\u2500 \ud83d\udcc1 docs/                  # Documentation\n\u251c\u2500\u2500 \ud83d\udcc1 examples/              # Example configurations\n\u251c\u2500\u2500 Makefile                  # Build automation\n\u251c\u2500\u2500 docker-compose.yml       # Development services\n\u251c\u2500\u2500 go.mod                   # Go module definition\n\u2514\u2500\u2500 README.md                # Project overview\n</code></pre>"},{"location":"development/setup/#development-tools-setup","title":"\ud83d\udd27 Development Tools Setup","text":""},{"location":"development/setup/#vs-code-configuration","title":"VS Code Configuration","text":"<p>Install recommended extensions:</p> <pre><code># Install VS Code extensions\ncode --install-extension golang.go\ncode --install-extension bradlc.vscode-tailwindcss\ncode --install-extension esbenp.prettier-vscode\ncode --install-extension ms-vscode.vscode-typescript-next\ncode --install-extension ms-vscode.vscode-eslint\n</code></pre> <p>Create <code>.vscode/settings.json</code>:</p> <pre><code>{\n  \"go.toolsManagement.checkForUpdates\": \"local\",\n  \"go.useLanguageServer\": true,\n  \"go.formatTool\": \"goimports\",\n  \"go.lintTool\": \"golangci-lint\",\n  \"go.testFlags\": [\"-v\", \"-race\"],\n  \"go.coverOnSave\": true,\n  \"go.coverageDecorator\": {\n    \"type\": \"gutter\",\n    \"coveredHighlightColor\": \"rgba(64,128,64,0.5)\",\n    \"uncoveredHighlightColor\": \"rgba(128,64,64,0.25)\"\n  },\n  \"typescript.preferences.importModuleSpecifier\": \"relative\",\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true,\n    \"source.organizeImports\": true\n  }\n}\n</code></pre> <p>Create <code>.vscode/launch.json</code> for debugging:</p> <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Launch Server\",\n      \"type\": \"go\",\n      \"request\": \"launch\",\n      \"mode\": \"auto\",\n      \"program\": \"./cmd/server\",\n      \"env\": {\n        \"DATABASE_URL\": \"postgres://mvp_user:mvp_password@localhost:5432/mvp_db?sslmode=disable\",\n        \"REDIS_URL\": \"redis://localhost:6379\",\n        \"JWT_SECRET\": \"development-secret-key\",\n        \"LOG_LEVEL\": \"debug\"\n      },\n      \"args\": []\n    },\n    {\n      \"name\": \"Run Tests\",\n      \"type\": \"go\",\n      \"request\": \"launch\",\n      \"mode\": \"test\",\n      \"program\": \"${workspaceFolder}\",\n      \"args\": [\"-v\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"development/setup/#git-configuration","title":"Git Configuration","text":"<pre><code># Configure Git hooks (optional)\ngit config core.hooksPath .githooks\n\n# Set up pre-commit hooks\ncat &gt; .githooks/pre-commit &lt;&lt; 'EOF'\n#!/bin/bash\nset -e\n\necho \"Running pre-commit checks...\"\n\n# Format Go code\necho \"\ud83c\udfa8 Formatting Go code...\"\nmake fmt\n\n# Lint Go code\necho \"\ud83d\udd0d Linting Go code...\"\nmake lint\n\n# Run tests\necho \"\ud83e\uddea Running tests...\"\nmake test\n\n# Format frontend code\necho \"\ud83c\udfa8 Formatting frontend code...\"\ncd frontend &amp;&amp; npm run format &amp;&amp; cd ..\n\n# Lint frontend code\necho \"\ud83d\udd0d Linting frontend code...\"\ncd frontend &amp;&amp; npm run lint &amp;&amp; cd ..\n\necho \"\u2705 Pre-commit checks passed!\"\nEOF\n\nchmod +x .githooks/pre-commit\n</code></pre>"},{"location":"development/setup/#database-setup","title":"\ud83d\uddc4\ufe0f Database Setup","text":""},{"location":"development/setup/#local-database-docker","title":"Local Database (Docker)","text":"<p>The development environment uses PostgreSQL in Docker:</p> <pre><code># Database is automatically started with make dev-up\n# Connection details:\n# Host: localhost\n# Port: 5432\n# Database: mvp_db\n# Username: mvp_user\n# Password: mvp_password\n</code></pre>"},{"location":"development/setup/#manual-database-setup-optional","title":"Manual Database Setup (Optional)","text":"<p>If you prefer a local PostgreSQL installation:</p> <pre><code># Install PostgreSQL (macOS)\nbrew install postgresql@15\nbrew services start postgresql@15\n\n# Create database and user\ncreateuser -s mvp_user\ncreatedb -O mvp_user mvp_db\n\n# Set password\npsql -d mvp_db -c \"ALTER USER mvp_user WITH PASSWORD 'mvp_password';\"\n\n# Run migrations\nmake db-migrate\n</code></pre>"},{"location":"development/setup/#database-management","title":"Database Management","text":"<pre><code># Connect to database\ndocker exec -it mvp-zero-trust-auth-postgres-1 psql -U mvp_user -d mvp_db\n\n# Reset database\nmake db-reset\n\n# Run migrations\nmake db-migrate\n\n# View database logs\ndocker logs mvp-zero-trust-auth-postgres-1\n</code></pre>"},{"location":"development/setup/#environment-configuration","title":"\ud83c\udfaf Environment Configuration","text":""},{"location":"development/setup/#environment-variables","title":"Environment Variables","text":"<p>Create <code>.env</code> file (automatically created by <code>make dev-setup</code>):</p> <pre><code># Database\nDATABASE_HOST=localhost\nDATABASE_PORT=5432\nDATABASE_NAME=mvp_db\nDATABASE_USER=mvp_user\nDATABASE_PASSWORD=mvp_password\nDATABASE_SSL_MODE=disable\n\n# Redis\nREDIS_HOST=localhost\nREDIS_PORT=6379\nREDIS_PASSWORD=\nREDIS_DATABASE=0\n\n# JWT\nJWT_SECRET=development-secret-key-change-in-production\nJWT_ACCESS_TOKEN_EXPIRATION=24h\nJWT_REFRESH_TOKEN_EXPIRATION=7d\n\n# Server\nHTTP_HOST=localhost\nHTTP_PORT=8080\nHTTP_READ_TIMEOUT=30s\nHTTP_WRITE_TIMEOUT=30s\n\n# Observability\nJAEGER_ENDPOINT=http://localhost:14268/api/traces\nPROMETHEUS_PORT=9000\nLOG_LEVEL=debug\nLOG_FORMAT=json\n\n# Development\nENVIRONMENT=development\nDISABLE_AUTH=false\nCORS_ALLOWED_ORIGINS=http://localhost:5175\n</code></pre>"},{"location":"development/setup/#configuration-files","title":"Configuration Files","text":""},{"location":"development/setup/#go-configuration-pkgconfigconfiggo","title":"Go Configuration (<code>pkg/config/config.go</code>)","text":"<p>The application uses a hierarchical configuration system:</p> <ol> <li>Default values</li> <li>Environment variables</li> <li>Configuration files</li> <li>Command-line flags</li> </ol>"},{"location":"development/setup/#frontend-configuration-frontendviteconfigts","title":"Frontend Configuration (<code>frontend/vite.config.ts</code>)","text":"<pre><code>export default defineConfig({\n  plugins: [react()],\n  server: {\n    port: 5175,\n    proxy: {\n      '/api': {\n        target: 'http://localhost:8080',\n        changeOrigin: true,\n      },\n    },\n  },\n  build: {\n    outDir: 'dist',\n    sourcemap: true,\n  },\n  test: {\n    globals: true,\n    environment: 'jsdom',\n    setupFiles: './src/test/setup.ts',\n  },\n});\n</code></pre>"},{"location":"development/setup/#testing-setup","title":"\ud83e\uddea Testing Setup","text":""},{"location":"development/setup/#backend-testing","title":"Backend Testing","text":"<pre><code># Run all tests\nmake test\n\n# Run tests with coverage\nmake test-coverage\n\n# Run integration tests (requires services)\nmake test-integration\n\n# Run specific test\ngo test -v ./pkg/auth/...\n\n# Run tests with race detection\ngo test -race ./...\n\n# Run benchmarks\ngo test -bench=. ./pkg/...\n</code></pre>"},{"location":"development/setup/#frontend-testing","title":"Frontend Testing","text":"<pre><code>cd frontend\n\n# Install dependencies\nnpm install\n\n# Run unit tests\nnpm test\n\n# Run tests in watch mode\nnpm run test:watch\n\n# Run E2E tests\nnpm run test:e2e\n\n# Generate coverage report\nnpm run test:coverage\n</code></pre>"},{"location":"development/setup/#integration-testing","title":"Integration Testing","text":"<pre><code># Start test environment\nmake test-integration\n\n# This will:\n# - Start Docker Compose test services\n# - Run integration tests\n# - Clean up test environment\n</code></pre>"},{"location":"development/setup/#development-workflow","title":"\ud83d\udd04 Development Workflow","text":""},{"location":"development/setup/#daily-development","title":"Daily Development","text":"<pre><code># 1. Start development environment\nmake dev-up\n\n# 2. Start frontend (in separate terminal)\nmake dev-frontend\n\n# 3. Make changes to code\n\n# 4. Run tests frequently\nmake test\n\n# 5. Check code quality\nmake lint\nmake fmt\n\n# 6. Commit changes\ngit add .\ngit commit -m \"feat: add new feature\"\n\n# 7. Push changes\ngit push origin feature-branch\n</code></pre>"},{"location":"development/setup/#adding-new-features","title":"Adding New Features","text":"<pre><code># 1. Create feature branch\ngit checkout -b feature/new-feature\n\n# 2. Add your code changes\n\n# 3. Add tests\n# - Unit tests in *_test.go files\n# - Integration tests in tests/integration/\n# - E2E tests in frontend/tests/e2e/\n\n# 4. Update documentation\n\n# 5. Run quality checks\nmake quality-check\n\n# 6. Commit and push\ngit add .\ngit commit -m \"feat: implement new feature\"\ngit push origin feature/new-feature\n</code></pre>"},{"location":"development/setup/#debugging","title":"Debugging","text":""},{"location":"development/setup/#backend-debugging","title":"Backend Debugging","text":"<pre><code># Enable debug logging\nexport LOG_LEVEL=debug\nmake run-server\n\n# Or with VS Code debugger\n# Set breakpoints and press F5\n\n# View detailed logs\ndocker logs mvp-zero-trust-auth-envoy-1 --follow\n</code></pre>"},{"location":"development/setup/#frontend-debugging","title":"Frontend Debugging","text":"<pre><code># Start development server\ncd frontend\nnpm run dev\n\n# Browser debugging:\n# 1. Open browser dev tools\n# 2. Use React DevTools extension\n# 3. Check console for errors\n# 4. Use debugger; statements\n</code></pre>"},{"location":"development/setup/#database-debugging","title":"Database Debugging","text":"<pre><code># Connect to database\ndocker exec -it mvp-zero-trust-auth-postgres-1 psql -U mvp_user -d mvp_db\n\n# View queries\nexport DB_LOG_LEVEL=debug\n\n# Check database logs\ndocker logs mvp-zero-trust-auth-postgres-1\n</code></pre>"},{"location":"development/setup/#common-tasks","title":"\ud83d\udee0\ufe0f Common Tasks","text":""},{"location":"development/setup/#building","title":"Building","text":"<pre><code># Build backend only\nmake build-server\n\n# Build everything (backend + frontend + Docker)\nmake build\n\n# Build frontend only\nmake build-frontend\n\n# Clean build artifacts\nmake clean\n</code></pre>"},{"location":"development/setup/#code-quality","title":"Code Quality","text":"<pre><code># Format code\nmake fmt\n\n# Lint code\nmake lint\n\n# Security scan\nmake security-scan\n\n# All quality checks\nmake quality-check\n</code></pre>"},{"location":"development/setup/#dependencies","title":"Dependencies","text":"<pre><code># Update Go dependencies\ngo mod tidy\ngo mod download\n\n# Update frontend dependencies\ncd frontend\nnpm update\nnpm audit fix\n\n# Check for vulnerabilities\nmake check-deps\n</code></pre>"},{"location":"development/setup/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"development/setup/#common-issues","title":"Common Issues","text":""},{"location":"development/setup/#1-port-already-in-use","title":"1. Port Already in Use","text":"<pre><code># Find process using port\nlsof -i :8080\n\n# Kill process\nkill -9 &lt;PID&gt;\n\n# Or use different port\nexport HTTP_PORT=8081\n</code></pre>"},{"location":"development/setup/#2-docker-issues","title":"2. Docker Issues","text":"<pre><code># Restart Docker\nmake dev-down\nmake dev-up\n\n# Clean Docker cache\ndocker system prune -f\n\n# Reset everything\nmake clean\n</code></pre>"},{"location":"development/setup/#3-database-connection-issues","title":"3. Database Connection Issues","text":"<pre><code># Check database is running\ndocker ps | grep postgres\n\n# Check connectivity\npg_isready -h localhost -p 5432\n\n# Reset database\nmake db-reset\n</code></pre>"},{"location":"development/setup/#4-frontend-build-issues","title":"4. Frontend Build Issues","text":"<pre><code>cd frontend\n\n# Clear cache\nrm -rf node_modules package-lock.json\nnpm install\n\n# Reset build\nrm -rf dist\nnpm run build\n</code></pre>"},{"location":"development/setup/#getting-help","title":"Getting Help","text":""},{"location":"development/setup/#check-system-status","title":"Check System Status","text":"<pre><code># Check all services\nmake dev-up\ndocker ps\n\n# Check logs\nmake logs\n\n# Check resource usage\ndocker stats\n</code></pre>"},{"location":"development/setup/#reset-environment","title":"Reset Environment","text":"<pre><code># Complete reset\nmake clean\nmake dev-setup\nmake dev-up\n</code></pre>"},{"location":"development/setup/#next-steps","title":"\ud83d\udcda Next Steps","text":"<p>After completing the setup:</p> <ol> <li>Explore the API: Visit http://localhost:8080/swagger/index.html</li> <li>Check the Frontend: Open http://localhost:5175</li> <li>View Monitoring: Check Grafana at http://localhost:3000</li> <li>Read the Code: Start with <code>cmd/server/main.go</code></li> <li>Run Tests: Execute <code>make test</code> to ensure everything works</li> <li>Make Changes: Try modifying a handler or adding a new endpoint</li> </ol>"},{"location":"development/setup/#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Ready to contribute? Check out:</p> <ul> <li>Contributing Guidelines</li> <li>Code Style Guide</li> <li>Testing Guide</li> <li>API Documentation</li> </ul>"},{"location":"development/testing/","title":"Testing Guide","text":"<p>This guide covers the comprehensive testing strategy for the Zero Trust Auth MVP, including unit tests, integration tests, E2E tests, and performance testing.</p>"},{"location":"development/testing/#testing-philosophy","title":"\ud83e\uddea Testing Philosophy","text":"<p>Our testing approach follows the testing pyramid:</p> <pre><code>    /\\\n   /  \\   E2E Tests (Few, High-level, UI)\n  /____\\\n /      \\  Integration Tests (Some, API/Service level)\n/_______\\\n/        \\  Unit Tests (Many, Fast, Isolated)\n/__________\\\n</code></pre>"},{"location":"development/testing/#testing-principles","title":"Testing Principles","text":"<ol> <li>Fast Feedback: Tests should run quickly for rapid development</li> <li>Reliable: Tests should be deterministic and not flaky</li> <li>Maintainable: Tests should be easy to understand and modify</li> <li>Comprehensive: Tests should cover critical functionality</li> <li>Realistic: Tests should simulate real-world scenarios</li> </ol>"},{"location":"development/testing/#test-categories","title":"\ud83d\udcca Test Categories","text":""},{"location":"development/testing/#1-unit-tests","title":"1. Unit Tests","text":"<ul> <li>Scope: Individual functions, methods, components</li> <li>Location: <code>*_test.go</code> files alongside source code</li> <li>Tools: Go testing, testify, frontend: Jest + React Testing Library</li> <li>Coverage Target: 80% minimum</li> </ul>"},{"location":"development/testing/#2-integration-tests","title":"2. Integration Tests","text":"<ul> <li>Scope: API endpoints, database interactions, service integration</li> <li>Location: <code>tests/integration/</code></li> <li>Tools: Go testing with testcontainers, Docker Compose</li> <li>Coverage: Critical business flows</li> </ul>"},{"location":"development/testing/#3-e2e-tests","title":"3. E2E Tests","text":"<ul> <li>Scope: Complete user workflows through UI</li> <li>Location: <code>frontend/tests/e2e/</code></li> <li>Tools: Playwright</li> <li>Coverage: Happy paths and critical user journeys</li> </ul>"},{"location":"development/testing/#4-performance-tests","title":"4. Performance Tests","text":"<ul> <li>Scope: Load testing, stress testing, performance benchmarks</li> <li>Location: <code>tests/load/</code></li> <li>Tools: k6, Go benchmarks</li> <li>Coverage: API endpoints under load</li> </ul>"},{"location":"development/testing/#test-setup","title":"\ud83d\udd27 Test Setup","text":""},{"location":"development/testing/#prerequisites","title":"Prerequisites","text":"<pre><code># Install testing tools\ngo install github.com/golangci/golangci-lint/cmd/golangci-lint@latest\ngo install golang.org/x/vuln/cmd/govulncheck@latest\n\n# Frontend testing tools (included in package.json)\ncd frontend\nnpm install\n</code></pre>"},{"location":"development/testing/#test-environment","title":"Test Environment","text":"<pre><code># Start test infrastructure\nmake dev-up\n\n# Run all tests\nmake test\n\n# Run with coverage\nmake test-coverage\n\n# Run integration tests\nmake test-integration\n\n# Run load tests\nmake test-load\n</code></pre>"},{"location":"development/testing/#unit-testing","title":"\ud83e\uddee Unit Testing","text":""},{"location":"development/testing/#backend-unit-tests","title":"Backend Unit Tests","text":""},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<pre><code>// pkg/auth/jwt_test.go\npackage auth\n\nimport (\n    \"testing\"\n    \"time\"\n\n    \"github.com/stretchr/testify/assert\"\n    \"github.com/stretchr/testify/require\"\n)\n\nfunc TestJWTService_GenerateToken(t *testing.T) {\n    tests := []struct {\n        name          string\n        config        *JWTConfig\n        userID        string\n        username      string\n        roles         []string\n        permissions   []string\n        expectedError bool\n    }{\n        {\n            name: \"successful_token_generation\",\n            config: &amp;JWTConfig{\n                Secret:             \"test-secret\",\n                AccessTokenTTL:     time.Hour,\n                RefreshTokenTTL:    24 * time.Hour,\n                Issuer:            \"test-issuer\",\n                Audience:          \"test-audience\",\n            },\n            userID:        \"user-123\",\n            username:      \"testuser\",\n            roles:         []string{\"user\"},\n            permissions:   []string{\"read:profile\"},\n            expectedError: false,\n        },\n        {\n            name: \"empty_secret_should_fail\",\n            config: &amp;JWTConfig{\n                Secret: \"\",\n            },\n            userID:        \"user-123\",\n            username:      \"testuser\",\n            roles:         []string{\"user\"},\n            permissions:   []string{\"read:profile\"},\n            expectedError: true,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            service := NewJWTService(tt.config, nil)\n\n            token, err := service.GenerateToken(\n                context.Background(),\n                tt.userID,\n                tt.username,\n                time.Now().Add(tt.config.AccessTokenTTL),\n                tt.roles,\n                tt.permissions,\n            )\n\n            if tt.expectedError {\n                assert.Error(t, err)\n                assert.Empty(t, token)\n            } else {\n                assert.NoError(t, err)\n                assert.NotEmpty(t, token)\n\n                // Validate token structure\n                claims, err := service.ValidateToken(token)\n                require.NoError(t, err)\n                assert.Equal(t, tt.userID, claims.Subject)\n                assert.Equal(t, tt.username, claims.Username)\n                assert.Equal(t, tt.roles, claims.Roles)\n                assert.Equal(t, tt.permissions, claims.Permissions)\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"development/testing/#test-helpers","title":"Test Helpers","text":"<pre><code>// pkg/testutil/auth.go\npackage testutil\n\nimport (\n    \"context\"\n    \"testing\"\n    \"time\"\n\n    \"github.com/stretchr/testify/require\"\n    \"mvp.local/pkg/auth\"\n)\n\n// CreateTestJWTService creates a JWT service for testing\nfunc CreateTestJWTService(t *testing.T) *auth.JWTService {\n    config := &amp;auth.JWTConfig{\n        Secret:             \"test-secret-key\",\n        AccessTokenTTL:     time.Hour,\n        RefreshTokenTTL:    24 * time.Hour,\n        Issuer:            \"test-issuer\",\n        Audience:          \"test-audience\",\n    }\n\n    return auth.NewJWTService(config, nil)\n}\n\n// GenerateTestToken creates a valid JWT token for testing\nfunc GenerateTestToken(t *testing.T, service *auth.JWTService, userID, username string) string {\n    token, err := service.GenerateToken(\n        context.Background(),\n        userID,\n        username,\n        time.Now().Add(time.Hour),\n        []string{\"user\"},\n        []string{\"read:profile\"},\n    )\n    require.NoError(t, err)\n    return token\n}\n</code></pre>"},{"location":"development/testing/#mock-objects","title":"Mock Objects","text":"<pre><code>// pkg/testutil/mocks.go\npackage testutil\n\nimport (\n    \"github.com/stretchr/testify/mock\"\n    \"mvp.local/pkg/auth\"\n)\n\n// MockAuthorizationService is a mock implementation\ntype MockAuthorizationService struct {\n    mock.Mock\n}\n\nfunc (m *MockAuthorizationService) CheckPermission(userID, resource, action string) error {\n    args := m.Called(userID, resource, action)\n    return args.Error(0)\n}\n\nfunc (m *MockAuthorizationService) GetUserRoles(userID string) ([]string, error) {\n    args := m.Called(userID)\n    return args.Get(0).([]string), args.Error(1)\n}\n\nfunc (m *MockAuthorizationService) GetUserPermissions(userID string) ([]string, error) {\n    args := m.Called(userID)\n    return args.Get(0).([]string), args.Error(1)\n}\n\n// NewMockAuthorizationService creates a new mock with common expectations\nfunc NewMockAuthorizationService() *MockAuthorizationService {\n    mock := &amp;MockAuthorizationService{}\n\n    // Set up common mock responses\n    mock.On(\"GetUserRoles\", \"admin\").Return([]string{\"admin\", \"user\"}, nil)\n    mock.On(\"GetUserPermissions\", \"admin\").Return([]string{\"system:admin\", \"device:verify\"}, nil)\n    mock.On(\"CheckPermission\", \"admin\", mock.Anything, mock.Anything).Return(nil)\n\n    return mock\n}\n</code></pre>"},{"location":"development/testing/#frontend-unit-tests","title":"Frontend Unit Tests","text":""},{"location":"development/testing/#component-testing","title":"Component Testing","text":"<pre><code>// frontend/src/components/__tests__/LoginForm.test.tsx\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { vi } from 'vitest';\nimport LoginForm from '../LoginForm';\nimport { AuthProvider } from '../../hooks/useAuth';\n\n// Mock the auth hook\nvi.mock('../../hooks/useAuth', async () =&gt; {\n  const actual = await vi.importActual('../../hooks/useAuth');\n  return {\n    ...actual,\n    useAuth: vi.fn(),\n  };\n});\n\ndescribe('LoginForm', () =&gt; {\n  const mockLogin = vi.fn();\n\n  beforeEach(() =&gt; {\n    vi.clearAllMocks();\n    (useAuth as any).mockReturnValue({\n      login: mockLogin,\n      loading: false,\n      error: null,\n    });\n  });\n\n  it('renders login form correctly', () =&gt; {\n    render(&lt;LoginForm /&gt;);\n\n    expect(screen.getByLabelText(/username/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/password/i)).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /login/i })).toBeInTheDocument();\n  });\n\n  it('submits form with correct credentials', async () =&gt; {\n    render(&lt;LoginForm /&gt;);\n\n    const usernameInput = screen.getByLabelText(/username/i);\n    const passwordInput = screen.getByLabelText(/password/i);\n    const submitButton = screen.getByRole('button', { name: /login/i });\n\n    fireEvent.change(usernameInput, { target: { value: 'admin' } });\n    fireEvent.change(passwordInput, { target: { value: 'password' } });\n    fireEvent.click(submitButton);\n\n    await waitFor(() =&gt; {\n      expect(mockLogin).toHaveBeenCalledWith('admin', 'password');\n    });\n  });\n\n  it('displays validation errors for empty fields', async () =&gt; {\n    render(&lt;LoginForm /&gt;);\n\n    const submitButton = screen.getByRole('button', { name: /login/i });\n    fireEvent.click(submitButton);\n\n    await waitFor(() =&gt; {\n      expect(screen.getByText(/username is required/i)).toBeInTheDocument();\n      expect(screen.getByText(/password is required/i)).toBeInTheDocument();\n    });\n  });\n\n  it('displays error message on login failure', () =&gt; {\n    (useAuth as any).mockReturnValue({\n      login: mockLogin,\n      loading: false,\n      error: 'Invalid credentials',\n    });\n\n    render(&lt;LoginForm /&gt;);\n\n    expect(screen.getByText(/invalid credentials/i)).toBeInTheDocument();\n  });\n});\n</code></pre>"},{"location":"development/testing/#hook-testing","title":"Hook Testing","text":"<pre><code>// frontend/src/hooks/__tests__/useAuth.test.tsx\nimport { renderHook, act } from '@testing-library/react';\nimport { vi } from 'vitest';\nimport { useAuth, AuthProvider } from '../useAuth';\nimport * as api from '../../services/api';\n\nvi.mock('../../services/api');\n\nconst wrapper = ({ children }: { children: React.ReactNode }) =&gt; (\n  &lt;AuthProvider&gt;{children}&lt;/AuthProvider&gt;\n);\n\ndescribe('useAuth', () =&gt; {\n  beforeEach(() =&gt; {\n    vi.clearAllMocks();\n    localStorage.clear();\n  });\n\n  it('initializes with no user', () =&gt; {\n    const { result } = renderHook(() =&gt; useAuth(), { wrapper });\n\n    expect(result.current.user).toBeNull();\n    expect(result.current.loading).toBe(false);\n    expect(result.current.error).toBeNull();\n  });\n\n  it('logs in user successfully', async () =&gt; {\n    const mockUser = { id: '1', username: 'admin', email: 'admin@test.com' };\n    const mockResponse = {\n      access_token: 'access-token',\n      refresh_token: 'refresh-token',\n      user: mockUser,\n    };\n\n    vi.mocked(api.login).mockResolvedValue(mockResponse);\n\n    const { result } = renderHook(() =&gt; useAuth(), { wrapper });\n\n    await act(async () =&gt; {\n      await result.current.login('admin', 'password');\n    });\n\n    expect(result.current.user).toEqual(mockUser);\n    expect(result.current.error).toBeNull();\n    expect(localStorage.getItem('authToken')).toBe('access-token');\n  });\n\n  it('handles login error', async () =&gt; {\n    const errorMessage = 'Invalid credentials';\n    vi.mocked(api.login).mockRejectedValue(new Error(errorMessage));\n\n    const { result } = renderHook(() =&gt; useAuth(), { wrapper });\n\n    await act(async () =&gt; {\n      await result.current.login('admin', 'wrong-password');\n    });\n\n    expect(result.current.user).toBeNull();\n    expect(result.current.error).toBe(errorMessage);\n  });\n});\n</code></pre>"},{"location":"development/testing/#integration-testing","title":"\ud83d\udd17 Integration Testing","text":""},{"location":"development/testing/#api-integration-tests","title":"API Integration Tests","text":"<pre><code>// tests/integration/auth_integration_test.go\npackage integration\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n\n    \"github.com/stretchr/testify/assert\"\n    \"github.com/stretchr/testify/require\"\n    \"github.com/testcontainers/testcontainers-go\"\n    \"github.com/testcontainers/testcontainers-go/modules/postgres\"\n    \"mvp.local/pkg/handlers\"\n)\n\nfunc TestAuthIntegration(t *testing.T) {\n    // Start test containers\n    ctx := context.Background()\n\n    // PostgreSQL container\n    postgresContainer, err := postgres.RunContainer(ctx,\n        testcontainers.WithImage(\"postgres:15-alpine\"),\n        postgres.WithDatabase(\"test_db\"),\n        postgres.WithUsername(\"test_user\"),\n        postgres.WithPassword(\"test_password\"),\n    )\n    require.NoError(t, err)\n    defer postgresContainer.Terminate(ctx)\n\n    // Get connection string\n    connStr, err := postgresContainer.ConnectionString(ctx, \"sslmode=disable\")\n    require.NoError(t, err)\n\n    // Setup test server\n    server := setupTestServer(t, connStr)\n\n    t.Run(\"POST /api/auth/login\", func(t *testing.T) {\n        // Test successful login\n        loginReq := map[string]string{\n            \"username\": \"admin\",\n            \"password\": \"password\",\n        }\n\n        reqBody, _ := json.Marshal(loginReq)\n        req := httptest.NewRequest(\"POST\", \"/api/auth/login\", bytes.NewBuffer(reqBody))\n        req.Header.Set(\"Content-Type\", \"application/json\")\n\n        w := httptest.NewRecorder()\n        server.ServeHTTP(w, req)\n\n        assert.Equal(t, http.StatusOK, w.Code)\n\n        var response map[string]interface{}\n        err := json.Unmarshal(w.Body.Bytes(), &amp;response)\n        require.NoError(t, err)\n\n        assert.Contains(t, response, \"access_token\")\n        assert.Contains(t, response, \"refresh_token\")\n        assert.Contains(t, response, \"user\")\n    })\n\n    t.Run(\"POST /api/auth/login with invalid credentials\", func(t *testing.T) {\n        loginReq := map[string]string{\n            \"username\": \"admin\",\n            \"password\": \"wrong-password\",\n        }\n\n        reqBody, _ := json.Marshal(loginReq)\n        req := httptest.NewRequest(\"POST\", \"/api/auth/login\", bytes.NewBuffer(reqBody))\n        req.Header.Set(\"Content-Type\", \"application/json\")\n\n        w := httptest.NewRecorder()\n        server.ServeHTTP(w, req)\n\n        assert.Equal(t, http.StatusUnauthorized, w.Code)\n    })\n}\n\nfunc setupTestServer(t *testing.T, dbURL string) http.Handler {\n    // Initialize test database\n    db, err := database.NewTestDatabase(dbURL)\n    require.NoError(t, err)\n\n    // Run migrations\n    err = db.Migrate()\n    require.NoError(t, err)\n\n    // Seed test data\n    err = seedTestData(db)\n    require.NoError(t, err)\n\n    // Create test services\n    obs := observability.NewTest()\n    authService := auth.NewJWTService(&amp;auth.JWTConfig{\n        Secret: \"test-secret\",\n        AccessTokenTTL: time.Hour,\n    }, nil)\n\n    // Create handlers\n    authHandler := handlers.NewAuthHandler(db.GetDB(), authService, nil, obs, &amp;config.Config{})\n\n    // Setup router\n    router := fiber.New()\n    api := router.Group(\"/api\")\n    auth := api.Group(\"/auth\")\n    auth.Post(\"/login\", authHandler.Login)\n\n    return router\n}\n</code></pre>"},{"location":"development/testing/#database-integration-tests","title":"Database Integration Tests","text":"<pre><code>// tests/integration/database_test.go\npackage integration\n\nimport (\n    \"testing\"\n\n    \"github.com/stretchr/testify/assert\"\n    \"github.com/stretchr/testify/require\"\n    \"mvp.local/pkg/models\"\n)\n\nfunc TestUserCRUD(t *testing.T) {\n    db := setupTestDB(t)\n\n    t.Run(\"Create User\", func(t *testing.T) {\n        user := &amp;models.User{\n            Username:  \"testuser\",\n            Email:     \"test@example.com\",\n            FirstName: \"Test\",\n            LastName:  \"User\",\n            IsActive:  true,\n        }\n\n        err := db.Create(user).Error\n        require.NoError(t, err)\n        assert.NotEmpty(t, user.ID)\n        assert.NotZero(t, user.CreatedAt)\n    })\n\n    t.Run(\"Find User\", func(t *testing.T) {\n        // Create test user\n        user := &amp;models.User{\n            Username: \"finduser\",\n            Email:    \"find@example.com\",\n        }\n        db.Create(user)\n\n        // Find user\n        var foundUser models.User\n        err := db.Where(\"username = ?\", \"finduser\").First(&amp;foundUser).Error\n        require.NoError(t, err)\n        assert.Equal(t, user.Username, foundUser.Username)\n        assert.Equal(t, user.Email, foundUser.Email)\n    })\n\n    t.Run(\"Update User\", func(t *testing.T) {\n        // Create test user\n        user := &amp;models.User{\n            Username: \"updateuser\",\n            Email:    \"update@example.com\",\n        }\n        db.Create(user)\n\n        // Update user\n        user.FirstName = \"Updated\"\n        err := db.Save(user).Error\n        require.NoError(t, err)\n\n        // Verify update\n        var updatedUser models.User\n        db.First(&amp;updatedUser, user.ID)\n        assert.Equal(t, \"Updated\", updatedUser.FirstName)\n    })\n}\n</code></pre>"},{"location":"development/testing/#e2e-testing","title":"\ud83c\udfad E2E Testing","text":""},{"location":"development/testing/#playwright-configuration","title":"Playwright Configuration","text":"<pre><code>// frontend/playwright.config.ts\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests/e2e',\n  fullyParallel: true,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 1 : undefined,\n  reporter: [\n    ['html'],\n    ['json', { outputFile: 'test-results/results.json' }]\n  ],\n  use: {\n    baseURL: process.env.BASE_URL || 'http://localhost:5175',\n    extraHTTPHeaders: {\n      'X-API-URL': process.env.API_URL || 'http://localhost:8080'\n    },\n    trace: 'on-first-retry',\n    screenshot: 'only-on-failure',\n    video: 'retain-on-failure',\n  },\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n  ],\n  webServer: [\n    {\n      command: 'npm run dev',\n      url: 'http://localhost:5175',\n      reuseExistingServer: !process.env.CI,\n      timeout: 120 * 1000,\n    },\n    {\n      command: 'cd .. &amp;&amp; make dev-up',\n      url: 'http://localhost:8080/health',\n      reuseExistingServer: !process.env.CI,\n      timeout: 120 * 1000,\n    }\n  ],\n});\n</code></pre>"},{"location":"development/testing/#e2e-test-examples","title":"E2E Test Examples","text":"<pre><code>// frontend/tests/e2e/auth-flow.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Authentication Flow', () =&gt; {\n  test.beforeEach(async ({ page }) =&gt; {\n    // Clear storage before each test\n    await page.goto('/');\n    await page.evaluate(() =&gt; {\n      localStorage.clear();\n      sessionStorage.clear();\n    });\n  });\n\n  test('complete authentication workflow', async ({ page }) =&gt; {\n    // Start at login page\n    await page.goto('/login');\n\n    // Verify login form\n    await expect(page.locator('input[name=\"username\"]')).toBeVisible();\n    await expect(page.locator('input[name=\"password\"]')).toBeVisible();\n\n    // Fill and submit login form\n    await page.fill('input[name=\"username\"]', 'admin');\n    await page.fill('input[name=\"password\"]', 'password');\n    await page.click('button[type=\"submit\"]');\n\n    // Wait for redirect to dashboard\n    await page.waitForURL('/dashboard');\n\n    // Verify successful login\n    await expect(page.locator('[data-testid=\"user-menu\"]')).toBeVisible();\n    await expect(page.locator('text=Welcome, admin')).toBeVisible();\n\n    // Test protected navigation\n    await page.click('nav a[href=\"/devices\"]');\n    await page.waitForURL('/devices');\n    await expect(page.locator('h1:has-text(\"Devices\")')).toBeVisible();\n\n    // Test logout\n    await page.click('[data-testid=\"user-menu\"]');\n    await page.click('button:has-text(\"Logout\")');\n    await page.waitForURL('/login');\n\n    // Verify logout\n    await expect(page.locator('input[name=\"username\"]')).toBeVisible();\n  });\n\n  test('device management workflow', async ({ page }) =&gt; {\n    // Login first\n    await page.goto('/login');\n    await page.fill('input[name=\"username\"]', 'admin');\n    await page.fill('input[name=\"password\"]', 'password');\n    await page.click('button[type=\"submit\"]');\n    await page.waitForURL('/dashboard');\n\n    // Navigate to devices\n    await page.click('nav a[href=\"/devices\"]');\n\n    // Add new device\n    await page.click('button:has-text(\"Add Device\")');\n    await page.fill('input[name=\"device_name\"]', 'Test Device');\n    await page.fill('input[name=\"device_id\"]', 'test-device-001');\n    await page.selectOption('select[name=\"platform\"]', 'macOS');\n    await page.click('button[type=\"submit\"]');\n\n    // Verify device appears in list\n    await expect(page.locator('text=Test Device')).toBeVisible();\n\n    // Verify device details\n    await page.click('text=Test Device');\n    await expect(page.locator('text=test-device-001')).toBeVisible();\n    await expect(page.locator('text=macOS')).toBeVisible();\n  });\n\n  test('admin panel workflow', async ({ page }) =&gt; {\n    // Login as admin\n    await page.goto('/login');\n    await page.fill('input[name=\"username\"]', 'admin');\n    await page.fill('input[name=\"password\"]', 'password');\n    await page.click('button[type=\"submit\"]');\n    await page.waitForURL('/dashboard');\n\n    // Navigate to admin panel\n    await page.click('nav a[href=\"/admin\"]');\n\n    // Check user management\n    await page.click('tab:has-text(\"Users\")');\n    await expect(page.locator('table')).toBeVisible();\n    await expect(page.locator('td:has-text(\"admin\")')).toBeVisible();\n\n    // Check role management\n    await page.click('tab:has-text(\"Roles\")');\n    await expect(page.locator('text=admin')).toBeVisible();\n    await expect(page.locator('text=user')).toBeVisible();\n  });\n});\n</code></pre>"},{"location":"development/testing/#page-object-model","title":"Page Object Model","text":"<pre><code>// frontend/tests/e2e/pages/LoginPage.ts\nexport class LoginPage {\n  constructor(private page: Page) {}\n\n  async goto() {\n    await this.page.goto('/login');\n  }\n\n  async login(username: string, password: string) {\n    await this.page.fill('input[name=\"username\"]', username);\n    await this.page.fill('input[name=\"password\"]', password);\n    await this.page.click('button[type=\"submit\"]');\n  }\n\n  async expectLoginForm() {\n    await expect(this.page.locator('input[name=\"username\"]')).toBeVisible();\n    await expect(this.page.locator('input[name=\"password\"]')).toBeVisible();\n    await expect(this.page.locator('button[type=\"submit\"]')).toBeVisible();\n  }\n\n  async expectError(message: string) {\n    await expect(this.page.locator(`text=${message}`)).toBeVisible();\n  }\n}\n\n// Usage in tests\ntest('login with invalid credentials', async ({ page }) =&gt; {\n  const loginPage = new LoginPage(page);\n\n  await loginPage.goto();\n  await loginPage.expectLoginForm();\n  await loginPage.login('admin', 'wrong-password');\n  await loginPage.expectError('Invalid credentials');\n});\n</code></pre>"},{"location":"development/testing/#performance-testing","title":"\u26a1 Performance Testing","text":""},{"location":"development/testing/#load-testing-with-k6","title":"Load Testing with k6","text":"<pre><code>// tests/load/basic-load-test.js\nimport http from 'k6/http';\nimport { check, sleep } from 'k6';\nimport { Rate } from 'k6/metrics';\n\nconst errorRate = new Rate('errors');\n\nexport let options = {\n  stages: [\n    { duration: '2m', target: 100 }, // Ramp up to 100 users\n    { duration: '5m', target: 100 }, // Stay at 100 users\n    { duration: '2m', target: 200 }, // Ramp up to 200 users\n    { duration: '5m', target: 200 }, // Stay at 200 users\n    { duration: '2m', target: 0 },   // Ramp down to 0 users\n  ],\n  thresholds: {\n    http_req_duration: ['p(95)&lt;500'], // 95% of requests must complete within 500ms\n    http_req_failed: ['rate&lt;0.1'],    // Error rate must be below 10%\n    errors: ['rate&lt;0.1'],\n  },\n};\n\nconst BASE_URL = __ENV.BASE_URL || 'http://localhost:8080';\n\nexport function setup() {\n  // Authenticate once and return token\n  const loginResponse = http.post(`${BASE_URL}/api/auth/login`, JSON.stringify({\n    username: 'admin',\n    password: 'password',\n  }), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n\n  return {\n    token: loginResponse.json('access_token'),\n  };\n}\n\nexport default function(data) {\n  // Test health endpoint\n  let response = http.get(`${BASE_URL}/health`);\n  check(response, {\n    'health check status is 200': (r) =&gt; r.status === 200,\n    'health check response time &lt; 100ms': (r) =&gt; r.timings.duration &lt; 100,\n  }) || errorRate.add(1);\n\n  // Test authenticated endpoint\n  response = http.get(`${BASE_URL}/api/auth/me`, {\n    headers: {\n      'Authorization': `Bearer ${data.token}`,\n    },\n  });\n  check(response, {\n    'auth me status is 200': (r) =&gt; r.status === 200,\n    'auth me response time &lt; 200ms': (r) =&gt; r.timings.duration &lt; 200,\n  }) || errorRate.add(1);\n\n  // Test device listing\n  response = http.get(`${BASE_URL}/api/devices`, {\n    headers: {\n      'Authorization': `Bearer ${data.token}`,\n    },\n  });\n  check(response, {\n    'devices status is 200': (r) =&gt; r.status === 200,\n    'devices response time &lt; 300ms': (r) =&gt; r.timings.duration &lt; 300,\n  }) || errorRate.add(1);\n\n  sleep(1);\n}\n</code></pre>"},{"location":"development/testing/#benchmark-tests","title":"Benchmark Tests","text":"<pre><code>// pkg/auth/jwt_benchmark_test.go\npackage auth\n\nimport (\n    \"context\"\n    \"testing\"\n    \"time\"\n)\n\nfunc BenchmarkJWTService_GenerateToken(b *testing.B) {\n    service := NewJWTService(&amp;JWTConfig{\n        Secret:          \"benchmark-secret\",\n        AccessTokenTTL:  time.Hour,\n        RefreshTokenTTL: 24 * time.Hour,\n    }, nil)\n\n    b.ResetTimer()\n    b.ReportAllocs()\n\n    for i := 0; i &lt; b.N; i++ {\n        _, err := service.GenerateToken(\n            context.Background(),\n            \"user-123\",\n            \"testuser\",\n            time.Now().Add(time.Hour),\n            []string{\"user\"},\n            []string{\"read:profile\"},\n        )\n        if err != nil {\n            b.Fatal(err)\n        }\n    }\n}\n\nfunc BenchmarkJWTService_ValidateToken(b *testing.B) {\n    service := NewJWTService(&amp;JWTConfig{\n        Secret:          \"benchmark-secret\",\n        AccessTokenTTL:  time.Hour,\n        RefreshTokenTTL: 24 * time.Hour,\n    }, nil)\n\n    // Generate a token to validate\n    token, err := service.GenerateToken(\n        context.Background(),\n        \"user-123\",\n        \"testuser\",\n        time.Now().Add(time.Hour),\n        []string{\"user\"},\n        []string{\"read:profile\"},\n    )\n    if err != nil {\n        b.Fatal(err)\n    }\n\n    b.ResetTimer()\n    b.ReportAllocs()\n\n    for i := 0; i &lt; b.N; i++ {\n        _, err := service.ValidateToken(token)\n        if err != nil {\n            b.Fatal(err)\n        }\n    }\n}\n</code></pre>"},{"location":"development/testing/#test-coverage","title":"\ud83d\udcca Test Coverage","text":""},{"location":"development/testing/#measuring-coverage","title":"Measuring Coverage","text":"<pre><code># Backend coverage\nmake test-coverage\nopen coverage.html\n\n# Frontend coverage\ncd frontend\nnpm run test:coverage\nopen coverage/lcov-report/index.html\n\n# Check coverage meets threshold\nmake check-coverage\n</code></pre>"},{"location":"development/testing/#coverage-configuration","title":"Coverage Configuration","text":"<pre><code>// .github/workflows/test.yml\n- name: Test with coverage\n  run: |\n    go test -race -coverprofile=coverage.out -covermode=atomic ./...\n    go tool cover -html=coverage.out -o coverage.html\n\n- name: Check coverage threshold\n  run: |\n    COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')\n    echo \"Coverage: ${COVERAGE}%\"\n    if (( $(echo \"$COVERAGE &lt; 80\" | bc -l) )); then\n      echo \"Coverage ${COVERAGE}% is below 80% threshold\"\n      exit 1\n    fi\n</code></pre>"},{"location":"development/testing/#running-tests","title":"\ud83d\ude80 Running Tests","text":""},{"location":"development/testing/#local-development","title":"Local Development","text":"<pre><code># Run all tests\nmake test\n\n# Run specific test packages\ngo test -v ./pkg/auth/...\ngo test -v ./pkg/handlers/...\n\n# Run with coverage\nmake test-coverage\n\n# Run integration tests\nmake test-integration\n\n# Run E2E tests\ncd frontend\nnpm run test:e2e\n\n# Run load tests\nmake test-load\n</code></pre>"},{"location":"development/testing/#cicd-pipeline","title":"CI/CD Pipeline","text":"<pre><code># .github/workflows/test.yml\nname: Test\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: test\n          POSTGRES_DB: test\n        options: &gt;-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Go\n      uses: actions/setup-go@v4\n      with:\n        go-version: '1.23'\n\n    - name: Install dependencies\n      run: go mod download\n\n    - name: Run tests\n      run: make test\n\n    - name: Run integration tests\n      run: make test-integration\n      env:\n        DATABASE_URL: postgres://postgres:test@localhost:5432/test?sslmode=disable\n\n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.out\n</code></pre>"},{"location":"development/testing/#test-configuration","title":"\ud83d\udd27 Test Configuration","text":""},{"location":"development/testing/#test-environment-variables","title":"Test Environment Variables","text":"<pre><code># Test configuration\nexport TEST_DATABASE_URL=postgres://test:test@localhost:5432/test_db\nexport TEST_REDIS_URL=redis://localhost:6379/1\nexport TEST_JWT_SECRET=test-secret-key\nexport TEST_LOG_LEVEL=error\nexport CI=true\n</code></pre>"},{"location":"development/testing/#test-data-management","title":"Test Data Management","text":"<pre><code>// tests/testdata/users.go\npackage testdata\n\nimport \"mvp.local/pkg/models\"\n\nvar TestUsers = []models.User{\n    {\n        ID:        \"admin-user-id\",\n        Username:  \"admin\",\n        Email:     \"admin@test.com\",\n        FirstName: \"Admin\",\n        LastName:  \"User\",\n        IsActive:  true,\n        IsAdmin:   true,\n    },\n    {\n        ID:        \"regular-user-id\",\n        Username:  \"user\",\n        Email:     \"user@test.com\",\n        FirstName: \"Regular\",\n        LastName:  \"User\",\n        IsActive:  true,\n        IsAdmin:   false,\n    },\n}\n\nfunc SeedTestUsers(db *gorm.DB) error {\n    for _, user := range TestUsers {\n        if err := db.Create(&amp;user).Error; err != nil {\n            return err\n        }\n    }\n    return nil\n}\n</code></pre>"},{"location":"development/testing/#testing-best-practices","title":"\ud83d\udea8 Testing Best Practices","text":""},{"location":"development/testing/#1-test-naming-conventions","title":"1. Test Naming Conventions","text":"<pre><code>// Good test names\nfunc TestJWTService_GenerateToken_WithValidInput_ReturnsToken(t *testing.T)\nfunc TestAuthHandler_Login_WithInvalidCredentials_Returns401(t *testing.T)\nfunc TestDeviceService_CreateDevice_WithExistingDeviceID_ReturnsConflict(t *testing.T)\n\n// Table-driven tests\nfunc TestPasswordValidation(t *testing.T) {\n    tests := []struct {\n        name     string\n        password string\n        expected bool\n    }{\n        {\"valid_password\", \"SecurePass123!\", true},\n        {\"too_short\", \"123\", false},\n        {\"no_uppercase\", \"securepass123!\", false},\n    }\n    // ...\n}\n</code></pre>"},{"location":"development/testing/#2-test-organization","title":"2. Test Organization","text":"<pre><code>tests/\n\u251c\u2500\u2500 integration/         # Integration tests\n\u2502   \u251c\u2500\u2500 auth_test.go\n\u2502   \u251c\u2500\u2500 device_test.go\n\u2502   \u2514\u2500\u2500 admin_test.go\n\u251c\u2500\u2500 load/               # Performance tests\n\u2502   \u251c\u2500\u2500 basic-load-test.js\n\u2502   \u2514\u2500\u2500 stress-test.js\n\u251c\u2500\u2500 testdata/           # Test fixtures\n\u2502   \u251c\u2500\u2500 users.json\n\u2502   \u2514\u2500\u2500 devices.json\n\u2514\u2500\u2500 fixtures/           # Test setup utilities\n    \u251c\u2500\u2500 database.go\n    \u2514\u2500\u2500 server.go\n</code></pre>"},{"location":"development/testing/#3-test-isolation","title":"3. Test Isolation","text":"<pre><code>func TestWithCleanDatabase(t *testing.T) {\n    db := setupTestDB(t)\n    defer cleanupTestDB(t, db)\n\n    // Test logic here\n}\n\nfunc setupTestDB(t *testing.T) *gorm.DB {\n    db, err := gorm.Open(sqlite.Open(\":memory:\"), &amp;gorm.Config{})\n    require.NoError(t, err)\n\n    err = db.AutoMigrate(&amp;models.User{}, &amp;models.Device{})\n    require.NoError(t, err)\n\n    return db\n}\n</code></pre>"},{"location":"development/testing/#4-async-testing","title":"4. Async Testing","text":"<pre><code>// Frontend async testing\ntest('loads user data on mount', async () =&gt; {\n  const mockUser = { id: '1', name: 'Test User' };\n  vi.mocked(api.getCurrentUser).mockResolvedValue(mockUser);\n\n  render(&lt;UserProfile /&gt;);\n\n  expect(screen.getByText('Loading...')).toBeInTheDocument();\n\n  await waitFor(() =&gt; {\n    expect(screen.getByText('Test User')).toBeInTheDocument();\n  });\n\n  expect(api.getCurrentUser).toHaveBeenCalledTimes(1);\n});\n</code></pre>"},{"location":"development/testing/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Go Testing Package</li> <li>Testify Documentation</li> <li>Playwright Documentation</li> <li>k6 Documentation</li> <li>React Testing Library</li> <li>Testing Best Practices</li> </ul>"},{"location":"examples/","title":"Integration Examples for Zero Trust Authentication","text":"<p>This directory contains practical integration examples for various frameworks and technologies with the MVP Zero Trust Authentication system. These examples demonstrate real-world usage patterns and best practices.</p>"},{"location":"examples/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Frontend Frameworks</li> <li>Backend Frameworks</li> <li>Mobile Applications</li> <li>API Gateways &amp; Proxies</li> <li>Infrastructure &amp; DevOps</li> <li>Database Integration</li> <li>Monitoring &amp; Observability</li> </ul>"},{"location":"examples/#frontend-frameworks","title":"Frontend Frameworks","text":""},{"location":"examples/#react-applications","title":"React Applications","text":"<ul> <li>React SPA with Hooks - Complete single-page application</li> <li>React + TypeScript - Type-safe React integration</li> <li>Next.js SSR - Server-side rendering with authentication</li> <li>React Native Mobile - Mobile app integration</li> </ul>"},{"location":"examples/#vuejs-applications","title":"Vue.js Applications","text":"<ul> <li>Vue 3 Composition API - Modern Vue.js integration</li> <li>Nuxt.js SSR - Universal Vue.js application</li> <li>Vue 2 Options API - Legacy Vue.js integration</li> </ul>"},{"location":"examples/#angular-applications","title":"Angular Applications","text":"<ul> <li>Angular with Guards - Route protection with guards</li> <li>Angular Interceptors - HTTP interceptor integration</li> </ul>"},{"location":"examples/#other-frontend","title":"Other Frontend","text":"<ul> <li>Vanilla JavaScript - Pure JavaScript integration</li> <li>Svelte Application - Svelte framework integration</li> <li>Web Components - Custom elements integration</li> </ul>"},{"location":"examples/#backend-frameworks","title":"Backend Frameworks","text":""},{"location":"examples/#go-frameworks","title":"Go Frameworks","text":"<ul> <li>Fiber Web Framework - High-performance Go web server</li> <li>Gin Framework - Lightweight Go web framework</li> <li>Echo Framework - Minimalist Go web framework</li> <li>Standard HTTP - Go standard library HTTP server</li> </ul>"},{"location":"examples/#nodejs-frameworks","title":"Node.js Frameworks","text":"<ul> <li>Express.js - Traditional Express.js server</li> <li>Fastify - High-performance Node.js server</li> <li>Koa.js - Modern Node.js framework</li> <li>NestJS - Enterprise Node.js framework</li> </ul>"},{"location":"examples/#python-frameworks","title":"Python Frameworks","text":"<ul> <li>FastAPI - Modern Python API framework</li> <li>Django - Full-featured Python framework</li> <li>Flask - Micro Python framework</li> <li>Starlette - ASGI Python framework</li> </ul>"},{"location":"examples/#other-backend-languages","title":"Other Backend Languages","text":"<ul> <li>ASP.NET Core - .NET Core integration</li> <li>Spring Boot - Java Spring Boot integration</li> <li>Ruby on Rails - Ruby framework integration</li> <li>PHP Laravel - PHP framework integration</li> </ul>"},{"location":"examples/#mobile-applications","title":"Mobile Applications","text":""},{"location":"examples/#native-mobile","title":"Native Mobile","text":"<ul> <li>iOS Swift - Native iOS integration</li> <li>Android Kotlin - Native Android integration</li> </ul>"},{"location":"examples/#cross-platform","title":"Cross-Platform","text":"<ul> <li>React Native - Cross-platform mobile apps</li> <li>Flutter - Google's mobile framework</li> <li>Ionic - Hybrid mobile applications</li> </ul>"},{"location":"examples/#api-gateways-proxies","title":"API Gateways &amp; Proxies","text":""},{"location":"examples/#popular-gateways","title":"Popular Gateways","text":"<ul> <li>Kong Gateway - Kong API Gateway integration</li> <li>Envoy Proxy - Cloud-native proxy</li> <li>NGINX - NGINX reverse proxy</li> <li>Traefik - Modern reverse proxy</li> </ul>"},{"location":"examples/#cloud-gateways","title":"Cloud Gateways","text":"<ul> <li>AWS API Gateway - Amazon API Gateway</li> <li>Google Cloud Endpoints - Google Cloud integration</li> <li>Azure API Management - Microsoft Azure integration</li> </ul>"},{"location":"examples/#infrastructure-devops","title":"Infrastructure &amp; DevOps","text":""},{"location":"examples/#container-orchestration","title":"Container Orchestration","text":"<ul> <li>Kubernetes - K8s deployment and RBAC</li> <li>Docker Compose - Local development stack</li> <li>Docker Swarm - Docker orchestration</li> </ul>"},{"location":"examples/#service-mesh","title":"Service Mesh","text":"<ul> <li>Istio - Service mesh integration</li> <li>Linkerd - Lightweight service mesh</li> <li>Consul Connect - HashiCorp service mesh</li> </ul>"},{"location":"examples/#cicd-pipelines","title":"CI/CD Pipelines","text":"<ul> <li>GitHub Actions - GitHub CI/CD integration</li> <li>GitLab CI - GitLab pipeline integration</li> <li>Jenkins - Jenkins pipeline integration</li> <li>Azure DevOps - Microsoft DevOps integration</li> </ul>"},{"location":"examples/#database-integration","title":"Database Integration","text":""},{"location":"examples/#sql-databases","title":"SQL Databases","text":"<ul> <li>PostgreSQL - Advanced PostgreSQL integration</li> <li>MySQL - MySQL database integration</li> <li>SQLite - Lightweight database integration</li> </ul>"},{"location":"examples/#nosql-databases","title":"NoSQL Databases","text":"<ul> <li>MongoDB - Document database integration</li> <li>Redis - In-memory cache integration</li> <li>Cassandra - Distributed database integration</li> </ul>"},{"location":"examples/#cloud-databases","title":"Cloud Databases","text":"<ul> <li>AWS RDS - Amazon RDS integration</li> <li>Google Cloud SQL - Google Cloud database</li> <li>Azure SQL - Microsoft Azure database</li> </ul>"},{"location":"examples/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"examples/#metrics-monitoring","title":"Metrics &amp; Monitoring","text":"<ul> <li>Prometheus - Metrics collection and alerting</li> <li>Grafana - Visualization and dashboards</li> <li>Datadog - Cloud monitoring platform</li> </ul>"},{"location":"examples/#logging","title":"Logging","text":"<ul> <li>ELK Stack - Elasticsearch, Logstash, Kibana</li> <li>Fluentd - Log collection and forwarding</li> <li>Jaeger - Distributed tracing</li> </ul>"},{"location":"examples/#application-performance","title":"Application Performance","text":"<ul> <li>New Relic - APM platform integration</li> <li>AppDynamics - Performance monitoring</li> <li>OpenTelemetry - Observability framework</li> </ul>"},{"location":"examples/#getting-started","title":"Getting Started","text":"<p>Each example includes:</p> <ol> <li>README.md - Detailed setup and usage instructions</li> <li>Source Code - Complete, runnable example</li> <li>Configuration - Environment and deployment configs</li> <li>Documentation - Architecture and design decisions</li> <li>Tests - Unit and integration tests</li> </ol>"},{"location":"examples/#prerequisites","title":"Prerequisites","text":"<ul> <li>Zero Trust Auth service running (see main documentation)</li> <li>Appropriate SDK installed (see SDK documentation)</li> <li>Framework-specific prerequisites (detailed in each example)</li> </ul>"},{"location":"examples/#quick-start","title":"Quick Start","text":"<ol> <li>Choose your framework from the examples above</li> <li>Navigate to the example directory</li> <li>Follow the README.md instructions</li> <li>Run the example locally</li> <li>Adapt the code for your use case</li> </ol>"},{"location":"examples/#example-structure","title":"Example Structure","text":"<pre><code>examples/\n\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 react-spa/\n\u2502   \u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2514\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 go-fiber/\n\u2502   \u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2502   \u251c\u2500\u2500 go.mod\n\u2502   \u2502   \u251c\u2500\u2500 main.go\n\u2502   \u2502   \u2514\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"examples/#contributing","title":"Contributing","text":"<p>To add a new integration example:</p> <ol> <li>Create a new directory under the appropriate category</li> <li>Include a comprehensive README.md</li> <li>Provide complete, working source code</li> <li>Add configuration examples</li> <li>Include tests where applicable</li> <li>Update this main README.md</li> </ol>"},{"location":"examples/#support","title":"Support","text":"<p>For questions about specific integrations:</p> <ol> <li>Check the example's README.md</li> <li>Review the SDK documentation</li> <li>Consult the main documentation</li> <li>Open an issue on the project repository</li> </ol>"},{"location":"examples/#license","title":"License","text":"<p>All examples are provided under the same license as the main project.</p>"},{"location":"examples/backend/go-fiber/","title":"Go Fiber Integration with Zero Trust Authentication","text":"<p>This example demonstrates how to integrate Zero Trust Authentication into a Go web application using the Fiber v2 framework. It showcases middleware-based authentication, role-based access control, and best practices for secure API development.</p>"},{"location":"examples/backend/go-fiber/#features","title":"Features","text":"<ul> <li>\u2705 Fiber v2 middleware integration</li> <li>\u2705 JWT token validation</li> <li>\u2705 Role-based access control (RBAC)</li> <li>\u2705 Scope-based permissions</li> <li>\u2705 Rate limiting and security headers</li> <li>\u2705 Structured logging with zerolog</li> <li>\u2705 OpenTelemetry observability</li> <li>\u2705 Graceful shutdown</li> <li>\u2705 Health checks and metrics</li> </ul>"},{"location":"examples/backend/go-fiber/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.23.8+</li> <li>Zero Trust Auth service running</li> <li>Basic Go and Fiber knowledge</li> </ul>"},{"location":"examples/backend/go-fiber/#quick-start","title":"Quick Start","text":"<pre><code># Initialize Go module\ngo mod init zerotrust-fiber-example\ncd zerotrust-fiber-example\n\n# Install dependencies\ngo get github.com/gofiber/fiber/v2\ngo get mvp.local/pkg/sdk/go\ngo get github.com/gofiber/fiber/v2/middleware/cors\ngo get github.com/gofiber/fiber/v2/middleware/helmet\ngo get github.com/gofiber/fiber/v2/middleware/limiter\ngo get github.com/gofiber/fiber/v2/middleware/logger\ngo get github.com/gofiber/fiber/v2/middleware/recover\n\n# Copy example files (see below)\n# Run the application\ngo run main.go\n</code></pre>"},{"location":"examples/backend/go-fiber/#project-structure","title":"Project Structure","text":"<pre><code>zerotrust-fiber-example/\n\u251c\u2500\u2500 main.go\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 config.go\n\u251c\u2500\u2500 middleware/\n\u2502   \u251c\u2500\u2500 auth.go\n\u2502   \u251c\u2500\u2500 cors.go\n\u2502   \u2514\u2500\u2500 security.go\n\u251c\u2500\u2500 handlers/\n\u2502   \u251c\u2500\u2500 auth.go\n\u2502   \u251c\u2500\u2500 users.go\n\u2502   \u2514\u2500\u2500 health.go\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 responses.go\n\u251c\u2500\u2500 services/\n\u2502   \u2514\u2500\u2500 auth.go\n\u2514\u2500\u2500 utils/\n    \u251c\u2500\u2500 logger.go\n    \u2514\u2500\u2500 errors.go\n</code></pre>"},{"location":"examples/backend/go-fiber/#core-implementation","title":"Core Implementation","text":""},{"location":"examples/backend/go-fiber/#main-application","title":"Main Application","text":"<pre><code>// main.go\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n    \"os\"\n    \"os/signal\"\n    \"syscall\"\n    \"time\"\n\n    \"github.com/gofiber/fiber/v2\"\n    \"github.com/gofiber/fiber/v2/middleware/cors\"\n    \"github.com/gofiber/fiber/v2/middleware/helmet\"\n    \"github.com/gofiber/fiber/v2/middleware/limiter\"\n    \"github.com/gofiber/fiber/v2/middleware/logger\"\n    \"github.com/gofiber/fiber/v2/middleware/recover\"\n    \"mvp.local/pkg/sdk/go\"\n\n    \"zerotrust-fiber-example/config\"\n    \"zerotrust-fiber-example/handlers\"\n    \"zerotrust-fiber-example/middleware\"\n    \"zerotrust-fiber-example/services\"\n    \"zerotrust-fiber-example/utils\"\n)\n\nfunc main() {\n    // Load configuration\n    cfg := config.Load()\n\n    // Initialize logger\n    logger := utils.NewLogger(cfg.LogLevel)\n\n    // Initialize Zero Trust SDK client\n    client, err := sdk.NewClient(sdk.Config{\n        BaseURL: cfg.ZeroTrust.BaseURL,\n        APIKey:  cfg.ZeroTrust.APIKey,\n        Timeout: cfg.ZeroTrust.Timeout,\n        Debug:   cfg.Debug,\n    })\n    if err != nil {\n        log.Fatal(\"Failed to create Zero Trust client:\", err)\n    }\n    defer client.Close()\n\n    // Initialize services\n    authService := services.NewAuthService(client, logger)\n\n    // Initialize handlers\n    authHandler := handlers.NewAuthHandler(authService, logger)\n    userHandler := handlers.NewUserHandler(authService, logger)\n    healthHandler := handlers.NewHealthHandler(client, logger)\n\n    // Create Fiber app\n    app := fiber.New(fiber.Config{\n        AppName:      \"Zero Trust Fiber Example\",\n        ServerHeader: \"Fiber\",\n        ErrorHandler: errorHandler,\n        ReadTimeout:  30 * time.Second,\n        WriteTimeout: 30 * time.Second,\n        IdleTimeout:  120 * time.Second,\n    })\n\n    // Security middleware\n    app.Use(helmet.New(helmet.Config{\n        XSSProtection:         \"1; mode=block\",\n        ContentTypeNosniff:    \"nosniff\",\n        XFrameOptions:         \"DENY\",\n        HSTSMaxAge:            31536000,\n        HSTSIncludeSubdomains: true,\n        CSPReportOnly:         false,\n        CSP:                   \"default-src 'self'\",\n    }))\n\n    app.Use(cors.New(cors.Config{\n        AllowOrigins:     cfg.CORS.AllowedOrigins,\n        AllowMethods:     \"GET,POST,HEAD,PUT,DELETE,PATCH,OPTIONS\",\n        AllowHeaders:     \"Origin,Content-Type,Accept,Authorization,X-Requested-With\",\n        AllowCredentials: true,\n        MaxAge:           86400,\n    }))\n\n    // Rate limiting\n    app.Use(limiter.New(limiter.Config{\n        Max:        100,\n        Expiration: 1 * time.Minute,\n        KeyGenerator: func(c *fiber.Ctx) string {\n            return c.IP()\n        },\n        LimitReached: func(c *fiber.Ctx) error {\n            return c.Status(429).JSON(fiber.Map{\n                \"error\": \"Rate limit exceeded\",\n            })\n        },\n    }))\n\n    // Logging middleware\n    app.Use(logger.New(logger.Config{\n        Format: \"${time} ${method} ${path} ${status} ${latency} ${ip} ${ua}\\n\",\n    }))\n\n    // Recovery middleware\n    app.Use(recover.New(recover.Config{\n        EnableStackTrace: cfg.Debug,\n    }))\n\n    // Initialize auth middleware\n    authMiddleware := middleware.NewAuthMiddleware(authService)\n\n    // Public routes\n    public := app.Group(\"/api/v1\")\n    public.Post(\"/auth/login\", authHandler.Login)\n    public.Post(\"/auth/refresh\", authHandler.Refresh)\n    public.Get(\"/health\", healthHandler.Health)\n    public.Get(\"/health/ready\", healthHandler.Ready)\n    public.Get(\"/health/live\", healthHandler.Live)\n\n    // Protected routes\n    protected := app.Group(\"/api/v1\")\n    protected.Use(authMiddleware.Authenticate())\n\n    // User routes\n    users := protected.Group(\"/users\")\n    users.Get(\"/profile\", userHandler.GetProfile)\n    users.Put(\"/profile\", userHandler.UpdateProfile)\n    users.Post(\"/logout\", authHandler.Logout)\n\n    // Admin routes\n    admin := protected.Group(\"/admin\")\n    admin.Use(authMiddleware.RequireRoles(\"admin\"))\n    admin.Get(\"/users\", userHandler.ListUsers)\n    admin.Post(\"/users\", userHandler.CreateUser)\n    admin.Get(\"/users/:id\", userHandler.GetUser)\n    admin.Put(\"/users/:id\", userHandler.UpdateUser)\n    admin.Delete(\"/users/:id\", userHandler.DeleteUser)\n\n    // Super admin routes\n    superAdmin := protected.Group(\"/super-admin\")\n    superAdmin.Use(authMiddleware.RequireRoles(\"super-admin\"))\n    superAdmin.Get(\"/system/stats\", handlers.GetSystemStats)\n\n    // Start server\n    go func() {\n        logger.Info().\n            Str(\"port\", cfg.Server.Port).\n            Msg(\"Starting server\")\n\n        if err := app.Listen(\":\" + cfg.Server.Port); err != nil {\n            logger.Fatal().Err(err).Msg(\"Failed to start server\")\n        }\n    }()\n\n    // Graceful shutdown\n    gracefulShutdown(app, logger)\n}\n\nfunc errorHandler(c *fiber.Ctx, err error) error {\n    code := fiber.StatusInternalServerError\n    message := \"Internal Server Error\"\n\n    if e, ok := err.(*fiber.Error); ok {\n        code = e.Code\n        message = e.Message\n    }\n\n    return c.Status(code).JSON(fiber.Map{\n        \"error\":   message,\n        \"code\":    code,\n        \"path\":    c.Path(),\n        \"method\":  c.Method(),\n        \"time\":    time.Now().Unix(),\n    })\n}\n\nfunc gracefulShutdown(app *fiber.App, logger utils.Logger) {\n    c := make(chan os.Signal, 1)\n    signal.Notify(c, os.Interrupt, syscall.SIGTERM)\n\n    &lt;-c\n    logger.Info().Msg(\"Gracefully shutting down...\")\n\n    ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)\n    defer cancel()\n\n    if err := app.ShutdownWithContext(ctx); err != nil {\n        logger.Error().Err(err).Msg(\"Server forced to shutdown\")\n    }\n\n    logger.Info().Msg(\"Server exited\")\n}\n</code></pre>"},{"location":"examples/backend/go-fiber/#authentication-middleware","title":"Authentication Middleware","text":"<pre><code>// middleware/auth.go\npackage middleware\n\nimport (\n    \"strings\"\n\n    \"github.com/gofiber/fiber/v2\"\n    \"mvp.local/pkg/sdk/go\"\n\n    \"zerotrust-fiber-example/services\"\n    \"zerotrust-fiber-example/utils\"\n)\n\ntype AuthMiddleware struct {\n    authService *services.AuthService\n    logger      utils.Logger\n}\n\nfunc NewAuthMiddleware(authService *services.AuthService) *AuthMiddleware {\n    return &amp;AuthMiddleware{\n        authService: authService,\n        logger:      utils.NewLogger(\"info\"),\n    }\n}\n\n// Authenticate validates JWT tokens and sets user context\nfunc (m *AuthMiddleware) Authenticate() fiber.Handler {\n    return func(c *fiber.Ctx) error {\n        token := m.extractToken(c)\n        if token == \"\" {\n            return c.Status(401).JSON(fiber.Map{\n                \"error\": \"Authentication required\",\n                \"code\":  \"MISSING_TOKEN\",\n            })\n        }\n\n        claims, err := m.authService.ValidateToken(c.Context(), token)\n        if err != nil {\n            m.logger.Error().\n                Err(err).\n                Str(\"ip\", c.IP()).\n                Str(\"user_agent\", c.Get(\"User-Agent\")).\n                Msg(\"Token validation failed\")\n\n            return c.Status(401).JSON(fiber.Map{\n                \"error\": \"Invalid token\",\n                \"code\":  \"INVALID_TOKEN\",\n            })\n        }\n\n        // Store claims in context\n        c.Locals(\"claims\", claims)\n        c.Locals(\"user_id\", claims.Subject)\n        c.Locals(\"user_email\", claims.Email)\n        c.Locals(\"user_roles\", claims.Roles)\n\n        m.logger.Debug().\n            Str(\"user_id\", claims.Subject).\n            Str(\"email\", claims.Email).\n            Strs(\"roles\", claims.Roles).\n            Str(\"path\", c.Path()).\n            Msg(\"User authenticated\")\n\n        return c.Next()\n    }\n}\n\n// RequireRoles ensures user has at least one of the required roles\nfunc (m *AuthMiddleware) RequireRoles(requiredRoles ...string) fiber.Handler {\n    return func(c *fiber.Ctx) error {\n        claims := m.getClaimsFromContext(c)\n        if claims == nil {\n            return c.Status(401).JSON(fiber.Map{\n                \"error\": \"Authentication required\",\n                \"code\":  \"MISSING_AUTH\",\n            })\n        }\n\n        hasRole := false\n        for _, userRole := range claims.Roles {\n            for _, requiredRole := range requiredRoles {\n                if userRole == requiredRole {\n                    hasRole = true\n                    break\n                }\n            }\n            if hasRole {\n                break\n            }\n        }\n\n        if !hasRole {\n            m.logger.Warn().\n                Str(\"user_id\", claims.Subject).\n                Strs(\"user_roles\", claims.Roles).\n                Strs(\"required_roles\", requiredRoles).\n                Str(\"path\", c.Path()).\n                Msg(\"Access denied - insufficient roles\")\n\n            return c.Status(403).JSON(fiber.Map{\n                \"error\":          \"Insufficient permissions\",\n                \"code\":           \"INSUFFICIENT_ROLES\",\n                \"required_roles\": requiredRoles,\n                \"user_roles\":     claims.Roles,\n            })\n        }\n\n        return c.Next()\n    }\n}\n\n// RequireScopes ensures user has all required scopes\nfunc (m *AuthMiddleware) RequireScopes(requiredScopes ...string) fiber.Handler {\n    return func(c *fiber.Ctx) error {\n        claims := m.getClaimsFromContext(c)\n        if claims == nil {\n            return c.Status(401).JSON(fiber.Map{\n                \"error\": \"Authentication required\",\n                \"code\":  \"MISSING_AUTH\",\n            })\n        }\n\n        userScopes := claims.Permissions\n        for _, requiredScope := range requiredScopes {\n            found := false\n            for _, userScope := range userScopes {\n                if userScope == requiredScope {\n                    found = true\n                    break\n                }\n            }\n            if !found {\n                m.logger.Warn().\n                    Str(\"user_id\", claims.Subject).\n                    Strs(\"user_scopes\", userScopes).\n                    Strs(\"required_scopes\", requiredScopes).\n                    Str(\"path\", c.Path()).\n                    Msg(\"Access denied - insufficient scopes\")\n\n                return c.Status(403).JSON(fiber.Map{\n                    \"error\":           \"Insufficient permissions\",\n                    \"code\":            \"INSUFFICIENT_SCOPES\",\n                    \"required_scopes\": requiredScopes,\n                    \"user_scopes\":     userScopes,\n                })\n            }\n        }\n\n        return c.Next()\n    }\n}\n\n// extractToken extracts JWT token from Authorization header\nfunc (m *AuthMiddleware) extractToken(c *fiber.Ctx) string {\n    auth := c.Get(\"Authorization\")\n    if auth == \"\" {\n        return \"\"\n    }\n\n    if strings.HasPrefix(auth, \"Bearer \") {\n        return auth[7:]\n    }\n\n    return \"\"\n}\n\n// getClaimsFromContext retrieves claims from fiber context\nfunc (m *AuthMiddleware) getClaimsFromContext(c *fiber.Ctx) *sdk.Claims {\n    claims := c.Locals(\"claims\")\n    if claims == nil {\n        return nil\n    }\n\n    if c, ok := claims.(*sdk.Claims); ok {\n        return c\n    }\n\n    return nil\n}\n\n// GetUserID extracts user ID from context\nfunc GetUserID(c *fiber.Ctx) string {\n    if userID := c.Locals(\"user_id\"); userID != nil {\n        if id, ok := userID.(string); ok {\n            return id\n        }\n    }\n    return \"\"\n}\n\n// GetUserEmail extracts user email from context\nfunc GetUserEmail(c *fiber.Ctx) string {\n    if email := c.Locals(\"user_email\"); email != nil {\n        if e, ok := email.(string); ok {\n            return e\n        }\n    }\n    return \"\"\n}\n\n// GetUserRoles extracts user roles from context\nfunc GetUserRoles(c *fiber.Ctx) []string {\n    if roles := c.Locals(\"user_roles\"); roles != nil {\n        if r, ok := roles.([]string); ok {\n            return r\n        }\n    }\n    return []string{}\n}\n</code></pre>"},{"location":"examples/backend/go-fiber/#authentication-service","title":"Authentication Service","text":"<pre><code>// services/auth.go\npackage services\n\nimport (\n    \"context\"\n    \"fmt\"\n\n    \"mvp.local/pkg/sdk/go\"\n\n    \"zerotrust-fiber-example/utils\"\n)\n\ntype AuthService struct {\n    client *sdk.Client\n    logger utils.Logger\n}\n\nfunc NewAuthService(client *sdk.Client, logger utils.Logger) *AuthService {\n    return &amp;AuthService{\n        client: client,\n        logger: logger,\n    }\n}\n\nfunc (s *AuthService) Login(ctx context.Context, email, password string) (*sdk.AuthenticationResponse, error) {\n    s.logger.Info().\n        Str(\"email\", email).\n        Msg(\"User login attempt\")\n\n    response, err := s.client.Authenticate(ctx, sdk.AuthenticationRequest{\n        Email:    email,\n        Password: password,\n        Remember: true,\n    })\n\n    if err != nil {\n        s.logger.Error().\n            Err(err).\n            Str(\"email\", email).\n            Msg(\"Login failed\")\n        return nil, fmt.Errorf(\"authentication failed: %w\", err)\n    }\n\n    s.logger.Info().\n        Str(\"email\", email).\n        Str(\"user_id\", response.User.ID).\n        Bool(\"requires_mfa\", response.RequiresMFA).\n        Msg(\"Login successful\")\n\n    return response, nil\n}\n\nfunc (s *AuthService) ValidateToken(ctx context.Context, token string) (*sdk.Claims, error) {\n    response, err := s.client.ValidateToken(ctx, sdk.TokenValidationRequest{\n        Token: token,\n    })\n\n    if err != nil {\n        return nil, fmt.Errorf(\"token validation failed: %w\", err)\n    }\n\n    if !response.Valid {\n        return nil, fmt.Errorf(\"token is invalid\")\n    }\n\n    return response.Claims, nil\n}\n\nfunc (s *AuthService) RefreshToken(ctx context.Context, refreshToken string) (*sdk.AuthenticationResponse, error) {\n    s.logger.Info().Msg(\"Token refresh attempt\")\n\n    response, err := s.client.RefreshToken(ctx, sdk.RefreshTokenRequest{\n        RefreshToken: refreshToken,\n    })\n\n    if err != nil {\n        s.logger.Error().\n            Err(err).\n            Msg(\"Token refresh failed\")\n        return nil, fmt.Errorf(\"token refresh failed: %w\", err)\n    }\n\n    s.logger.Info().\n        Str(\"user_id\", response.User.ID).\n        Msg(\"Token refresh successful\")\n\n    return response, nil\n}\n\nfunc (s *AuthService) Logout(ctx context.Context, token string) error {\n    s.logger.Info().Msg(\"User logout\")\n\n    err := s.client.Logout(ctx, sdk.LogoutRequest{\n        Token:      token,\n        Everywhere: false,\n    })\n\n    if err != nil {\n        s.logger.Error().\n            Err(err).\n            Msg(\"Logout failed\")\n        return fmt.Errorf(\"logout failed: %w\", err)\n    }\n\n    s.logger.Info().Msg(\"Logout successful\")\n    return nil\n}\n\nfunc (s *AuthService) GetUserProfile(ctx context.Context, token string) (*sdk.User, error) {\n    user, err := s.client.GetUserProfile(ctx, token)\n    if err != nil {\n        s.logger.Error().\n            Err(err).\n            Msg(\"Failed to get user profile\")\n        return nil, fmt.Errorf(\"failed to get user profile: %w\", err)\n    }\n\n    return user, nil\n}\n</code></pre>"},{"location":"examples/backend/go-fiber/#authentication-handlers","title":"Authentication Handlers","text":"<pre><code>// handlers/auth.go\npackage handlers\n\nimport (\n    \"github.com/gofiber/fiber/v2\"\n\n    \"zerotrust-fiber-example/middleware\"\n    \"zerotrust-fiber-example/models\"\n    \"zerotrust-fiber-example/services\"\n    \"zerotrust-fiber-example/utils\"\n)\n\ntype AuthHandler struct {\n    authService *services.AuthService\n    logger      utils.Logger\n}\n\nfunc NewAuthHandler(authService *services.AuthService, logger utils.Logger) *AuthHandler {\n    return &amp;AuthHandler{\n        authService: authService,\n        logger:      logger,\n    }\n}\n\nfunc (h *AuthHandler) Login(c *fiber.Ctx) error {\n    var req models.LoginRequest\n    if err := c.BodyParser(&amp;req); err != nil {\n        return c.Status(400).JSON(fiber.Map{\n            \"error\": \"Invalid request body\",\n            \"code\":  \"INVALID_REQUEST\",\n        })\n    }\n\n    // Validate request\n    if req.Email == \"\" || req.Password == \"\" {\n        return c.Status(400).JSON(fiber.Map{\n            \"error\": \"Email and password are required\",\n            \"code\":  \"MISSING_CREDENTIALS\",\n        })\n    }\n\n    response, err := h.authService.Login(c.Context(), req.Email, req.Password)\n    if err != nil {\n        return c.Status(401).JSON(fiber.Map{\n            \"error\": \"Authentication failed\",\n            \"code\":  \"AUTH_FAILED\",\n        })\n    }\n\n    if response.RequiresMFA {\n        return c.JSON(fiber.Map{\n            \"requires_mfa\":   true,\n            \"mfa_challenge\":  response.MFAChallenge,\n            \"partial_token\":  response.PartialToken,\n        })\n    }\n\n    return c.JSON(models.LoginResponse{\n        AccessToken:  response.AccessToken,\n        RefreshToken: response.RefreshToken,\n        ExpiresAt:    response.ExpiresAt,\n        TokenType:    \"Bearer\",\n        User: models.UserInfo{\n            ID:          response.User.ID,\n            Email:       response.User.Email,\n            FirstName:   response.User.FirstName,\n            LastName:    response.User.LastName,\n            DisplayName: response.User.DisplayName,\n            Roles:       response.User.Roles,\n            IsActive:    response.User.IsActive,\n            IsVerified:  response.User.IsVerified,\n        },\n        TrustScore: response.TrustScore,\n    })\n}\n\nfunc (h *AuthHandler) Refresh(c *fiber.Ctx) error {\n    var req models.RefreshRequest\n    if err := c.BodyParser(&amp;req); err != nil {\n        return c.Status(400).JSON(fiber.Map{\n            \"error\": \"Invalid request body\",\n            \"code\":  \"INVALID_REQUEST\",\n        })\n    }\n\n    if req.RefreshToken == \"\" {\n        return c.Status(400).JSON(fiber.Map{\n            \"error\": \"Refresh token is required\",\n            \"code\":  \"MISSING_REFRESH_TOKEN\",\n        })\n    }\n\n    response, err := h.authService.RefreshToken(c.Context(), req.RefreshToken)\n    if err != nil {\n        return c.Status(401).JSON(fiber.Map{\n            \"error\": \"Token refresh failed\",\n            \"code\":  \"REFRESH_FAILED\",\n        })\n    }\n\n    return c.JSON(models.RefreshResponse{\n        AccessToken:  response.AccessToken,\n        RefreshToken: response.RefreshToken,\n        ExpiresAt:    response.ExpiresAt,\n        TokenType:    \"Bearer\",\n    })\n}\n\nfunc (h *AuthHandler) Logout(c *fiber.Ctx) error {\n    token := c.Get(\"Authorization\")\n    if token != \"\" &amp;&amp; len(token) &gt; 7 {\n        token = token[7:] // Remove \"Bearer \" prefix\n    }\n\n    if token == \"\" {\n        return c.Status(400).JSON(fiber.Map{\n            \"error\": \"Token is required\",\n            \"code\":  \"MISSING_TOKEN\",\n        })\n    }\n\n    err := h.authService.Logout(c.Context(), token)\n    if err != nil {\n        h.logger.Error().Err(err).Msg(\"Logout failed\")\n        // Don't return error to client, logout should always succeed from client perspective\n    }\n\n    return c.JSON(fiber.Map{\n        \"message\": \"Logout successful\",\n    })\n}\n</code></pre>"},{"location":"examples/backend/go-fiber/#response-models","title":"Response Models","text":"<pre><code>// models/responses.go\npackage models\n\nimport \"time\"\n\ntype LoginRequest struct {\n    Email    string `json:\"email\" validate:\"required,email\"`\n    Password string `json:\"password\" validate:\"required\"`\n    MFA      string `json:\"mfa,omitempty\"`\n    Remember bool   `json:\"remember,omitempty\"`\n}\n\ntype LoginResponse struct {\n    AccessToken  string    `json:\"access_token\"`\n    RefreshToken string    `json:\"refresh_token\"`\n    ExpiresAt    time.Time `json:\"expires_at\"`\n    TokenType    string    `json:\"token_type\"`\n    User         UserInfo  `json:\"user\"`\n    TrustScore   float64   `json:\"trust_score\"`\n}\n\ntype RefreshRequest struct {\n    RefreshToken string `json:\"refresh_token\" validate:\"required\"`\n}\n\ntype RefreshResponse struct {\n    AccessToken  string    `json:\"access_token\"`\n    RefreshToken string    `json:\"refresh_token\"`\n    ExpiresAt    time.Time `json:\"expires_at\"`\n    TokenType    string    `json:\"token_type\"`\n}\n\ntype UserInfo struct {\n    ID          string   `json:\"id\"`\n    Email       string   `json:\"email\"`\n    FirstName   string   `json:\"first_name\"`\n    LastName    string   `json:\"last_name\"`\n    DisplayName string   `json:\"display_name\"`\n    Roles       []string `json:\"roles\"`\n    IsActive    bool     `json:\"is_active\"`\n    IsVerified  bool     `json:\"is_verified\"`\n}\n\ntype ErrorResponse struct {\n    Error   string `json:\"error\"`\n    Code    string `json:\"code\"`\n    Details string `json:\"details,omitempty\"`\n    TraceID string `json:\"trace_id,omitempty\"`\n}\n</code></pre>"},{"location":"examples/backend/go-fiber/#configuration","title":"Configuration","text":"<pre><code>// config/config.go\npackage config\n\nimport (\n    \"os\"\n    \"time\"\n)\n\ntype Config struct {\n    Server struct {\n        Port string\n        Host string\n    }\n    ZeroTrust struct {\n        BaseURL string\n        APIKey  string\n        Timeout time.Duration\n    }\n    CORS struct {\n        AllowedOrigins []string\n    }\n    LogLevel string\n    Debug    bool\n}\n\nfunc Load() *Config {\n    cfg := &amp;Config{}\n\n    // Server configuration\n    cfg.Server.Port = getEnv(\"PORT\", \"8080\")\n    cfg.Server.Host = getEnv(\"HOST\", \"localhost\")\n\n    // Zero Trust configuration\n    cfg.ZeroTrust.BaseURL = getEnv(\"ZEROTRUST_BASE_URL\", \"http://localhost:8080\")\n    cfg.ZeroTrust.APIKey = getEnv(\"ZEROTRUST_API_KEY\", \"dev-api-key\")\n    cfg.ZeroTrust.Timeout = 30 * time.Second\n\n    // CORS configuration\n    cfg.CORS.AllowedOrigins = []string{\n        getEnv(\"CORS_ALLOWED_ORIGINS\", \"http://localhost:3000,http://localhost:3001\"),\n    }\n\n    // Logging\n    cfg.LogLevel = getEnv(\"LOG_LEVEL\", \"info\")\n    cfg.Debug = getEnv(\"DEBUG\", \"false\") == \"true\"\n\n    return cfg\n}\n\nfunc getEnv(key, defaultValue string) string {\n    if value := os.Getenv(key); value != \"\" {\n        return value\n    }\n    return defaultValue\n}\n</code></pre>"},{"location":"examples/backend/go-fiber/#usage-examples","title":"Usage Examples","text":""},{"location":"examples/backend/go-fiber/#client-integration","title":"Client Integration","text":"<pre><code># Login\ncurl -X POST http://localhost:8080/api/v1/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"user@example.com\",\"password\":\"password123\"}'\n\n# Access protected endpoint\ncurl -X GET http://localhost:8080/api/v1/users/profile \\\n  -H \"Authorization: Bearer eyJhbGciOiJSUzI1NiIs...\"\n\n# Admin endpoint\ncurl -X GET http://localhost:8080/api/v1/admin/users \\\n  -H \"Authorization: Bearer eyJhbGciOiJSUzI1NiIs...\"\n\n# Refresh token\ncurl -X POST http://localhost:8080/api/v1/auth/refresh \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"refresh_token\":\"eyJhbGciOiJSUzI1NiIs...\"}'\n\n# Logout\ncurl -X POST http://localhost:8080/api/v1/users/logout \\\n  -H \"Authorization: Bearer eyJhbGciOiJSUzI1NiIs...\"\n</code></pre>"},{"location":"examples/backend/go-fiber/#environment-configuration","title":"Environment Configuration","text":"<pre><code># .env\nPORT=8080\nHOST=localhost\n\n# Zero Trust Auth service\nZEROTRUST_BASE_URL=https://auth.example.com\nZEROTRUST_API_KEY=your-api-key\n\n# CORS\nCORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001\n\n# Logging\nLOG_LEVEL=info\nDEBUG=false\n</code></pre>"},{"location":"examples/backend/go-fiber/#testing","title":"Testing","text":"<pre><code>// handlers/auth_test.go\npackage handlers_test\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"net/http/httptest\"\n    \"testing\"\n\n    \"github.com/gofiber/fiber/v2\"\n    \"github.com/stretchr/testify/assert\"\n    \"github.com/stretchr/testify/mock\"\n\n    \"zerotrust-fiber-example/handlers\"\n    \"zerotrust-fiber-example/models\"\n)\n\nfunc TestLoginHandler(t *testing.T) {\n    // Create test app\n    app := fiber.New()\n\n    // Mock auth service\n    mockAuthService := &amp;MockAuthService{}\n\n    // Setup handler\n    handler := handlers.NewAuthHandler(mockAuthService, nil)\n    app.Post(\"/login\", handler.Login)\n\n    // Test successful login\n    t.Run(\"successful login\", func(t *testing.T) {\n        loginReq := models.LoginRequest{\n            Email:    \"test@example.com\",\n            Password: \"password123\",\n        }\n\n        reqBody, _ := json.Marshal(loginReq)\n        req := httptest.NewRequest(\"POST\", \"/login\", bytes.NewReader(reqBody))\n        req.Header.Set(\"Content-Type\", \"application/json\")\n\n        mockAuthService.On(\"Login\", mock.Anything, \"test@example.com\", \"password123\").\n            Return(&amp;sdk.AuthenticationResponse{\n                AccessToken:  \"mock-access-token\",\n                RefreshToken: \"mock-refresh-token\",\n                RequiresMFA:  false,\n            }, nil)\n\n        resp, err := app.Test(req)\n        assert.NoError(t, err)\n        assert.Equal(t, 200, resp.StatusCode)\n    })\n}\n</code></pre>"},{"location":"examples/backend/go-fiber/#docker-deployment","title":"Docker Deployment","text":"<pre><code># Dockerfile\nFROM golang:1.23.8-alpine AS builder\n\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\n\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=linux go build -o main .\n\nFROM alpine:latest\nRUN apk --no-cache add ca-certificates\nWORKDIR /root/\n\nCOPY --from=builder /app/main .\nEXPOSE 8080\n\nCMD [\"./main\"]\n</code></pre> <pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  zerotrust-fiber-app:\n    build: .\n    ports:\n      - \"8080:8080\"\n    environment:\n      - ZEROTRUST_BASE_URL=http://auth-service:8080\n      - ZEROTRUST_API_KEY=your-api-key\n      - LOG_LEVEL=info\n    depends_on:\n      - auth-service\n    networks:\n      - zerotrust-network\n\nnetworks:\n  zerotrust-network:\n    external: true\n</code></pre>"},{"location":"examples/backend/go-fiber/#best-practices","title":"Best Practices","text":"<ol> <li>Security</li> <li>Always validate tokens on protected routes</li> <li>Use HTTPS in production</li> <li>Implement rate limiting</li> <li>Sanitize user inputs</li> <li> <p>Use security headers</p> </li> <li> <p>Performance</p> </li> <li>Cache token validation results</li> <li>Use connection pooling</li> <li>Implement graceful shutdown</li> <li> <p>Monitor response times</p> </li> <li> <p>Error Handling</p> </li> <li>Return consistent error responses</li> <li>Log security events</li> <li>Don't leak sensitive information</li> <li> <p>Implement circuit breakers</p> </li> <li> <p>Observability</p> </li> <li>Add structured logging</li> <li>Implement health checks</li> <li>Use distributed tracing</li> <li>Monitor key metrics</li> </ol>"},{"location":"examples/backend/go-fiber/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/backend/go-fiber/#common-issues","title":"Common Issues","text":"<ol> <li>Token Validation Fails</li> <li>Check token format</li> <li>Verify API key</li> <li> <p>Check service connectivity</p> </li> <li> <p>CORS Issues</p> </li> <li>Configure allowed origins</li> <li>Set proper headers</li> <li> <p>Handle preflight requests</p> </li> <li> <p>Performance Issues</p> </li> <li>Enable token caching</li> <li>Optimize middleware order</li> <li>Monitor resource usage</li> </ol> <p>For more examples and advanced patterns, see the examples directory and SDK documentation.</p>"},{"location":"examples/frontend/react-spa/","title":"React SPA with Zero Trust Authentication","text":"<p>This example demonstrates how to integrate Zero Trust Authentication into a React Single Page Application (SPA) using modern React patterns with hooks and context.</p>"},{"location":"examples/frontend/react-spa/#features","title":"Features","text":"<ul> <li>\u2705 User authentication with login/logout</li> <li>\u2705 Protected routes with role-based access</li> <li>\u2705 Automatic token refresh</li> <li>\u2705 Loading states and error handling</li> <li>\u2705 TypeScript support</li> <li>\u2705 Material-UI components</li> <li>\u2705 JWT token management</li> <li>\u2705 Responsive design</li> </ul>"},{"location":"examples/frontend/react-spa/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 18+ and npm/yarn</li> <li>Zero Trust Auth service running</li> <li>Basic React knowledge</li> </ul>"},{"location":"examples/frontend/react-spa/#quick-start","title":"Quick Start","text":"<pre><code># Clone and setup\nnpx create-react-app zerotrust-spa --template typescript\ncd zerotrust-spa\n\n# Install dependencies\nnpm install @mvp/zerotrust-sdk @mui/material @emotion/react @emotion/styled\nnpm install @mui/icons-material react-router-dom\n\n# Copy example files (see below)\n# Start development server\nnpm start\n</code></pre>"},{"location":"examples/frontend/react-spa/#project-structure","title":"Project Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 Auth/\n\u2502   \u2502   \u251c\u2500\u2500 LoginForm.tsx\n\u2502   \u2502   \u251c\u2500\u2500 LogoutButton.tsx\n\u2502   \u2502   \u2514\u2500\u2500 ProtectedRoute.tsx\n\u2502   \u251c\u2500\u2500 Layout/\n\u2502   \u2502   \u251c\u2500\u2500 AppBar.tsx\n\u2502   \u2502   \u251c\u2500\u2500 Navigation.tsx\n\u2502   \u2502   \u2514\u2500\u2500 Layout.tsx\n\u2502   \u2514\u2500\u2500 Pages/\n\u2502       \u251c\u2500\u2500 Dashboard.tsx\n\u2502       \u251c\u2500\u2500 Profile.tsx\n\u2502       \u2514\u2500\u2500 AdminPanel.tsx\n\u251c\u2500\u2500 contexts/\n\u2502   \u2514\u2500\u2500 AuthContext.tsx\n\u251c\u2500\u2500 hooks/\n\u2502   \u251c\u2500\u2500 useAuth.ts\n\u2502   \u2514\u2500\u2500 useApi.ts\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 authService.ts\n\u2502   \u2514\u2500\u2500 apiClient.ts\n\u251c\u2500\u2500 utils/\n\u2502   \u251c\u2500\u2500 tokenManager.ts\n\u2502   \u2514\u2500\u2500 constants.ts\n\u251c\u2500\u2500 App.tsx\n\u2514\u2500\u2500 index.tsx\n</code></pre>"},{"location":"examples/frontend/react-spa/#core-implementation","title":"Core Implementation","text":""},{"location":"examples/frontend/react-spa/#authentication-context","title":"Authentication Context","text":"<pre><code>// src/contexts/AuthContext.tsx\nimport React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { ZeroTrustClient, User, AuthenticationResponse } from '@mvp/zerotrust-sdk';\nimport { authService } from '../services/authService';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n  login: (email: string, password: string) =&gt; Promise&lt;AuthenticationResponse&gt;;\n  logout: () =&gt; Promise&lt;void&gt;;\n  clearError: () =&gt; void;\n}\n\nconst AuthContext = createContext&lt;AuthContextType | undefined&gt;(undefined);\n\nexport const useAuth = () =&gt; {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC&lt;AuthProviderProps&gt; = ({ children }) =&gt; {\n  const [user, setUser] = useState&lt;User | null&gt;(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState&lt;string | null&gt;(null);\n\n  const isAuthenticated = !!user;\n\n  useEffect(() =&gt; {\n    initializeAuth();\n  }, []);\n\n  const initializeAuth = async () =&gt; {\n    try {\n      setIsLoading(true);\n      const currentUser = await authService.getCurrentUser();\n      setUser(currentUser);\n    } catch (err) {\n      console.error('Auth initialization failed:', err);\n      // Clear invalid tokens\n      authService.clearTokens();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string): Promise&lt;AuthenticationResponse&gt; =&gt; {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const response = await authService.login(email, password);\n\n      if (!response.requiresMFA) {\n        setUser(response.user);\n      }\n\n      return response;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Login failed';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async () =&gt; {\n    try {\n      setIsLoading(true);\n      await authService.logout();\n    } catch (err) {\n      console.error('Logout error:', err);\n    } finally {\n      setUser(null);\n      setIsLoading(false);\n    }\n  };\n\n  const clearError = () =&gt; setError(null);\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated,\n    isLoading,\n    error,\n    login,\n    logout,\n    clearError\n  };\n\n  return &lt;AuthContext.Provider value={value}&gt;{children}&lt;/AuthContext.Provider&gt;;\n};\n</code></pre>"},{"location":"examples/frontend/react-spa/#authentication-service","title":"Authentication Service","text":"<pre><code>// src/services/authService.ts\nimport { ZeroTrustClient, User, AuthenticationResponse } from '@mvp/zerotrust-sdk';\nimport { tokenManager } from '../utils/tokenManager';\n\nclass AuthService {\n  private client: ZeroTrustClient;\n\n  constructor() {\n    this.client = new ZeroTrustClient({\n      baseURL: process.env.REACT_APP_AUTH_BASE_URL || 'http://localhost:8080',\n      apiKey: process.env.REACT_APP_AUTH_API_KEY || 'dev-api-key',\n      timeout: 30000\n    });\n  }\n\n  async login(email: string, password: string): Promise&lt;AuthenticationResponse&gt; {\n    const response = await this.client.authenticate({\n      email,\n      password,\n      remember: true\n    });\n\n    if (!response.requiresMFA) {\n      tokenManager.setTokens(\n        response.accessToken,\n        response.refreshToken,\n        response.expiresAt\n      );\n    }\n\n    return response;\n  }\n\n  async logout(): Promise&lt;void&gt; {\n    const token = tokenManager.getAccessToken();\n\n    if (token) {\n      try {\n        await this.client.logout({ token, everywhere: true });\n      } catch (error) {\n        console.error('Logout API call failed:', error);\n      }\n    }\n\n    tokenManager.clearTokens();\n  }\n\n  async getCurrentUser(): Promise&lt;User | null&gt; {\n    const token = await tokenManager.getValidToken();\n    if (!token) {\n      return null;\n    }\n\n    try {\n      // Validate token first\n      const validation = await this.client.validateToken({ token });\n      if (!validation.valid) {\n        tokenManager.clearTokens();\n        return null;\n      }\n\n      // Get user profile\n      return await this.client.getUserProfile(token);\n    } catch (error) {\n      console.error('Failed to get current user:', error);\n      tokenManager.clearTokens();\n      return null;\n    }\n  }\n\n  async refreshToken(): Promise&lt;string | null&gt; {\n    const refreshToken = tokenManager.getRefreshToken();\n    if (!refreshToken) {\n      return null;\n    }\n\n    try {\n      const response = await this.client.refreshToken({ refreshToken });\n\n      tokenManager.setTokens(\n        response.accessToken,\n        response.refreshToken,\n        response.expiresAt\n      );\n\n      return response.accessToken;\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      tokenManager.clearTokens();\n      return null;\n    }\n  }\n\n  clearTokens(): void {\n    tokenManager.clearTokens();\n  }\n}\n\nexport const authService = new AuthService();\n</code></pre>"},{"location":"examples/frontend/react-spa/#token-manager","title":"Token Manager","text":"<pre><code>// src/utils/tokenManager.ts\nimport { ZeroTrustUtils } from '@mvp/zerotrust-sdk';\nimport { authService } from '../services/authService';\n\nclass TokenManager {\n  private accessToken: string | null = null;\n  private refreshToken: string | null = null;\n  private expiresAt: string | null = null;\n  private refreshTimeout: NodeJS.Timeout | null = null;\n\n  constructor() {\n    this.loadTokensFromStorage();\n  }\n\n  setTokens(accessToken: string, refreshToken: string, expiresAt: string): void {\n    this.accessToken = accessToken;\n    this.refreshToken = refreshToken;\n    this.expiresAt = expiresAt;\n\n    // Store in localStorage\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n    localStorage.setItem('tokenExpiresAt', expiresAt);\n\n    this.scheduleRefresh();\n  }\n\n  async getValidToken(): Promise&lt;string | null&gt; {\n    if (!this.accessToken || !this.expiresAt) {\n      return null;\n    }\n\n    // Check if token is expiring soon (within 5 minutes)\n    if (ZeroTrustUtils.isTokenExpiringSoon(this.expiresAt, 300)) {\n      const newToken = await this.performRefresh();\n      return newToken;\n    }\n\n    return this.accessToken;\n  }\n\n  getAccessToken(): string | null {\n    return this.accessToken;\n  }\n\n  getRefreshToken(): string | null {\n    return this.refreshToken;\n  }\n\n  clearTokens(): void {\n    this.accessToken = null;\n    this.refreshToken = null;\n    this.expiresAt = null;\n\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('tokenExpiresAt');\n\n    if (this.refreshTimeout) {\n      clearTimeout(this.refreshTimeout);\n      this.refreshTimeout = null;\n    }\n  }\n\n  private loadTokensFromStorage(): void {\n    this.accessToken = localStorage.getItem('accessToken');\n    this.refreshToken = localStorage.getItem('refreshToken');\n    this.expiresAt = localStorage.getItem('tokenExpiresAt');\n\n    if (this.expiresAt) {\n      this.scheduleRefresh();\n    }\n  }\n\n  private scheduleRefresh(): void {\n    if (this.refreshTimeout) {\n      clearTimeout(this.refreshTimeout);\n    }\n\n    if (!this.expiresAt) return;\n\n    const expiryTime = new Date(this.expiresAt).getTime();\n    const now = Date.now();\n    const refreshTime = expiryTime - now - (5 * 60 * 1000); // 5 minutes before expiry\n\n    if (refreshTime &gt; 0) {\n      this.refreshTimeout = setTimeout(() =&gt; {\n        this.performRefresh();\n      }, refreshTime);\n    }\n  }\n\n  private async performRefresh(): Promise&lt;string | null&gt; {\n    try {\n      return await authService.refreshToken();\n    } catch (error) {\n      console.error('Automatic token refresh failed:', error);\n      this.clearTokens();\n      // Optionally redirect to login\n      window.location.href = '/login';\n      return null;\n    }\n  }\n}\n\nexport const tokenManager = new TokenManager();\n</code></pre>"},{"location":"examples/frontend/react-spa/#login-component","title":"Login Component","text":"<pre><code>// src/components/Auth/LoginForm.tsx\nimport React, { useState } from 'react';\nimport {\n  Paper,\n  TextField,\n  Button,\n  Typography,\n  Alert,\n  Box,\n  CircularProgress\n} from '@mui/material';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useNavigate } from 'react-router-dom';\n\nconst LoginForm: React.FC = () =&gt; {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [mfaCode, setMfaCode] = useState('');\n  const [showMFA, setShowMFA] = useState(false);\n\n  const { login, isLoading, error, clearError } = useAuth();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e: React.FormEvent) =&gt; {\n    e.preventDefault();\n    clearError();\n\n    try {\n      const response = await login(email, password);\n\n      if (response.requiresMFA) {\n        setShowMFA(true);\n        // Handle MFA flow here\n        console.log('MFA required:', response.mfaChallenge);\n      } else {\n        navigate('/dashboard');\n      }\n    } catch (err) {\n      // Error is handled by context\n    }\n  };\n\n  return (\n    &lt;Paper elevation={3} sx={{ p: 4, maxWidth: 400, mx: 'auto', mt: 8 }}&gt;\n      &lt;Typography variant=\"h4\" component=\"h1\" gutterBottom align=\"center\"&gt;\n        Sign In\n      &lt;/Typography&gt;\n\n      {error &amp;&amp; (\n        &lt;Alert severity=\"error\" sx={{ mb: 2 }} onClose={clearError}&gt;\n          {error}\n        &lt;/Alert&gt;\n      )}\n\n      &lt;Box component=\"form\" onSubmit={handleSubmit}&gt;\n        &lt;TextField\n          fullWidth\n          label=\"Email\"\n          type=\"email\"\n          value={email}\n          onChange={(e) =&gt; setEmail(e.target.value)}\n          margin=\"normal\"\n          required\n          disabled={isLoading || showMFA}\n        /&gt;\n\n        &lt;TextField\n          fullWidth\n          label=\"Password\"\n          type=\"password\"\n          value={password}\n          onChange={(e) =&gt; setPassword(e.target.value)}\n          margin=\"normal\"\n          required\n          disabled={isLoading || showMFA}\n        /&gt;\n\n        {showMFA &amp;&amp; (\n          &lt;TextField\n            fullWidth\n            label=\"MFA Code\"\n            value={mfaCode}\n            onChange={(e) =&gt; setMfaCode(e.target.value)}\n            margin=\"normal\"\n            required\n            disabled={isLoading}\n            placeholder=\"Enter 6-digit code\"\n          /&gt;\n        )}\n\n        &lt;Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          sx={{ mt: 3, mb: 2 }}\n          disabled={isLoading}\n          startIcon={isLoading &amp;&amp; &lt;CircularProgress size={20} /&gt;}\n        &gt;\n          {isLoading ? 'Signing In...' : showMFA ? 'Verify MFA' : 'Sign In'}\n        &lt;/Button&gt;\n      &lt;/Box&gt;\n    &lt;/Paper&gt;\n  );\n};\n\nexport default LoginForm;\n</code></pre>"},{"location":"examples/frontend/react-spa/#protected-route-component","title":"Protected Route Component","text":"<pre><code>// src/components/Auth/ProtectedRoute.tsx\nimport React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { CircularProgress, Box } from '@mui/material';\nimport { useAuth } from '../../contexts/AuthContext';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRoles?: string[];\n  fallback?: React.ReactNode;\n}\n\nconst ProtectedRoute: React.FC&lt;ProtectedRouteProps&gt; = ({\n  children,\n  requiredRoles = [],\n  fallback\n}) =&gt; {\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const location = useLocation();\n\n  if (isLoading) {\n    return (\n      &lt;Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\"&gt;\n        &lt;CircularProgress /&gt;\n      &lt;/Box&gt;\n    );\n  }\n\n  if (!isAuthenticated) {\n    return &lt;Navigate to=\"/login\" state={{ from: location }} replace /&gt;;\n  }\n\n  if (requiredRoles.length &gt; 0 &amp;&amp; user) {\n    const hasRequiredRole = requiredRoles.some(role =&gt; \n      user.roles.includes(role)\n    );\n\n    if (!hasRequiredRole) {\n      return fallback || (\n        &lt;Box p={3}&gt;\n          &lt;Typography variant=\"h6\" color=\"error\"&gt;\n            Access Denied\n          &lt;/Typography&gt;\n          &lt;Typography&gt;\n            You don't have permission to access this page.\n          &lt;/Typography&gt;\n        &lt;/Box&gt;\n      );\n    }\n  }\n\n  return &lt;&gt;{children}&lt;/&gt;;\n};\n\nexport default ProtectedRoute;\n</code></pre>"},{"location":"examples/frontend/react-spa/#main-app-component","title":"Main App Component","text":"<pre><code>// src/App.tsx\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nimport { AuthProvider } from './contexts/AuthContext';\nimport Layout from './components/Layout/Layout';\nimport LoginForm from './components/Auth/LoginForm';\nimport ProtectedRoute from './components/Auth/ProtectedRoute';\nimport Dashboard from './components/Pages/Dashboard';\nimport Profile from './components/Pages/Profile';\nimport AdminPanel from './components/Pages/AdminPanel';\n\nconst theme = createTheme({\n  palette: {\n    mode: 'light',\n    primary: {\n      main: '#1976d2',\n    },\n    secondary: {\n      main: '#dc004e',\n    },\n  },\n});\n\nconst App: React.FC = () =&gt; {\n  return (\n    &lt;ThemeProvider theme={theme}&gt;\n      &lt;CssBaseline /&gt;\n      &lt;AuthProvider&gt;\n        &lt;Router&gt;\n          &lt;Routes&gt;\n            &lt;Route path=\"/login\" element={&lt;LoginForm /&gt;} /&gt;\n            &lt;Route path=\"/\" element={&lt;Navigate to=\"/dashboard\" replace /&gt;} /&gt;\n            &lt;Route\n              path=\"/*\"\n              element={\n                &lt;ProtectedRoute&gt;\n                  &lt;Layout&gt;\n                    &lt;Routes&gt;\n                      &lt;Route path=\"/dashboard\" element={&lt;Dashboard /&gt;} /&gt;\n                      &lt;Route path=\"/profile\" element={&lt;Profile /&gt;} /&gt;\n                      &lt;Route\n                        path=\"/admin\"\n                        element={\n                          &lt;ProtectedRoute requiredRoles={['admin']}&gt;\n                            &lt;AdminPanel /&gt;\n                          &lt;/ProtectedRoute&gt;\n                        }\n                      /&gt;\n                    &lt;/Routes&gt;\n                  &lt;/Layout&gt;\n                &lt;/ProtectedRoute&gt;\n              }\n            /&gt;\n          &lt;/Routes&gt;\n        &lt;/Router&gt;\n      &lt;/AuthProvider&gt;\n    &lt;/ThemeProvider&gt;\n  );\n};\n\nexport default App;\n</code></pre>"},{"location":"examples/frontend/react-spa/#environment-configuration","title":"Environment Configuration","text":"<pre><code># .env\nREACT_APP_AUTH_BASE_URL=https://auth.example.com\nREACT_APP_AUTH_API_KEY=your-api-key\n\n# .env.local (for development)\nREACT_APP_AUTH_BASE_URL=http://localhost:8080\nREACT_APP_AUTH_API_KEY=dev-api-key\n</code></pre>"},{"location":"examples/frontend/react-spa/#packagejson","title":"Package.json","text":"<pre><code>{\n  \"name\": \"zerotrust-react-spa\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"@mvp/zerotrust-sdk\": \"^1.0.0\",\n    \"@mui/material\": \"^5.14.0\",\n    \"@mui/icons-material\": \"^5.14.0\",\n    \"@emotion/react\": \"^11.11.0\",\n    \"@emotion/styled\": \"^11.11.0\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-router-dom\": \"^6.15.0\",\n    \"typescript\": \"^5.0.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"browserslist\": {\n    \"production\": [\n      \"&gt;0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n</code></pre>"},{"location":"examples/frontend/react-spa/#testing","title":"Testing","text":"<pre><code>// src/components/Auth/__tests__/LoginForm.test.tsx\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport LoginForm from '../LoginForm';\nimport { AuthProvider } from '../../../contexts/AuthContext';\n\nconst renderWithProviders = (ui: React.ReactElement) =&gt; {\n  return render(\n    &lt;BrowserRouter&gt;\n      &lt;AuthProvider&gt;\n        {ui}\n      &lt;/AuthProvider&gt;\n    &lt;/BrowserRouter&gt;\n  );\n};\n\ndescribe('LoginForm', () =&gt; {\n  test('renders login form', () =&gt; {\n    renderWithProviders(&lt;LoginForm /&gt;);\n\n    expect(screen.getByLabelText(/email/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/password/i)).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /sign in/i })).toBeInTheDocument();\n  });\n\n  test('submits form with email and password', async () =&gt; {\n    renderWithProviders(&lt;LoginForm /&gt;);\n\n    const emailInput = screen.getByLabelText(/email/i);\n    const passwordInput = screen.getByLabelText(/password/i);\n    const submitButton = screen.getByRole('button', { name: /sign in/i });\n\n    fireEvent.change(emailInput, { target: { value: 'test@example.com' } });\n    fireEvent.change(passwordInput, { target: { value: 'password123' } });\n    fireEvent.click(submitButton);\n\n    await waitFor(() =&gt; {\n      expect(submitButton).toBeDisabled();\n    });\n  });\n});\n</code></pre>"},{"location":"examples/frontend/react-spa/#deployment","title":"Deployment","text":""},{"location":"examples/frontend/react-spa/#build-for-production","title":"Build for Production","text":"<pre><code># Install dependencies\nnpm install\n\n# Build optimized bundle\nnpm run build\n\n# Serve static files\nnpx serve -s build\n</code></pre>"},{"location":"examples/frontend/react-spa/#docker-deployment","title":"Docker Deployment","text":"<pre><code># Dockerfile\nFROM node:18-alpine as builder\n\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\nCOPY . .\nRUN npm run build\n\nFROM nginx:alpine\nCOPY --from=builder /app/build /usr/share/nginx/html\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\n\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre>"},{"location":"examples/frontend/react-spa/#best-practices","title":"Best Practices","text":"<ol> <li>Security</li> <li>Store tokens securely</li> <li>Implement automatic token refresh</li> <li>Use HTTPS in production</li> <li> <p>Validate all user inputs</p> </li> <li> <p>Performance</p> </li> <li>Implement code splitting</li> <li>Lazy load components</li> <li>Cache API responses</li> <li> <p>Optimize bundle size</p> </li> <li> <p>User Experience</p> </li> <li>Show loading states</li> <li>Handle errors gracefully</li> <li>Implement proper navigation</li> <li> <p>Provide clear feedback</p> </li> <li> <p>Testing</p> </li> <li>Unit test components</li> <li>Integration test auth flows</li> <li>End-to-end test critical paths</li> <li>Mock external dependencies</li> </ol>"},{"location":"examples/frontend/react-spa/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/frontend/react-spa/#common-issues","title":"Common Issues","text":"<ol> <li>CORS Errors</li> <li>Configure CORS on the auth service</li> <li> <p>Use proxy in development</p> </li> <li> <p>Token Refresh Failures</p> </li> <li>Check refresh token expiration</li> <li> <p>Implement fallback to login</p> </li> <li> <p>Route Protection Issues</p> </li> <li>Verify role requirements</li> <li>Check token validation</li> </ol>"},{"location":"examples/frontend/react-spa/#debug-mode","title":"Debug Mode","text":"<pre><code>// Enable debug logging\nconst client = new ZeroTrustClient({\n  baseURL: process.env.REACT_APP_AUTH_BASE_URL,\n  apiKey: process.env.REACT_APP_AUTH_API_KEY,\n  debug: process.env.NODE_ENV === 'development'\n});\n</code></pre> <p>For more examples and advanced patterns, see the examples directory and SDK documentation.</p>"},{"location":"examples/infrastructure/kubernetes/","title":"Kubernetes Deployment with Zero Trust Authentication","text":"<p>This example demonstrates how to deploy the Zero Trust Authentication system on Kubernetes with proper RBAC, secrets management, observability, and scalability configurations.</p>"},{"location":"examples/infrastructure/kubernetes/#features","title":"Features","text":"<ul> <li>\u2705 Complete Kubernetes deployment manifests</li> <li>\u2705 RBAC and security policies</li> <li>\u2705 Secret and ConfigMap management</li> <li>\u2705 Service mesh integration (Istio)</li> <li>\u2705 Horizontal Pod Autoscaling</li> <li>\u2705 Ingress and Load Balancing</li> <li>\u2705 Monitoring and Observability</li> <li>\u2705 Database and Redis setup</li> <li>\u2705 SPIRE workload identity</li> </ul>"},{"location":"examples/infrastructure/kubernetes/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster (1.25+)</li> <li>kubectl configured</li> <li>Helm 3.x</li> <li>Istio (optional, for service mesh)</li> <li>Prometheus &amp; Grafana (for monitoring)</li> </ul>"},{"location":"examples/infrastructure/kubernetes/#quick-start","title":"Quick Start","text":"<pre><code># Clone and navigate to the example\ngit clone https://github.com/mvp/zerotrust-auth.git\ncd zerotrust-auth/docs/examples/infrastructure/kubernetes\n\n# Create namespace\nkubectl create namespace zerotrust\n\n# Apply configurations\nkubectl apply -f namespace.yaml\nkubectl apply -f secrets/\nkubectl apply -f configs/\nkubectl apply -f deployments/\nkubectl apply -f services/\nkubectl apply -f ingress/\n\n# Verify deployment\nkubectl get pods -n zerotrust\nkubectl get services -n zerotrust\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#project-structure","title":"Project Structure","text":"<pre><code>kubernetes/\n\u251c\u2500\u2500 namespace.yaml\n\u251c\u2500\u2500 secrets/\n\u2502   \u251c\u2500\u2500 auth-secrets.yaml\n\u2502   \u251c\u2500\u2500 database-secrets.yaml\n\u2502   \u2514\u2500\u2500 redis-secrets.yaml\n\u251c\u2500\u2500 configs/\n\u2502   \u251c\u2500\u2500 auth-config.yaml\n\u2502   \u251c\u2500\u2500 database-config.yaml\n\u2502   \u2514\u2500\u2500 observability-config.yaml\n\u251c\u2500\u2500 deployments/\n\u2502   \u251c\u2500\u2500 auth-service.yaml\n\u2502   \u251c\u2500\u2500 database.yaml\n\u2502   \u251c\u2500\u2500 redis.yaml\n\u2502   \u2514\u2500\u2500 frontend.yaml\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 auth-service.yaml\n\u2502   \u251c\u2500\u2500 database-service.yaml\n\u2502   \u2514\u2500\u2500 redis-service.yaml\n\u251c\u2500\u2500 ingress/\n\u2502   \u251c\u2500\u2500 auth-ingress.yaml\n\u2502   \u2514\u2500\u2500 app-ingress.yaml\n\u251c\u2500\u2500 rbac/\n\u2502   \u251c\u2500\u2500 service-accounts.yaml\n\u2502   \u251c\u2500\u2500 roles.yaml\n\u2502   \u2514\u2500\u2500 role-bindings.yaml\n\u251c\u2500\u2500 monitoring/\n\u2502   \u251c\u2500\u2500 servicemonitor.yaml\n\u2502   \u251c\u2500\u2500 prometheusrule.yaml\n\u2502   \u2514\u2500\u2500 grafana-dashboard.yaml\n\u251c\u2500\u2500 autoscaling/\n\u2502   \u2514\u2500\u2500 hpa.yaml\n\u251c\u2500\u2500 istio/\n\u2502   \u251c\u2500\u2500 virtual-service.yaml\n\u2502   \u251c\u2500\u2500 destination-rule.yaml\n\u2502   \u2514\u2500\u2500 gateway.yaml\n\u251c\u2500\u2500 spire/\n\u2502   \u251c\u2500\u2500 spire-server.yaml\n\u2502   \u251c\u2500\u2500 spire-agent.yaml\n\u2502   \u2514\u2500\u2500 registration.yaml\n\u2514\u2500\u2500 helm/\n    \u251c\u2500\u2500 Chart.yaml\n    \u251c\u2500\u2500 values.yaml\n    \u2514\u2500\u2500 templates/\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#core-manifests","title":"Core Manifests","text":""},{"location":"examples/infrastructure/kubernetes/#namespace","title":"Namespace","text":"<pre><code># namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: zerotrust\n  labels:\n    name: zerotrust\n    istio-injection: enabled\n    app.kubernetes.io/name: zerotrust\n    app.kubernetes.io/version: \"1.0.0\"\n---\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: zerotrust-limits\n  namespace: zerotrust\nspec:\n  limits:\n  - default:\n      cpu: \"500m\"\n      memory: \"512Mi\"\n    defaultRequest:\n      cpu: \"100m\"\n      memory: \"128Mi\"\n    type: Container\n---\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: zerotrust-quota\n  namespace: zerotrust\nspec:\n  hard:\n    requests.cpu: \"4\"\n    requests.memory: 8Gi\n    limits.cpu: \"8\"\n    limits.memory: 16Gi\n    persistentvolumeclaims: \"10\"\n    pods: \"20\"\n    services: \"10\"\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#authentication-service-deployment","title":"Authentication Service Deployment","text":"<pre><code># deployments/auth-service.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: auth-service\n  namespace: zerotrust\n  labels:\n    app: auth-service\n    version: v1\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: auth-service\n      version: v1\n  template:\n    metadata:\n      labels:\n        app: auth-service\n        version: v1\n      annotations:\n        prometheus.io/scrape: \"true\"\n        prometheus.io/port: \"8080\"\n        prometheus.io/path: \"/metrics\"\n    spec:\n      serviceAccountName: auth-service\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 65534\n        fsGroup: 65534\n      containers:\n      - name: auth-service\n        image: zerotrust/auth-service:latest\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 8080\n          name: http\n          protocol: TCP\n        - containerPort: 8443\n          name: https\n          protocol: TCP\n        - containerPort: 9090\n          name: metrics\n          protocol: TCP\n        env:\n        - name: PORT\n          value: \"8080\"\n        - name: DB_HOST\n          valueFrom:\n            secretKeyRef:\n              name: database-secrets\n              key: host\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: database-secrets\n              key: username\n        - name: DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: database-secrets\n              key: password\n        - name: DB_NAME\n          valueFrom:\n            secretKeyRef:\n              name: database-secrets\n              key: database\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: redis-secrets\n              key: url\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: auth-secrets\n              key: jwt-secret\n        - name: API_KEY\n          valueFrom:\n            secretKeyRef:\n              name: auth-secrets\n              key: api-key\n        envFrom:\n        - configMapRef:\n            name: auth-config\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        resources:\n          requests:\n            cpu: 200m\n            memory: 256Mi\n          limits:\n            cpu: 500m\n            memory: 512Mi\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            drop:\n            - ALL\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - name: tmp\n          mountPath: /tmp\n        - name: certs\n          mountPath: /app/certs\n          readOnly: true\n      volumes:\n      - name: tmp\n        emptyDir: {}\n      - name: certs\n        secret:\n          secretName: auth-tls-certs\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n      - key: \"node-role.kubernetes.io/control-plane\"\n        operator: \"Exists\"\n        effect: \"NoSchedule\"\n      affinity:\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - weight: 100\n            podAffinityTerm:\n              labelSelector:\n                matchExpressions:\n                - key: app\n                  operator: In\n                  values:\n                  - auth-service\n              topologyKey: kubernetes.io/hostname\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#service-configuration","title":"Service Configuration","text":"<pre><code># services/auth-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: auth-service\n  namespace: zerotrust\n  labels:\n    app: auth-service\n    service: auth-service\n  annotations:\n    service.beta.kubernetes.io/aws-load-balancer-type: nlb\n    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 8080\n    protocol: TCP\n    name: http\n  - port: 443\n    targetPort: 8443\n    protocol: TCP\n    name: https\n  - port: 9090\n    targetPort: 9090\n    protocol: TCP\n    name: metrics\n  selector:\n    app: auth-service\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: auth-service-headless\n  namespace: zerotrust\n  labels:\n    app: auth-service\nspec:\n  type: ClusterIP\n  clusterIP: None\n  ports:\n  - port: 80\n    targetPort: 8080\n    protocol: TCP\n    name: http\n  selector:\n    app: auth-service\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#configmap","title":"ConfigMap","text":"<pre><code># configs/auth-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: auth-config\n  namespace: zerotrust\ndata:\n  LOG_LEVEL: \"info\"\n  ENABLE_CORS: \"true\"\n  CORS_ORIGINS: \"https://app.example.com,https://admin.example.com\"\n  TOKEN_EXPIRY: \"3600\"\n  REFRESH_TOKEN_EXPIRY: \"604800\"\n  MFA_ENABLED: \"true\"\n  RATE_LIMIT_ENABLED: \"true\"\n  RATE_LIMIT_REQUESTS: \"100\"\n  RATE_LIMIT_WINDOW: \"60\"\n  OBSERVABILITY_ENABLED: \"true\"\n  TRACING_ENABLED: \"true\"\n  METRICS_ENABLED: \"true\"\n  JAEGER_ENDPOINT: \"http://jaeger-collector:14268/api/traces\"\n  PROMETHEUS_ENDPOINT: \"http://prometheus:9090\"\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: database-config\n  namespace: zerotrust\ndata:\n  DB_MAX_CONNECTIONS: \"20\"\n  DB_MAX_IDLE_CONNECTIONS: \"5\"\n  DB_CONNECTION_MAX_LIFETIME: \"300s\"\n  DB_SSL_MODE: \"require\"\n  DB_TIMEZONE: \"UTC\"\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: observability-config\n  namespace: zerotrust\ndata:\n  otel-config.yaml: |\n    receivers:\n      otlp:\n        protocols:\n          grpc:\n            endpoint: 0.0.0.0:4317\n          http:\n            endpoint: 0.0.0.0:4318\n\n    processors:\n      batch:\n        timeout: 1s\n        send_batch_size: 1024\n      memory_limiter:\n        limit_mib: 512\n\n    exporters:\n      jaeger:\n        endpoint: jaeger-collector:14250\n        tls:\n          insecure: true\n      prometheus:\n        endpoint: \"0.0.0.0:8889\"\n\n    service:\n      pipelines:\n        traces:\n          receivers: [otlp]\n          processors: [memory_limiter, batch]\n          exporters: [jaeger]\n        metrics:\n          receivers: [otlp]\n          processors: [memory_limiter, batch]\n          exporters: [prometheus]\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#secrets","title":"Secrets","text":"<pre><code># secrets/auth-secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: auth-secrets\n  namespace: zerotrust\ntype: Opaque\ndata:\n  jwt-secret: &lt;base64-encoded-jwt-secret&gt;\n  api-key: &lt;base64-encoded-api-key&gt;\n  encryption-key: &lt;base64-encoded-encryption-key&gt;\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: database-secrets\n  namespace: zerotrust\ntype: Opaque\ndata:\n  host: &lt;base64-encoded-db-host&gt;\n  username: &lt;base64-encoded-db-username&gt;\n  password: &lt;base64-encoded-db-password&gt;\n  database: &lt;base64-encoded-db-name&gt;\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: redis-secrets\n  namespace: zerotrust\ntype: Opaque\ndata:\n  url: &lt;base64-encoded-redis-url&gt;\n  password: &lt;base64-encoded-redis-password&gt;\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#rbac-configuration","title":"RBAC Configuration","text":"<pre><code># rbac/service-accounts.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: auth-service\n  namespace: zerotrust\n  labels:\n    app: auth-service\nautomountServiceAccountToken: true\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: zerotrust\n  name: auth-service-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"secrets\", \"configmaps\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: auth-service-binding\n  namespace: zerotrust\nsubjects:\n- kind: ServiceAccount\n  name: auth-service\n  namespace: zerotrust\nroleRef:\n  kind: Role\n  name: auth-service-role\n  apiGroup: rbac.authorization.k8s.io\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#ingress","title":"Ingress","text":"<pre><code># ingress/auth-ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: auth-ingress\n  namespace: zerotrust\n  annotations:\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/force-ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/rate-limit: \"100\"\n    nginx.ingress.kubernetes.io/rate-limit-window: \"1m\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\nspec:\n  ingressClassName: nginx\n  tls:\n  - hosts:\n    - auth.example.com\n    secretName: auth-tls-cert\n  rules:\n  - host: auth.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: auth-service\n            port:\n              number: 80\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#horizontal-pod-autoscaler","title":"Horizontal Pod Autoscaler","text":"<pre><code># autoscaling/hpa.yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: auth-service-hpa\n  namespace: zerotrust\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: auth-service\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n  behavior:\n    scaleDown:\n      stabilizationWindowSeconds: 300\n      policies:\n      - type: Percent\n        value: 10\n        periodSeconds: 60\n    scaleUp:\n      stabilizationWindowSeconds: 0\n      policies:\n      - type: Percent\n        value: 100\n        periodSeconds: 15\n      - type: Pods\n        value: 4\n        periodSeconds: 15\n      selectPolicy: Max\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#monitoring","title":"Monitoring","text":"<pre><code># monitoring/servicemonitor.yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: auth-service-monitor\n  namespace: zerotrust\n  labels:\n    app: auth-service\nspec:\n  selector:\n    matchLabels:\n      app: auth-service\n  endpoints:\n  - port: metrics\n    path: /metrics\n    interval: 30s\n    scrapeTimeout: 10s\n---\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  name: auth-service-alerts\n  namespace: zerotrust\n  labels:\n    app: auth-service\nspec:\n  groups:\n  - name: auth-service\n    rules:\n    - alert: AuthServiceDown\n      expr: up{job=\"auth-service\"} == 0\n      for: 1m\n      labels:\n        severity: critical\n      annotations:\n        summary: \"Auth service is down\"\n        description: \"Auth service has been down for more than 1 minute\"\n\n    - alert: AuthServiceHighErrorRate\n      expr: rate(http_requests_total{job=\"auth-service\",code=~\"5..\"}[5m]) &gt; 0.1\n      for: 2m\n      labels:\n        severity: warning\n      annotations:\n        summary: \"High error rate in auth service\"\n        description: \"Error rate is {{ $value }} errors per second\"\n\n    - alert: AuthServiceHighLatency\n      expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=\"auth-service\"}[5m])) &gt; 0.5\n      for: 5m\n      labels:\n        severity: warning\n      annotations:\n        summary: \"High latency in auth service\"\n        description: \"95th percentile latency is {{ $value }} seconds\"\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#istio-service-mesh","title":"Istio Service Mesh","text":"<pre><code># istio/gateway.yaml\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: auth-gateway\n  namespace: zerotrust\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - port:\n      number: 443\n      name: https\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      credentialName: auth-tls-cert\n    hosts:\n    - auth.example.com\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - auth.example.com\n    tls:\n      httpsRedirect: true\n---\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: auth-virtual-service\n  namespace: zerotrust\nspec:\n  hosts:\n  - auth.example.com\n  gateways:\n  - auth-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /api/v1/health\n    route:\n    - destination:\n        host: auth-service\n        port:\n          number: 80\n    timeout: 5s\n  - match:\n    - uri:\n        prefix: /api/v1/auth\n    route:\n    - destination:\n        host: auth-service\n        port:\n          number: 80\n    timeout: 30s\n    retries:\n      attempts: 3\n      perTryTimeout: 10s\n  - match:\n    - uri:\n        prefix: /\n    route:\n    - destination:\n        host: auth-service\n        port:\n          number: 80\n    timeout: 30s\n---\napiVersion: networking.istio.io/v1beta1\nkind: DestinationRule\nmetadata:\n  name: auth-destination-rule\n  namespace: zerotrust\nspec:\n  host: auth-service\n  trafficPolicy:\n    connectionPool:\n      tcp:\n        maxConnections: 100\n      http:\n        http1MaxPendingRequests: 50\n        maxRequestsPerConnection: 10\n    loadBalancer:\n      simple: LEAST_CONN\n    outlierDetection:\n      consecutiveErrors: 3\n      interval: 30s\n      baseEjectionTime: 30s\n      maxEjectionPercent: 50\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#spire-integration","title":"SPIRE Integration","text":"<pre><code># spire/spire-server.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: spire-server\n  namespace: zerotrust\n  labels:\n    app: spire-server\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: spire-server\n  template:\n    metadata:\n      labels:\n        app: spire-server\n    spec:\n      serviceAccountName: spire-server\n      containers:\n      - name: spire-server\n        image: ghcr.io/spiffe/spire-server:1.8.0\n        args:\n        - -config\n        - /run/spire/config/server.conf\n        ports:\n        - containerPort: 8081\n          name: grpc\n        volumeMounts:\n        - name: spire-config\n          mountPath: /run/spire/config\n          readOnly: true\n        - name: spire-data\n          mountPath: /run/spire/data\n        livenessProbe:\n          httpGet:\n            path: /live\n            port: 8080\n          failureThreshold: 2\n          initialDelaySeconds: 15\n          periodSeconds: 60\n          timeoutSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: spire-config\n        configMap:\n          name: spire-server\n      - name: spire-data\n        persistentVolumeClaim:\n          claimName: spire-data\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#deployment-commands","title":"Deployment Commands","text":""},{"location":"examples/infrastructure/kubernetes/#initial-setup","title":"Initial Setup","text":"<pre><code># Create namespace and RBAC\nkubectl apply -f namespace.yaml\nkubectl apply -f rbac/\n\n# Create secrets (update with your values first)\nkubectl apply -f secrets/\n\n# Create configurations\nkubectl apply -f configs/\n\n# Deploy services\nkubectl apply -f deployments/\nkubectl apply -f services/\n\n# Setup ingress\nkubectl apply -f ingress/\n\n# Setup monitoring\nkubectl apply -f monitoring/\n\n# Setup autoscaling\nkubectl apply -f autoscaling/\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#istio-setup-optional","title":"Istio Setup (Optional)","text":"<pre><code># Install Istio\nistioctl install --set values.defaultRevision=default\n\n# Enable injection\nkubectl label namespace zerotrust istio-injection=enabled\n\n# Apply Istio configurations\nkubectl apply -f istio/\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#spire-setup-optional","title":"SPIRE Setup (Optional)","text":"<pre><code># Deploy SPIRE\nkubectl apply -f spire/\n\n# Register workloads\nkubectl exec -n zerotrust spire-server-0 -- \\\n  spire-server entry create \\\n  -spiffeID spiffe://example.org/auth-service \\\n  -parentID spiffe://example.org/node \\\n  -selector k8s:ns:zerotrust \\\n  -selector k8s:sa:auth-service\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#helm-chart","title":"Helm Chart","text":""},{"location":"examples/infrastructure/kubernetes/#valuesyaml","title":"values.yaml","text":"<pre><code># helm/values.yaml\nglobal:\n  imageRegistry: \"\"\n  imagePullSecrets: []\n\nreplicaCount: 3\n\nimage:\n  repository: zerotrust/auth-service\n  tag: latest\n  pullPolicy: Always\n\nservice:\n  type: ClusterIP\n  port: 80\n  targetPort: 8080\n\ningress:\n  enabled: true\n  className: nginx\n  annotations:\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\n  hosts:\n  - host: auth.example.com\n    paths:\n    - path: /\n      pathType: Prefix\n  tls:\n  - secretName: auth-tls-cert\n    hosts:\n    - auth.example.com\n\nautoscaling:\n  enabled: true\n  minReplicas: 3\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 70\n  targetMemoryUtilizationPercentage: 80\n\nresources:\n  limits:\n    cpu: 500m\n    memory: 512Mi\n  requests:\n    cpu: 200m\n    memory: 256Mi\n\nnodeSelector: {}\ntolerations: []\naffinity: {}\n\nconfig:\n  logLevel: \"info\"\n  enableCors: true\n  corsOrigins: \"https://app.example.com\"\n  tokenExpiry: 3600\n  mfaEnabled: true\n\nsecrets:\n  jwtSecret: \"\"\n  apiKey: \"\"\n  encryptionKey: \"\"\n\ndatabase:\n  host: \"\"\n  username: \"\"\n  password: \"\"\n  database: \"\"\n\nredis:\n  url: \"\"\n  password: \"\"\n\nmonitoring:\n  enabled: true\n  serviceMonitor:\n    enabled: true\n  prometheusRule:\n    enabled: true\n\nistio:\n  enabled: false\n  gateway:\n    enabled: true\n  virtualService:\n    enabled: true\n  destinationRule:\n    enabled: true\n\nspire:\n  enabled: false\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#installation","title":"Installation","text":"<pre><code># Install with Helm\nhelm upgrade --install zerotrust ./helm \\\n  --namespace zerotrust \\\n  --create-namespace \\\n  --set config.corsOrigins=\"https://app.example.com\" \\\n  --set secrets.jwtSecret=\"your-jwt-secret\" \\\n  --set secrets.apiKey=\"your-api-key\" \\\n  --set database.host=\"postgres.example.com\" \\\n  --set database.username=\"zerotrust\" \\\n  --set database.password=\"secure-password\" \\\n  --set database.database=\"zerotrust_db\"\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#operations","title":"Operations","text":""},{"location":"examples/infrastructure/kubernetes/#scaling","title":"Scaling","text":"<pre><code># Manual scaling\nkubectl scale deployment auth-service --replicas=5 -n zerotrust\n\n# Check autoscaler status\nkubectl describe hpa auth-service-hpa -n zerotrust\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#rolling-updates","title":"Rolling Updates","text":"<pre><code># Update image\nkubectl set image deployment/auth-service auth-service=zerotrust/auth-service:v2.0.0 -n zerotrust\n\n# Check rollout status\nkubectl rollout status deployment/auth-service -n zerotrust\n\n# Rollback if needed\nkubectl rollout undo deployment/auth-service -n zerotrust\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#monitoring_1","title":"Monitoring","text":"<pre><code># Check pod logs\nkubectl logs -f deployment/auth-service -n zerotrust\n\n# Check metrics\nkubectl port-forward service/auth-service 9090:9090 -n zerotrust\ncurl http://localhost:9090/metrics\n\n# Check health\nkubectl port-forward service/auth-service 8080:80 -n zerotrust\ncurl http://localhost:8080/health\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#troubleshooting","title":"Troubleshooting","text":"<pre><code># Check pod status\nkubectl get pods -n zerotrust -o wide\n\n# Describe problematic pod\nkubectl describe pod &lt;pod-name&gt; -n zerotrust\n\n# Check events\nkubectl get events -n zerotrust --sort-by='.lastTimestamp'\n\n# Check logs\nkubectl logs &lt;pod-name&gt; -n zerotrust --previous\n\n# Debug with temporary pod\nkubectl run debug --image=nicolaka/netshoot -it --rm -n zerotrust\n</code></pre>"},{"location":"examples/infrastructure/kubernetes/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Pod Security</li> <li>Run as non-root user</li> <li>Use read-only root filesystem</li> <li>Drop all capabilities</li> <li> <p>Use security contexts</p> </li> <li> <p>Network Security</p> </li> <li>Implement network policies</li> <li>Use TLS for all communications</li> <li> <p>Restrict ingress/egress traffic</p> </li> <li> <p>Secrets Management</p> </li> <li>Use external secret managers</li> <li>Rotate secrets regularly</li> <li> <p>Encrypt secrets at rest</p> </li> <li> <p>RBAC</p> </li> <li>Follow principle of least privilege</li> <li>Use service accounts</li> <li>Regular access reviews</li> </ol> <p>For more examples and advanced patterns, see the examples directory and main documentation.</p>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":"<p>Comprehensive configuration guide for the Zamaz Zero Trust Platform covering all environments and deployment scenarios.</p>"},{"location":"getting-started/configuration/#configuration-overview","title":"Configuration Overview","text":"<p>Zamaz uses a layered configuration approach:</p> <ol> <li>Default values - Built-in sensible defaults</li> <li>Environment variables - Override via <code>.env</code> file or system environment</li> <li>Configuration files - YAML/JSON configuration files</li> <li>Command-line flags - Runtime parameter overrides</li> <li>Kubernetes secrets - Secure credential management</li> </ol>"},{"location":"getting-started/configuration/#configuration-files","title":"Configuration Files","text":""},{"location":"getting-started/configuration/#environment-configuration-env","title":"Environment Configuration (<code>.env</code>)","text":"<p>The primary configuration file for local development:</p> <pre><code># Copy the example configuration\ncp .env.example .env\n\n# Edit with your specific values\nnano .env\n</code></pre>"},{"location":"getting-started/configuration/#application-configuration-configappyaml","title":"Application Configuration (<code>config/app.yaml</code>)","text":"<pre><code># Application Configuration\napp:\n  name: \"zamaz-auth\"\n  version: \"1.0.0\"\n  environment: \"development\"  # development, staging, production\n  debug: false\n\nserver:\n  host: \"0.0.0.0\"\n  port: 8080\n  tls:\n    enabled: false\n    cert_file: \"/etc/certs/tls.crt\"\n    key_file: \"/etc/certs/tls.key\"\n\n  timeouts:\n    read: \"30s\"\n    write: \"30s\"\n    idle: \"120s\"\n    shutdown: \"30s\"\n\ndatabase:\n  driver: \"postgres\"\n  host: \"localhost\"\n  port: 5432\n  name: \"zamaz_db\"\n  user: \"zamaz\"\n  password: \"${DB_PASSWORD}\"\n  ssl_mode: \"disable\"\n\n  pool:\n    max_open: 25\n    max_idle: 5\n    max_lifetime: \"5m\"\n    max_idle_time: \"5m\"\n\ncache:\n  driver: \"redis\"\n  host: \"localhost\"\n  port: 6379\n  database: 0\n  password: \"${REDIS_PASSWORD}\"\n\n  pool:\n    max_active: 100\n    max_idle: 50\n    idle_timeout: \"240s\"\n\nauth:\n  jwt:\n    secret: \"${JWT_SECRET}\"\n    expiry: \"24h\"\n    refresh_expiry: \"168h\"  # 7 days\n    issuer: \"zamaz-auth\"\n    audience: [\"zamaz-api\", \"zamaz-frontend\"]\n\n  password:\n    min_length: 8\n    require_uppercase: true\n    require_lowercase: true\n    require_numbers: true\n    require_symbols: true\n    bcrypt_cost: 12\n\nsecurity:\n  cors:\n    allowed_origins: [\"http://localhost:3000\"]\n    allowed_methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"]\n    allowed_headers: [\"Content-Type\", \"Authorization\"]\n    exposed_headers: [\"X-Total-Count\"]\n    allow_credentials: true\n    max_age: \"12h\"\n\n  rate_limiting:\n    enabled: true\n    requests_per_minute: 60\n    burst: 10\n\n  encryption:\n    key: \"${ENCRYPTION_KEY}\"\n    algorithm: \"AES-256-GCM\"\n\nobservability:\n  logging:\n    level: \"info\"  # debug, info, warn, error\n    format: \"json\"  # json, text\n    output: \"stdout\"  # stdout, file\n    file_path: \"/var/log/zamaz.log\"\n\n  metrics:\n    enabled: true\n    endpoint: \"/metrics\"\n    prometheus:\n      enabled: true\n      endpoint: \"http://localhost:9090\"\n\n  tracing:\n    enabled: true\n    jaeger:\n      endpoint: \"http://localhost:14268/api/traces\"\n      service_name: \"zamaz-auth\"\n      sampler_ratio: 0.1\n\nservice_discovery:\n  enabled: true\n  provider: \"consul\"  # consul, kubernetes, memory\n\n  consul:\n    endpoint: \"http://localhost:8500\"\n    service_name: \"zamaz-auth\"\n    service_port: 8080\n    health_check:\n      interval: \"10s\"\n      timeout: \"3s\"\n      deregister_after: \"30s\"\n\nfeatures:\n  audit_logging: true\n  device_attestation: true\n  multi_factor_auth: true\n  session_management: true\n  api_versioning: true\n</code></pre>"},{"location":"getting-started/configuration/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"getting-started/configuration/#development-environment","title":"Development Environment","text":"<pre><code># config/development.yaml\napp:\n  environment: \"development\"\n  debug: true\n\nserver:\n  tls:\n    enabled: false\n\ndatabase:\n  ssl_mode: \"disable\"\n\nobservability:\n  logging:\n    level: \"debug\"\n    format: \"text\"\n\n  tracing:\n    sampler_ratio: 1.0  # Trace everything in development\n\nsecurity:\n  cors:\n    allowed_origins: [\"*\"]  # Permissive CORS for development\n</code></pre>"},{"location":"getting-started/configuration/#staging-environment","title":"Staging Environment","text":"<pre><code># config/staging.yaml\napp:\n  environment: \"staging\"\n  debug: false\n\nserver:\n  tls:\n    enabled: true\n\ndatabase:\n  ssl_mode: \"require\"\n\nobservability:\n  logging:\n    level: \"info\"\n\n  tracing:\n    sampler_ratio: 0.5\n\nsecurity:\n  cors:\n    allowed_origins: [\"https://staging.zamaz.io\"]\n</code></pre>"},{"location":"getting-started/configuration/#production-environment","title":"Production Environment","text":"<pre><code># config/production.yaml\napp:\n  environment: \"production\"\n  debug: false\n\nserver:\n  tls:\n    enabled: true\n\ndatabase:\n  ssl_mode: \"require\"\n  pool:\n    max_open: 100\n    max_idle: 20\n\ncache:\n  pool:\n    max_active: 500\n    max_idle: 100\n\nobservability:\n  logging:\n    level: \"warn\"\n    format: \"json\"\n\n  tracing:\n    sampler_ratio: 0.01  # Sample 1% in production\n\nsecurity:\n  cors:\n    allowed_origins: [\"https://app.zamaz.io\"]\n\n  rate_limiting:\n    requests_per_minute: 1000\n    burst: 100\n</code></pre>"},{"location":"getting-started/configuration/#kubernetes-kubernetes-configuration","title":":kubernetes: Kubernetes Configuration","text":""},{"location":"getting-started/configuration/#configmap","title":"ConfigMap","text":"<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: zamaz-config\n  namespace: zamaz-system\ndata:\n  app.yaml: |\n    app:\n      environment: \"production\"\n      debug: false\n\n    server:\n      host: \"0.0.0.0\"\n      port: 8080\n      tls:\n        enabled: true\n        cert_file: \"/etc/certs/tls.crt\"\n        key_file: \"/etc/certs/tls.key\"\n\n    observability:\n      metrics:\n        enabled: true\n      tracing:\n        enabled: true\n        jaeger:\n          endpoint: \"http://jaeger-collector.istio-system:14268/api/traces\"\n</code></pre>"},{"location":"getting-started/configuration/#secrets","title":"Secrets","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: zamaz-secrets\n  namespace: zamaz-system\ntype: Opaque\nstringData:\n  DB_PASSWORD: \"secure_database_password\"\n  REDIS_PASSWORD: \"secure_redis_password\"\n  JWT_SECRET: \"your-super-secure-jwt-secret-key\"\n  ENCRYPTION_KEY: \"32-character-encryption-key-here\"\n</code></pre>"},{"location":"getting-started/configuration/#deployment-configuration","title":"Deployment Configuration","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: zamaz-auth\n  namespace: zamaz-system\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: zamaz-auth\n  template:\n    metadata:\n      labels:\n        app: zamaz-auth\n    spec:\n      containers:\n      - name: zamaz-auth\n        image: zamaz/root-zamaz:v1.0.0\n        ports:\n        - containerPort: 8080\n        env:\n        - name: DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: zamaz-secrets\n              key: DB_PASSWORD\n        - name: CONFIG_FILE\n          value: \"/etc/config/app.yaml\"\n        volumeMounts:\n        - name: config\n          mountPath: /etc/config\n        - name: certs\n          mountPath: /etc/certs\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: config\n        configMap:\n          name: zamaz-config\n      - name: certs\n        secret:\n          secretName: zamaz-tls\n</code></pre>"},{"location":"getting-started/configuration/#security-configuration","title":"Security Configuration","text":""},{"location":"getting-started/configuration/#authentication-configuration","title":"Authentication Configuration","text":"<pre><code>auth:\n  providers:\n    # Local authentication\n    local:\n      enabled: true\n\n    # OAuth2 providers\n    oauth2:\n      google:\n        enabled: true\n        client_id: \"${GOOGLE_CLIENT_ID}\"\n        client_secret: \"${GOOGLE_CLIENT_SECRET}\"\n        scopes: [\"openid\", \"email\", \"profile\"]\n\n      github:\n        enabled: true\n        client_id: \"${GITHUB_CLIENT_ID}\"\n        client_secret: \"${GITHUB_CLIENT_SECRET}\"\n        scopes: [\"user:email\"]\n\n    # SAML providers\n    saml:\n      enabled: false\n      entity_id: \"zamaz-auth\"\n      acs_url: \"https://api.zamaz.io/auth/saml/acs\"\n\n  # Multi-factor authentication\n  mfa:\n    enabled: true\n    required_for_admin: true\n    totp:\n      enabled: true\n      issuer: \"Zamaz\"\n    sms:\n      enabled: false\n      provider: \"twilio\"\n</code></pre>"},{"location":"getting-started/configuration/#authorization-configuration","title":"Authorization Configuration","text":"<pre><code>authorization:\n  # Role-based access control\n  rbac:\n    enabled: true\n\n  # Policy as code\n  opa:\n    enabled: true\n    endpoint: \"http://opa-server:8181\"\n\n  # Casbin integration\n  casbin:\n    enabled: true\n    model_file: \"/etc/casbin/rbac_model.conf\"\n    policy_file: \"/etc/casbin/rbac_policy.csv\"\n</code></pre>"},{"location":"getting-started/configuration/#observability-configuration","title":"Observability Configuration","text":""},{"location":"getting-started/configuration/#prometheus-configuration","title":"Prometheus Configuration","text":"<pre><code>observability:\n  metrics:\n    prometheus:\n      enabled: true\n      namespace: \"zamaz\"\n      subsystem: \"auth\"\n\n      # Custom metrics\n      custom_metrics:\n        - name: \"auth_requests_total\"\n          type: \"counter\"\n          help: \"Total authentication requests\"\n\n        - name: \"auth_success_rate\"\n          type: \"histogram\"\n          help: \"Authentication success rate\"\n          buckets: [0.1, 0.5, 1.0, 2.0, 5.0]\n</code></pre>"},{"location":"getting-started/configuration/#jaeger-tracing","title":"Jaeger Tracing","text":"<pre><code>tracing:\n  jaeger:\n    service_name: \"zamaz-auth\"\n    sampler:\n      type: \"probabilistic\"\n      param: 0.1\n    reporter:\n      endpoint: \"http://jaeger-collector:14268/api/traces\"\n      batch_size: 100\n      flush_interval: \"5s\"\n</code></pre>"},{"location":"getting-started/configuration/#logging-configuration","title":"Logging Configuration","text":"<pre><code>logging:\n  level: \"info\"\n  format: \"json\"\n\n  # Structured logging fields\n  fields:\n    service: \"zamaz-auth\"\n    version: \"1.0.0\"\n\n  # Log rotation\n  rotation:\n    max_size: \"100MB\"\n    max_age: \"30d\"\n    max_backups: 10\n    compress: true\n</code></pre>"},{"location":"getting-started/configuration/#feature-flags","title":"Feature Flags","text":"<pre><code>features:\n  # Authentication features\n  password_complexity: true\n  session_timeout: true\n  device_trust: true\n\n  # API features\n  rate_limiting: true\n  request_signing: true\n  api_versioning: true\n\n  # Security features\n  audit_logging: true\n  threat_detection: true\n  compliance_reporting: true\n\n  # Experimental features\n  experimental:\n    webauthn: false\n    zero_knowledge_proofs: false\n    quantum_resistant_crypto: false\n</code></pre>"},{"location":"getting-started/configuration/#runtime-configuration","title":"Runtime Configuration","text":""},{"location":"getting-started/configuration/#command-line-flags","title":"Command Line Flags","text":"<pre><code># Start with custom configuration\n./zamaz-server \\\n  --config /etc/zamaz/config.yaml \\\n  --log-level debug \\\n  --port 8080 \\\n  --db-url \"postgres://user:pass@localhost/db\" \\\n  --enable-metrics \\\n  --metrics-port 9090\n</code></pre>"},{"location":"getting-started/configuration/#environment-variable-override","title":"Environment Variable Override","text":"<pre><code># Override any configuration value\nexport ZAMAZ_SERVER_PORT=8081\nexport ZAMAZ_DATABASE_HOST=db.example.com\nexport ZAMAZ_AUTH_JWT_EXPIRY=1h\nexport ZAMAZ_OBSERVABILITY_LOGGING_LEVEL=debug\n\n# Start server\n./zamaz-server\n</code></pre>"},{"location":"getting-started/configuration/#configuration-validation","title":"Configuration Validation","text":""},{"location":"getting-started/configuration/#validation-script","title":"Validation Script","text":"<pre><code>#!/bin/bash\n# validate-config.sh\n\necho \"Validating Zamaz configuration...\"\n\n# Check required environment variables\nrequired_vars=(\n  \"JWT_SECRET\"\n  \"DATABASE_URL\"\n  \"REDIS_URL\"\n)\n\nfor var in \"${required_vars[@]}\"; do\n  if [[ -z \"${!var}\" ]]; then\n    echo \"\u274c Missing required environment variable: $var\"\n    exit 1\n  fi\ndone\n\n# Validate configuration file\nif [[ -f \"config/app.yaml\" ]]; then\n  echo \"\u2705 Configuration file found\"\n\n  # Validate YAML syntax\n  python3 -c \"import yaml; yaml.safe_load(open('config/app.yaml'))\" 2&gt;/dev/null\n  if [[ $? -eq 0 ]]; then\n    echo \"\u2705 Configuration file is valid YAML\"\n  else\n    echo \"\u274c Configuration file has invalid YAML syntax\"\n    exit 1\n  fi\nelse\n  echo \"\u274c Configuration file not found: config/app.yaml\"\n  exit 1\nfi\n\necho \"\u2705 Configuration validation passed\"\n</code></pre>"},{"location":"getting-started/configuration/#testing-configuration","title":"Testing Configuration","text":"<pre><code># Validate configuration\nmake config-validate\n\n# Test with dry-run\n./zamaz-server --config config/app.yaml --dry-run\n\n# Load test configuration\ncurl http://localhost:8080/api/v1/config/status\n</code></pre>"},{"location":"getting-started/configuration/#configuration-reload","title":"Configuration Reload","text":"<p>Enable hot-reloading of configuration:</p> <pre><code>config:\n  reload:\n    enabled: true\n    interval: \"30s\"\n    signal: \"SIGHUP\"\n\n  watch:\n    enabled: true\n    paths:\n      - \"/etc/zamaz/config.yaml\"\n      - \"/etc/zamaz/secrets\"\n</code></pre>"},{"location":"getting-started/configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Secrets Management</li> <li>Never commit secrets to version control</li> <li>Use environment variables or secret management systems</li> <li> <p>Rotate secrets regularly</p> </li> <li> <p>Environment Separation</p> </li> <li>Use different configurations for each environment</li> <li>Validate configuration before deployment</li> <li> <p>Use infrastructure as code</p> </li> <li> <p>Security Hardening</p> </li> <li>Enable TLS in production</li> <li>Use strong encryption keys</li> <li>Implement proper CORS policies</li> <li> <p>Enable audit logging</p> </li> <li> <p>Performance Tuning</p> </li> <li>Adjust connection pool sizes based on load</li> <li>Configure appropriate timeouts</li> <li>Enable caching where appropriate</li> <li>Monitor and tune observability sampling rates</li> </ol>"},{"location":"getting-started/configuration/#troubleshooting","title":"Troubleshooting","text":"<p>Common configuration issues and solutions:</p> <p>Configuration Not Loading</p> <p>Issue: Application using default values instead of configuration file</p> <p>Solution: <pre><code># Check file path and permissions\nls -la config/app.yaml\n\n# Validate YAML syntax\npython3 -c \"import yaml; print(yaml.safe_load(open('config/app.yaml')))\"\n\n# Check environment variables\nenv | grep ZAMAZ_\n</code></pre></p> <p>Database Connection Failed</p> <p>Issue: Cannot connect to database</p> <p>Solution: <pre><code># Test database connectivity\npg_isready -h localhost -p 5432\n\n# Check database URL format\necho $DATABASE_URL\n\n# Validate credentials\npsql $DATABASE_URL -c \"SELECT 1;\"\n</code></pre></p> <p>For more configuration help, see the Troubleshooting Guide.</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Complete installation guide for the Zamaz Zero Trust Platform across different environments.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"Component Minimum Recommended CPU 2 cores 4+ cores Memory 4 GB RAM 8+ GB RAM Storage 20 GB 50+ GB OS Linux/macOS/Windows Ubuntu 22.04+"},{"location":"getting-started/installation/#required-tools","title":"Required Tools","text":"DevelopmentProduction <pre><code># Core development tools\ngo version         # Go 1.22+\nnode --version     # Node.js 20+\ndocker --version   # Docker 24+\nmake --version     # GNU Make 4+\ngit --version      # Git 2.40+\n</code></pre> <pre><code># Kubernetes cluster tools\nkubectl version    # kubectl 1.28+\nhelm version       # Helm 3.14+\nistioctl version   # Istio 1.20+\n\n# Optional but recommended\nk9s version        # Kubernetes UI\nstern --version    # Log tailing\n</code></pre>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-development-environment","title":"Method 1: Development Environment","text":"<p>Perfect for local development and testing:</p> <pre><code># 1. Clone repository\ngit clone https://github.com/zamaz/root-zamaz.git\ncd root-zamaz\n\n# 2. Setup development environment\nmake dev-setup\n\n# 3. Start all services\nmake dev-up\n\n# 4. Verify installation\nmake health-check\n</code></pre>"},{"location":"getting-started/installation/#method-2-docker-compose","title":"Method 2: Docker Compose","text":"<p>Quick setup with Docker:</p> <pre><code># 1. Clone and navigate\ngit clone https://github.com/zamaz/root-zamaz.git\ncd root-zamaz\n\n# 2. Configure environment\ncp .env.example .env\n# Edit .env with your configuration\n\n# 3. Start services\ndocker-compose up -d\n\n# 4. Check status\ndocker-compose ps\n</code></pre>"},{"location":"getting-started/installation/#method-3-kubernetes-production","title":"Method 3: Kubernetes Production","text":"<p>Full production deployment:</p> <pre><code># 1. Add Helm repository\nhelm repo add zamaz https://charts.zamaz.io\nhelm repo update\n\n# 2. Create namespace\nkubectl create namespace zamaz-system\n\n# 3. Install with custom values\nhelm install zamaz-platform zamaz/zamaz \\\n  --namespace zamaz-system \\\n  --values values-production.yaml \\\n  --wait --timeout=10m\n\n# 4. Verify deployment\nkubectl get pods -n zamaz-system\n</code></pre>"},{"location":"getting-started/installation/#method-4-gitops-with-argo-cd","title":"Method 4: GitOps with Argo CD","text":"<p>Automated GitOps deployment:</p> <pre><code># 1. Install Argo CD\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\n# 2. Deploy Zamaz application\nkubectl apply -f deployments/argocd/application.yaml\n\n# 3. Access Argo CD UI\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":""},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<p>Create <code>.env</code> file with required configuration:</p> <pre><code># =============================================================================\n# ZAMAZ ZERO TRUST PLATFORM CONFIGURATION\n# =============================================================================\n\n# Database Configuration\nDATABASE_URL=postgres://zamaz:secure_password@localhost:5432/zamaz_db\nDATABASE_MAX_CONNECTIONS=25\nDATABASE_TIMEOUT=30s\n\n# Redis Configuration  \nREDIS_URL=redis://localhost:6379\nREDIS_PASSWORD=secure_redis_password\nREDIS_DB=0\n\n# Authentication &amp; Security\nJWT_SECRET=your-super-secure-jwt-secret-key-min-32-chars\nJWT_EXPIRY=24h\nJWT_REFRESH_EXPIRY=168h  # 7 days\n\n# Encryption\nENCRYPTION_KEY=32-character-encryption-key-here\n\n# CORS Configuration\nCORS_ALLOWED_ORIGINS=http://localhost:3000,https://app.zamaz.io\nCORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS\nCORS_ALLOWED_HEADERS=Content-Type,Authorization\n\n# Server Configuration\nHTTP_PORT=8080\nHTTP_HOST=0.0.0.0\nHTTPS_PORT=8443\nTLS_CERT_FILE=/etc/certs/tls.crt\nTLS_KEY_FILE=/etc/certs/tls.key\n\n# Feature Flags\nENABLE_AUTH=true\nENABLE_RATE_LIMITING=true\nENABLE_OBSERVABILITY=true\nENABLE_AUDIT_LOGGING=true\n\n# Observability\nPROMETHEUS_ENDPOINT=http://localhost:9090\nJAEGER_ENDPOINT=http://localhost:14268/api/traces\nLOKI_ENDPOINT=http://localhost:3100\n\n# Service Discovery\nCONSUL_ENDPOINT=http://localhost:8500\nSERVICE_NAME=zamaz-auth\nSERVICE_PORT=8080\n\n# External Services\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USERNAME=notifications@zamaz.io\nSMTP_PASSWORD=smtp_app_password\n\n# Development/Debug\nLOG_LEVEL=info\nDEBUG=false\nENVIRONMENT=production\n</code></pre>"},{"location":"getting-started/installation/#kubernetes-values","title":"Kubernetes Values","text":"<p>For Helm deployments, customize <code>values-production.yaml</code>:</p> <pre><code># Global configuration\nglobal:\n  environment: production\n  domain: zamaz.io\n  tlsSecretName: zamaz-tls\n\n# Application configuration\napp:\n  replicaCount: 3\n  image:\n    repository: zamaz/root-zamaz\n    tag: \"v1.0.0\"\n    pullPolicy: IfNotPresent\n\n  resources:\n    requests:\n      cpu: 500m\n      memory: 512Mi\n    limits:\n      cpu: 1000m\n      memory: 1Gi\n\n# Database configuration\npostgresql:\n  enabled: true\n  auth:\n    database: zamaz_db\n    username: zamaz\n    existingSecret: zamaz-db-secret\n  primary:\n    persistence:\n      size: 100Gi\n      storageClass: fast-ssd\n\n# Redis configuration\nredis:\n  enabled: true\n  auth:\n    enabled: true\n    existingSecret: zamaz-redis-secret\n  master:\n    persistence:\n      size: 50Gi\n\n# Istio configuration\nistio:\n  enabled: true\n  gateway:\n    hosts:\n      - zamaz.io\n      - api.zamaz.io\n</code></pre>"},{"location":"getting-started/installation/#security-setup","title":"Security Setup","text":""},{"location":"getting-started/installation/#tls-certificates","title":"TLS Certificates","text":"<p>Generate TLS certificates for secure communication:</p> <pre><code># Development (self-signed)\nmake generate-certs\n\n# Production (Let's Encrypt with cert-manager)\nkubectl apply -f - &lt;&lt;EOF\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: admin@zamaz.io\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: istio\nEOF\n</code></pre>"},{"location":"getting-started/installation/#secrets-management","title":"Secrets Management","text":"<p>Create required Kubernetes secrets:</p> <pre><code># Database credentials\nkubectl create secret generic zamaz-db-secret \\\n  --from-literal=password='secure_db_password' \\\n  --namespace zamaz-system\n\n# Application secrets\nkubectl create secret generic zamaz-app-secrets \\\n  --from-literal=jwt-secret='your-jwt-secret-key' \\\n  --from-literal=encryption-key='32-char-encryption-key' \\\n  --namespace zamaz-system\n\n# Redis credentials\nkubectl create secret generic zamaz-redis-secret \\\n  --from-literal=password='secure_redis_password' \\\n  --namespace zamaz-system\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#health-checks","title":"Health Checks","text":"<p>Verify all components are running correctly:</p> <pre><code># Check application health\ncurl http://localhost:8080/health\n\n# Check authentication service\ncurl http://localhost:8081/health\n\n# Check database connectivity\nmake db-ping\n\n# Check all services (Docker Compose)\ndocker-compose ps\n\n# Check Kubernetes deployment\nkubectl get pods -n zamaz-system\nkubectl get svc -n zamaz-system\nkubectl get ingress -n zamaz-system\n</code></pre>"},{"location":"getting-started/installation/#functional-tests","title":"Functional Tests","text":"<p>Run comprehensive tests to verify functionality:</p> <pre><code># Unit tests\nmake test-go\n\n# Integration tests  \nmake test-integration\n\n# End-to-end tests\nmake test-e2e\n\n# Load tests\nmake test-load\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>Port Already in Use</p> <p>Problem: Service fails to start due to port conflict</p> <p>Solution: <pre><code># Find and kill process using port\nsudo lsof -ti:8080 | xargs kill -9\n\n# Or use different port\nexport HTTP_PORT=8081\n</code></pre></p> <p>Database Connection Failed</p> <p>Problem: Cannot connect to PostgreSQL</p> <p>Solution: <pre><code># Check database is running\ndocker-compose ps postgres\n\n# Check credentials\npsql $DATABASE_URL -c \"SELECT 1;\"\n\n# Reset database\nmake db-reset\n</code></pre></p> <p>Permission Denied</p> <p>Problem: Docker permission issues</p> <p>Solution: <pre><code># Add user to docker group\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Or use sudo\nsudo docker-compose up -d\n</code></pre></p>"},{"location":"getting-started/installation/#log-analysis","title":"Log Analysis","text":"<p>View logs for debugging:</p> <pre><code># Application logs\nmake logs\n\n# Specific service logs\ndocker-compose logs auth-service\n\n# Kubernetes logs\nkubectl logs -f deployment/zamaz-auth -n zamaz-system\n\n# Follow logs from multiple pods\nstern zamaz -n zamaz-system\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Quick Start Guide - Get familiar with basic operations</li> <li>Configuration Guide - Customize for your environment  </li> <li>Security Setup - Implement security best practices</li> <li>API Documentation - Integrate with your applications</li> <li>Monitoring Setup - Enable comprehensive monitoring</li> </ol>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ul> <li>\ud83d\udcd6 Check the Troubleshooting Guide</li> <li>\ud83d\udc1b Search GitHub Issues</li> <li>\ud83d\udcac Ask in GitHub Discussions</li> <li>\ud83d\udce7 Contact support: support@zamaz.io</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get the Zamaz Zero Trust Platform running in your environment within minutes.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> DevelopmentProduction <ul> <li>Go 1.22+ - Download Go</li> <li>Node.js 20+ - Download Node.js</li> <li>Docker - Install Docker</li> <li>Make - Usually pre-installed on Linux/macOS</li> </ul> <ul> <li>Kubernetes 1.28+ - Kubernetes Setup</li> <li>Helm 3.14+ - Install Helm</li> <li>kubectl - Install kubectl</li> </ul>"},{"location":"getting-started/quick-start/#development-setup","title":"Development Setup","text":""},{"location":"getting-started/quick-start/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/zamaz/root-zamaz.git\ncd root-zamaz\n</code></pre>"},{"location":"getting-started/quick-start/#2-initial-setup","title":"2. Initial Setup","text":"<pre><code># Install dependencies and setup environment\nmake dev-setup\n\n# Start all development services\nmake dev-up\n</code></pre> <p>This will start:</p> <ul> <li>Authentication Server on <code>http://localhost:8081</code></li> <li>Frontend Application on <code>http://localhost:3000</code> </li> <li>API Gateway on <code>http://localhost:8080</code></li> <li>PostgreSQL Database on <code>localhost:5432</code></li> <li>Redis Cache on <code>localhost:6379</code></li> </ul>"},{"location":"getting-started/quick-start/#3-verify-installation","title":"3. Verify Installation","text":"<pre><code># Check all services are running\nmake health-check\n\n# Run tests\nmake test-all\n</code></pre>"},{"location":"getting-started/quick-start/#4-access-the-platform","title":"4. Access the Platform","text":"<p>Open your browser and navigate to:</p> <ul> <li>Frontend: http://localhost:3000</li> <li>API Documentation: http://localhost:8080/swagger/</li> <li>Health Check: http://localhost:8080/health</li> </ul>"},{"location":"getting-started/quick-start/#production-deployment","title":"Production Deployment","text":""},{"location":"getting-started/quick-start/#kubernetes-with-helm","title":"Kubernetes with Helm","text":"<pre><code># Add Helm repository\nhelm repo add zamaz https://charts.zamaz.io\nhelm repo update\n\n# Install the platform\nhelm install zamaz-platform zamaz/zamaz \\\n  --namespace zamaz-system \\\n  --create-namespace \\\n  --values values-production.yaml\n</code></pre>"},{"location":"getting-started/quick-start/#gitops-deployment","title":"GitOps Deployment","text":"<pre><code># Deploy Argo CD\nkubectl apply -f deployments/argocd/\n\n# Apply platform configuration\nkubectl apply -f deployments/kubernetes/overlays/production/\n</code></pre>"},{"location":"getting-started/quick-start/#docker-compose","title":"Docker Compose","text":"<p>For a complete local environment:</p> <pre><code># Start all services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f\n</code></pre>"},{"location":"getting-started/quick-start/#configuration","title":"Configuration","text":""},{"location":"getting-started/quick-start/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file in the project root:</p> <pre><code># Database\nDATABASE_URL=postgres://username:password@localhost:5432/zamaz\nREDIS_URL=redis://localhost:6379\n\n# Authentication\nJWT_SECRET=your-jwt-secret-key\nJWT_EXPIRY=24h\n\n# Security\nCORS_ALLOWED_ORIGINS=http://localhost:3000\nENABLE_AUTH=true\n\n# Observability\nPROMETHEUS_ENDPOINT=http://localhost:9090\nJAEGER_ENDPOINT=http://localhost:14268\n</code></pre>"},{"location":"getting-started/quick-start/#database-setup","title":"Database Setup","text":"<pre><code># Run database migrations\nmake db-migrate\n\n# Seed initial data\nmake db-seed\n</code></pre>"},{"location":"getting-started/quick-start/#verification","title":"Verification","text":""},{"location":"getting-started/quick-start/#1-health-checks","title":"1. Health Checks","text":"<pre><code># Check API health\ncurl http://localhost:8080/health\n\n# Check authentication service\ncurl http://localhost:8081/health\n\n# Check database connectivity\nmake db-ping\n</code></pre>"},{"location":"getting-started/quick-start/#2-authentication-test","title":"2. Authentication Test","text":"<pre><code># Register a new user\ncurl -X POST http://localhost:8080/api/v1/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"testuser\",\n    \"email\": \"test@example.com\", \n    \"password\": \"SecurePassword123!\"\n  }'\n\n# Login\ncurl -X POST http://localhost:8080/api/v1/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"testuser\",\n    \"password\": \"SecurePassword123!\"\n  }'\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you have Zamaz running:</p> <ol> <li>Configure Authentication - Set up OAuth providers and security policies</li> <li>Deploy to Production - Production deployment guidelines  </li> <li>Enable Observability - Set up monitoring and logging</li> <li>API Integration - Integrate with your applications</li> </ol>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":"<p>Port Already in Use</p> <pre><code># Kill processes on required ports\nsudo lsof -ti:8080 | xargs kill -9\nsudo lsof -ti:3000 | xargs kill -9\n</code></pre> <p>Database Connection Failed</p> <pre><code># Ensure PostgreSQL is running\ndocker-compose up -d postgres\n\n# Check database logs\ndocker-compose logs postgres\n</code></pre> <p>Frontend Build Failed</p> <pre><code># Clean and reinstall dependencies\ncd frontend\nrm -rf node_modules package-lock.json\nnpm install\n</code></pre>"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Check the Troubleshooting Guide</li> <li>\ud83d\udc1b Report issues on GitHub</li> <li>\ud83d\udcac Join our community discussions</li> <li>\ud83d\udce7 Contact support: support@zamaz.io</li> </ul>"},{"location":"reference/tags/","title":"Documentation Tags","text":"<p>This page lists all tags used throughout the documentation to help you find related content.</p>"},{"location":"reference/tags/#available-tags","title":"Available Tags","text":""},{"location":"reference/tags/#tag-categories","title":"Tag Categories","text":""},{"location":"reference/tags/#by-technology","title":"By Technology","text":"<ul> <li><code>kubernetes</code> - Kubernetes deployment and configuration</li> <li><code>docker</code> - Docker containers and containerization</li> <li><code>istio</code> - Service mesh and traffic management</li> <li><code>prometheus</code> - Monitoring and metrics</li> <li><code>grafana</code> - Dashboards and visualization</li> <li><code>postgresql</code> - Database configuration and management</li> <li><code>redis</code> - Caching and session management</li> </ul>"},{"location":"reference/tags/#by-function","title":"By Function","text":"<ul> <li><code>authentication</code> - User authentication and authorization</li> <li><code>security</code> - Security policies and procedures</li> <li><code>api</code> - API documentation and usage</li> <li><code>deployment</code> - Deployment guides and procedures</li> <li><code>development</code> - Development setup and workflows</li> <li><code>testing</code> - Testing strategies and procedures</li> <li><code>troubleshooting</code> - Problem resolution and debugging</li> </ul>"},{"location":"reference/tags/#by-audience","title":"By Audience","text":"<ul> <li><code>developer</code> - For software developers</li> <li><code>operator</code> - For platform operators</li> <li><code>admin</code> - For system administrators</li> <li><code>security-team</code> - For security professionals</li> </ul>"},{"location":"reference/tags/#by-complexity","title":"By Complexity","text":"<ul> <li><code>beginner</code> - Basic concepts and getting started</li> <li><code>intermediate</code> - Moderate complexity topics</li> <li><code>advanced</code> - Advanced configuration and customization</li> <li><code>expert</code> - Expert-level topics and edge cases</li> </ul>"},{"location":"schema/","title":"Database Schema Documentation","text":"<p>This documentation is generated by tbls. To regenerate, run:</p> <pre><code>make docs-schema\n</code></pre>"},{"location":"sdk/go/","title":"Go SDK for MVP Zero Trust Authentication","text":"<p>The Go SDK provides a comprehensive, type-safe interface for integrating with the MVP Zero Trust Authentication system. It includes client libraries, middleware, utilities, and examples for easy integration into Go applications.</p>"},{"location":"sdk/go/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Quick Start</li> <li>Authentication</li> <li>Middleware Integration</li> <li>Token Management</li> <li>User Management</li> <li>Error Handling</li> <li>Utilities</li> <li>Examples</li> <li>API Reference</li> </ul>"},{"location":"sdk/go/#installation","title":"Installation","text":"<pre><code>go get mvp.local/pkg/sdk/go\n</code></pre>"},{"location":"sdk/go/#quick-start","title":"Quick Start","text":""},{"location":"sdk/go/#basic-client-setup","title":"Basic Client Setup","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"time\"\n\n    \"mvp.local/pkg/sdk/go\"\n)\n\nfunc main() {\n    // Initialize the client\n    client, err := sdk.NewClient(sdk.Config{\n        BaseURL: \"https://auth.example.com\",\n        APIKey:  \"your-api-key\",\n        Timeout: 30 * time.Second,\n        Debug:   true,\n    })\n    if err != nil {\n        log.Fatal(\"Failed to create client:\", err)\n    }\n    defer client.Close()\n\n    // Test connection\n    ctx := context.Background()\n    if err := client.HealthCheck(ctx); err != nil {\n        log.Fatal(\"Health check failed:\", err)\n    }\n\n    fmt.Println(\"\u2705 Connected to Zero Trust Auth service!\")\n}\n</code></pre>"},{"location":"sdk/go/#authentication","title":"Authentication","text":""},{"location":"sdk/go/#user-login","title":"User Login","text":"<pre><code>func authenticateUser(client *sdk.Client) {\n    ctx := context.Background()\n\n    // Authenticate user\n    response, err := client.Authenticate(ctx, sdk.AuthenticationRequest{\n        Email:    \"user@example.com\",\n        Password: \"secure-password\",\n        Remember: true,\n    })\n    if err != nil {\n        log.Fatal(\"Authentication failed:\", err)\n    }\n\n    if response.RequiresMFA {\n        fmt.Printf(\"MFA required. Challenge: %s\\n\", response.MFAChallenge)\n        // Handle MFA flow here\n        return\n    }\n\n    fmt.Printf(\"\u2705 Authentication successful!\\n\")\n    fmt.Printf(\"Access Token: %s\\n\", response.AccessToken)\n    fmt.Printf(\"User: %s (%s)\\n\", response.User.DisplayName, response.User.Email)\n    fmt.Printf(\"Trust Score: %.2f\\n\", response.TrustScore)\n    fmt.Printf(\"Expires At: %s\\n\", response.ExpiresAt)\n}\n</code></pre>"},{"location":"sdk/go/#token-validation","title":"Token Validation","text":"<pre><code>func validateToken(client *sdk.Client, token string) {\n    ctx := context.Background()\n\n    response, err := client.ValidateToken(ctx, sdk.TokenValidationRequest{\n        Token:          token,\n        RequiredScopes: []string{\"read:profile\", \"write:profile\"},\n        Audience:       \"api.example.com\",\n    })\n    if err != nil {\n        log.Printf(\"Token validation failed: %v\", err)\n        return\n    }\n\n    if !response.Valid {\n        log.Println(\"\u274c Token is invalid\")\n        return\n    }\n\n    fmt.Printf(\"\u2705 Token is valid!\\n\")\n    fmt.Printf(\"User ID: %s\\n\", response.Claims.Subject)\n    fmt.Printf(\"Email: %s\\n\", response.Claims.Email)\n    fmt.Printf(\"Roles: %v\\n\", response.Claims.Roles)\n    fmt.Printf(\"Trust Score: %.2f\\n\", response.TrustScore)\n}\n</code></pre>"},{"location":"sdk/go/#token-refresh","title":"Token Refresh","text":"<pre><code>func refreshToken(client *sdk.Client, refreshToken string) {\n    ctx := context.Background()\n\n    response, err := client.RefreshToken(ctx, sdk.RefreshTokenRequest{\n        RefreshToken: refreshToken,\n    })\n    if err != nil {\n        log.Fatal(\"Token refresh failed:\", err)\n    }\n\n    fmt.Printf(\"\u2705 Token refreshed successfully!\\n\")\n    fmt.Printf(\"New Access Token: %s\\n\", response.AccessToken)\n    fmt.Printf(\"Expires At: %s\\n\", response.ExpiresAt)\n}\n</code></pre>"},{"location":"sdk/go/#middleware-integration","title":"Middleware Integration","text":""},{"location":"sdk/go/#fiber-framework-integration","title":"Fiber Framework Integration","text":"<pre><code>package main\n\nimport (\n    \"log\"\n\n    \"github.com/gofiber/fiber/v2\"\n    \"mvp.local/pkg/sdk/go\"\n)\n\nfunc main() {\n    // Initialize SDK client\n    client, err := sdk.NewClient(sdk.Config{\n        BaseURL: \"https://auth.example.com\",\n        APIKey:  \"your-api-key\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    app := fiber.New()\n\n    // Public routes\n    app.Get(\"/health\", func(c *fiber.Ctx) error {\n        return c.JSON(fiber.Map{\"status\": \"ok\"})\n    })\n\n    // Protected routes with authentication middleware\n    api := app.Group(\"/api/v1\")\n    api.Use(fiberAuthMiddleware(client))\n\n    // Routes that require authentication\n    api.Get(\"/profile\", getProfile)\n    api.Put(\"/profile\", updateProfile)\n\n    // Routes that require specific roles\n    admin := api.Group(\"/admin\")\n    admin.Use(fiberRoleMiddleware(client, \"admin\"))\n    admin.Get(\"/users\", listUsers)\n\n    log.Fatal(app.Listen(\":8080\"))\n}\n\nfunc fiberAuthMiddleware(client *sdk.Client) fiber.Handler {\n    return func(c *fiber.Ctx) error {\n        token := extractToken(c)\n        if token == \"\" {\n            return c.Status(401).JSON(fiber.Map{\n                \"error\": \"Authentication required\",\n            })\n        }\n\n        response, err := client.ValidateToken(c.Context(), sdk.TokenValidationRequest{\n            Token: token,\n        })\n        if err != nil || !response.Valid {\n            return c.Status(401).JSON(fiber.Map{\n                \"error\": \"Invalid token\",\n            })\n        }\n\n        // Store claims in context\n        c.Locals(\"claims\", response.Claims)\n        c.Locals(\"user_id\", response.Claims.Subject)\n\n        return c.Next()\n    }\n}\n\nfunc fiberRoleMiddleware(client *sdk.Client, requiredRole string) fiber.Handler {\n    return func(c *fiber.Ctx) error {\n        claims := c.Locals(\"claims\").(*sdk.Claims)\n\n        hasRole := false\n        for _, role := range claims.Roles {\n            if role == requiredRole {\n                hasRole = true\n                break\n            }\n        }\n\n        if !hasRole {\n            return c.Status(403).JSON(fiber.Map{\n                \"error\": \"Insufficient permissions\",\n            })\n        }\n\n        return c.Next()\n    }\n}\n\nfunc extractToken(c *fiber.Ctx) string {\n    auth := c.Get(\"Authorization\")\n    if auth == \"\" {\n        return \"\"\n    }\n\n    if len(auth) &gt; 7 &amp;&amp; auth[:7] == \"Bearer \" {\n        return auth[7:]\n    }\n\n    return \"\"\n}\n</code></pre>"},{"location":"sdk/go/#standard-http-integration","title":"Standard HTTP Integration","text":"<pre><code>package main\n\nimport (\n    \"log\"\n    \"net/http\"\n\n    \"mvp.local/pkg/sdk/go\"\n)\n\nfunc main() {\n    // Initialize SDK client\n    client, err := sdk.NewClient(sdk.Config{\n        BaseURL: \"https://auth.example.com\",\n        APIKey:  \"your-api-key\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Create authentication middleware\n    authMiddleware := sdk.AuthMiddleware(sdk.MiddlewareConfig{\n        Client: client,\n        RequiredRoles: []string{\"user\"},\n        SkipPaths: []string{\"/health\", \"/login\"},\n    })\n\n    // Set up routes\n    mux := http.NewServeMux()\n\n    // Public routes\n    mux.HandleFunc(\"/health\", healthHandler)\n    mux.HandleFunc(\"/login\", loginHandler)\n\n    // Protected routes\n    mux.Handle(\"/api/\", authMiddleware(http.HandlerFunc(apiHandler)))\n    mux.Handle(\"/admin/\", sdk.RequireRoles(client, \"admin\")(http.HandlerFunc(adminHandler)))\n\n    log.Println(\"Server starting on :8080\")\n    log.Fatal(http.ListenAndServe(\":8080\", mux))\n}\n\nfunc healthHandler(w http.ResponseWriter, r *http.Request) {\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    w.Write([]byte(`{\"status\": \"ok\"}`))\n}\n\nfunc apiHandler(w http.ResponseWriter, r *http.Request) {\n    // Get claims from context\n    claims, ok := sdk.GetClaimsFromContext(r.Context())\n    if !ok {\n        http.Error(w, \"No authentication claims found\", http.StatusInternalServerError)\n        return\n    }\n\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    w.Write([]byte(fmt.Sprintf(`{\"user_id\": \"%s\", \"email\": \"%s\"}`, \n        claims.Subject, claims.Email)))\n}\n</code></pre>"},{"location":"sdk/go/#token-management","title":"Token Management","text":""},{"location":"sdk/go/#token-utilities","title":"Token Utilities","text":"<pre><code>func demonstrateTokenUtils() {\n    utils := sdk.NewUtils()\n\n    // Check if token is expired\n    expiresAt := time.Now().Add(time.Hour)\n    isExpired := utils.Token.IsTokenExpired(expiresAt)\n    fmt.Printf(\"Token expired: %t\\n\", isExpired)\n\n    // Check if token is expiring soon (within 5 minutes)\n    expiringSoon := utils.Token.IsTokenExpiringSoon(expiresAt, 5*time.Minute)\n    fmt.Printf(\"Token expiring soon: %t\\n\", expiringSoon)\n\n    // Generate OAuth state parameter\n    state, err := utils.Token.GenerateState()\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Printf(\"OAuth state: %s\\n\", state)\n\n    // Generate PKCE code verifier and challenge\n    verifier, err := utils.Token.GenerateCodeVerifier()\n    if err != nil {\n        log.Fatal(err)\n    }\n    challenge := utils.Token.GenerateCodeChallenge(verifier)\n    fmt.Printf(\"PKCE verifier: %s\\n\", verifier)\n    fmt.Printf(\"PKCE challenge: %s\\n\", challenge)\n}\n</code></pre>"},{"location":"sdk/go/#oauth-flow-implementation","title":"OAuth Flow Implementation","text":"<pre><code>func oauthFlow() {\n    utils := sdk.NewUtils()\n\n    // Generate OAuth state and PKCE parameters\n    state, _ := utils.Token.GenerateState()\n    verifier, _ := utils.Token.GenerateCodeVerifier()\n    challenge := utils.Token.GenerateCodeChallenge(verifier)\n\n    // Build authorization URL\n    authURL, err := utils.URL.BuildAuthURLWithPKCE(\n        \"https://auth.example.com\",\n        \"your-client-id\",\n        \"https://app.example.com/callback\",\n        state,\n        challenge,\n        []string{\"read:profile\", \"write:profile\"},\n    )\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"Authorization URL: %s\\n\", authURL)\n\n    // In your callback handler\n    callbackURL := \"https://app.example.com/callback?code=abc123&amp;state=\" + state\n    code, returnedState, err := utils.URL.ExtractAuthCode(callbackURL)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    if returnedState != state {\n        log.Fatal(\"State mismatch - possible CSRF attack\")\n    }\n\n    fmt.Printf(\"Authorization code: %s\\n\", code)\n    // Exchange code for tokens using your OAuth client\n}\n</code></pre>"},{"location":"sdk/go/#user-management","title":"User Management","text":""},{"location":"sdk/go/#get-user-profile","title":"Get User Profile","text":"<pre><code>func getUserProfile(client *sdk.Client, token string) {\n    ctx := context.Background()\n\n    user, err := client.GetUserProfile(ctx, token)\n    if err != nil {\n        log.Fatal(\"Failed to get user profile:\", err)\n    }\n\n    fmt.Printf(\"User Profile:\\n\")\n    fmt.Printf(\"  ID: %s\\n\", user.ID)\n    fmt.Printf(\"  Email: %s\\n\", user.Email)\n    fmt.Printf(\"  Name: %s %s\\n\", user.FirstName, user.LastName)\n    fmt.Printf(\"  Display Name: %s\\n\", user.DisplayName)\n    fmt.Printf(\"  Roles: %v\\n\", user.Roles)\n    fmt.Printf(\"  Trust Score: %.2f\\n\", user.TrustScore)\n    fmt.Printf(\"  Active: %t\\n\", user.IsActive)\n    fmt.Printf(\"  Verified: %t\\n\", user.IsVerified)\n    fmt.Printf(\"  MFA Enabled: %t\\n\", user.MFAEnabled)\n}\n</code></pre>"},{"location":"sdk/go/#update-user-profile","title":"Update User Profile","text":"<pre><code>func updateUserProfile(client *sdk.Client, token string) {\n    ctx := context.Background()\n\n    updatedUser, err := client.UpdateUserProfile(ctx, token, sdk.User{\n        FirstName:   \"John\",\n        LastName:    \"Doe\",\n        DisplayName: \"John Doe\",\n        Metadata: map[string]interface{}{\n            \"department\": \"Engineering\",\n            \"location\":   \"San Francisco\",\n        },\n    })\n    if err != nil {\n        log.Fatal(\"Failed to update user profile:\", err)\n    }\n\n    fmt.Printf(\"\u2705 Profile updated successfully!\\n\")\n    fmt.Printf(\"Updated Name: %s\\n\", updatedUser.DisplayName)\n}\n</code></pre>"},{"location":"sdk/go/#error-handling","title":"Error Handling","text":""},{"location":"sdk/go/#structured-error-handling","title":"Structured Error Handling","text":"<pre><code>func handleErrors(client *sdk.Client) {\n    ctx := context.Background()\n    utils := sdk.NewUtils()\n\n    _, err := client.Authenticate(ctx, sdk.AuthenticationRequest{\n        Email:    \"invalid@example.com\",\n        Password: \"wrong-password\",\n    })\n\n    if err != nil {\n        // Check if it's an API error\n        if apiErr, ok := err.(*sdk.APIError); ok {\n            fmt.Printf(\"API Error - Code: %s\\n\", apiErr.Code)\n            fmt.Printf(\"Message: %s\\n\", apiErr.Message)\n            fmt.Printf(\"Details: %s\\n\", apiErr.Details)\n            fmt.Printf(\"Trace ID: %s\\n\", apiErr.TraceID)\n\n            // Check error type\n            if utils.Error.IsAuthenticationError(err) {\n                fmt.Println(\"This is an authentication error\")\n            }\n\n            if utils.Error.IsRetryableError(err) {\n                fmt.Println(\"This error can be retried\")\n            }\n        } else {\n            fmt.Printf(\"Other error: %v\\n\", err)\n        }\n    }\n}\n</code></pre>"},{"location":"sdk/go/#retry-logic-example","title":"Retry Logic Example","text":"<pre><code>func authenticateWithRetry(client *sdk.Client, maxRetries int) (*sdk.AuthenticationResponse, error) {\n    utils := sdk.NewUtils()\n    ctx := context.Background()\n\n    request := sdk.AuthenticationRequest{\n        Email:    \"user@example.com\",\n        Password: \"password\",\n    }\n\n    var lastErr error\n    for attempt := 0; attempt &lt; maxRetries; attempt++ {\n        response, err := client.Authenticate(ctx, request)\n        if err == nil {\n            return response, nil\n        }\n\n        lastErr = err\n\n        // Don't retry authentication errors\n        if utils.Error.IsAuthenticationError(err) {\n            break\n        }\n\n        // Only retry if error is retryable\n        if !utils.Error.IsRetryableError(err) {\n            break\n        }\n\n        // Wait before retrying\n        time.Sleep(time.Duration(attempt+1) * time.Second)\n    }\n\n    return nil, fmt.Errorf(\"authentication failed after %d attempts: %w\", maxRetries, lastErr)\n}\n</code></pre>"},{"location":"sdk/go/#utilities","title":"Utilities","text":""},{"location":"sdk/go/#security-utilities","title":"Security Utilities","text":"<pre><code>func demonstrateSecurityUtils() {\n    utils := sdk.NewUtils()\n\n    // Email validation and sanitization\n    email := \"  USER@EXAMPLE.COM  \"\n    sanitized := utils.Security.SanitizeEmail(email)\n    isValid := utils.Security.ValidateEmail(sanitized)\n    fmt.Printf(\"Sanitized email: %s (valid: %t)\\n\", sanitized, isValid)\n\n    // Password hashing (client-side)\n    password := \"user-password\"\n    hashedPassword := utils.Security.HashPassword(password)\n    fmt.Printf(\"Hashed password: %s\\n\", hashedPassword)\n\n    // Device fingerprinting\n    userAgent := \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)\"\n    ip := \"192.168.1.100\"\n    fingerprint := utils.Security.GenerateFingerprint(userAgent, ip, \"additional-data\")\n    fmt.Printf(\"Device fingerprint: %s\\n\", fingerprint)\n}\n</code></pre>"},{"location":"sdk/go/#cache-utilities","title":"Cache Utilities","text":"<pre><code>func demonstrateCacheUtils() {\n    utils := sdk.NewUtils()\n\n    userID := \"user-123\"\n\n    // Generate cache keys\n    tokenKey := utils.Cache.GenerateTokenCacheKey(userID)\n    refreshKey := utils.Cache.GenerateRefreshTokenCacheKey(userID)\n    sessionKey := utils.Cache.GenerateSessionCacheKey(\"session-456\")\n\n    fmt.Printf(\"Token cache key: %s\\n\", tokenKey)\n    fmt.Printf(\"Refresh token cache key: %s\\n\", refreshKey)\n    fmt.Printf(\"Session cache key: %s\\n\", sessionKey)\n\n    // Use with your cache implementation\n    // cache.Set(tokenKey, accessToken, expiration)\n    // cache.Set(refreshKey, refreshToken, refreshExpiration)\n}\n</code></pre>"},{"location":"sdk/go/#complete-examples","title":"Complete Examples","text":""},{"location":"sdk/go/#web-application-with-authentication","title":"Web Application with Authentication","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"time\"\n\n    \"mvp.local/pkg/sdk/go\"\n)\n\ntype App struct {\n    client *sdk.Client\n}\n\nfunc main() {\n    // Initialize the app\n    app := &amp;App{}\n\n    var err error\n    app.client, err = sdk.NewClient(sdk.Config{\n        BaseURL: \"https://auth.example.com\",\n        APIKey:  \"your-api-key\",\n        Timeout: 30 * time.Second,\n    })\n    if err != nil {\n        log.Fatal(\"Failed to create client:\", err)\n    }\n\n    // Set up routes\n    http.HandleFunc(\"/login\", app.loginHandler)\n    http.HandleFunc(\"/logout\", app.logoutHandler)\n    http.HandleFunc(\"/refresh\", app.refreshHandler)\n    http.HandleFunc(\"/profile\", app.authenticatedHandler(app.profileHandler))\n    http.HandleFunc(\"/admin\", app.roleHandler(\"admin\", app.adminHandler))\n\n    log.Println(\"Server starting on :8080\")\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\nfunc (app *App) loginHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodPost {\n        http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    var request sdk.AuthenticationRequest\n    if err := json.NewDecoder(r.Body).Decode(&amp;request); err != nil {\n        http.Error(w, \"Invalid request body\", http.StatusBadRequest)\n        return\n    }\n\n    response, err := app.client.Authenticate(r.Context(), request)\n    if err != nil {\n        http.Error(w, fmt.Sprintf(\"Authentication failed: %v\", err), http.StatusUnauthorized)\n        return\n    }\n\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    json.NewEncoder(w).Encode(response)\n}\n\nfunc (app *App) authenticatedHandler(next http.HandlerFunc) http.HandlerFunc {\n    return func(w http.ResponseWriter, r *http.Request) {\n        token := extractBearerToken(r)\n        if token == \"\" {\n            http.Error(w, \"Authentication required\", http.StatusUnauthorized)\n            return\n        }\n\n        response, err := app.client.ValidateToken(r.Context(), sdk.TokenValidationRequest{\n            Token: token,\n        })\n        if err != nil || !response.Valid {\n            http.Error(w, \"Invalid token\", http.StatusUnauthorized)\n            return\n        }\n\n        // Add claims to request context\n        ctx := context.WithValue(r.Context(), \"claims\", response.Claims)\n        next.ServeHTTP(w, r.WithContext(ctx))\n    }\n}\n\nfunc (app *App) roleHandler(requiredRole string, next http.HandlerFunc) http.HandlerFunc {\n    return app.authenticatedHandler(func(w http.ResponseWriter, r *http.Request) {\n        claims := r.Context().Value(\"claims\").(*sdk.Claims)\n\n        hasRole := false\n        for _, role := range claims.Roles {\n            if role == requiredRole {\n                hasRole = true\n                break\n            }\n        }\n\n        if !hasRole {\n            http.Error(w, \"Insufficient permissions\", http.StatusForbidden)\n            return\n        }\n\n        next.ServeHTTP(w, r)\n    })\n}\n\nfunc extractBearerToken(r *http.Request) string {\n    auth := r.Header.Get(\"Authorization\")\n    if auth == \"\" {\n        return \"\"\n    }\n\n    if len(auth) &gt; 7 &amp;&amp; auth[:7] == \"Bearer \" {\n        return auth[7:]\n    }\n\n    return \"\"\n}\n</code></pre>"},{"location":"sdk/go/#api-reference","title":"API Reference","text":""},{"location":"sdk/go/#client-configuration","title":"Client Configuration","text":"<pre><code>type Config struct {\n    BaseURL                string        // Required: Base URL of the auth service\n    APIKey                 string        // Required: API key for authentication\n    Timeout                time.Duration // Request timeout (default: 30s)\n    MaxRetries             int           // Max retry attempts (default: 3)\n    RetryDelay             time.Duration // Delay between retries (default: 1s)\n    InsecureSkipVerify     bool          // Skip TLS verification (dev only)\n    UserAgent              string        // Custom user agent\n    Debug                  bool          // Enable debug logging\n}\n</code></pre>"},{"location":"sdk/go/#authentication-methods","title":"Authentication Methods","text":"<pre><code>// Authenticate user with email/password\nfunc (c *Client) Authenticate(ctx context.Context, req AuthenticationRequest) (*AuthenticationResponse, error)\n\n// Validate an access token\nfunc (c *Client) ValidateToken(ctx context.Context, req TokenValidationRequest) (*TokenValidationResponse, error)\n\n// Refresh an access token\nfunc (c *Client) RefreshToken(ctx context.Context, req RefreshTokenRequest) (*AuthenticationResponse, error)\n\n// Logout user session\nfunc (c *Client) Logout(ctx context.Context, req LogoutRequest) error\n\n// Check service health\nfunc (c *Client) HealthCheck(ctx context.Context) error\n</code></pre>"},{"location":"sdk/go/#user-management-methods","title":"User Management Methods","text":"<pre><code>// Get user profile\nfunc (c *Client) GetUserProfile(ctx context.Context, token string) (*User, error)\n\n// Update user profile\nfunc (c *Client) UpdateUserProfile(ctx context.Context, token string, user User) (*User, error)\n</code></pre>"},{"location":"sdk/go/#middleware-functions","title":"Middleware Functions","text":"<pre><code>// General authentication middleware\nfunc AuthMiddleware(config MiddlewareConfig) func(http.Handler) http.Handler\n\n// Require specific roles\nfunc RequireRoles(client *Client, roles ...string) func(http.Handler) http.Handler\n\n// Require specific scopes\nfunc RequireScopes(client *Client, scopes ...string) func(http.Handler) http.Handler\n\n// Extract claims from context\nfunc GetClaimsFromContext(ctx context.Context) (*Claims, bool)\n\n// Extract user ID from context\nfunc GetUserIDFromContext(ctx context.Context) (string, bool)\n</code></pre> <p>For more detailed API documentation, see the complete API reference.</p>"},{"location":"sdk/javascript/","title":"JavaScript/TypeScript SDK for MVP Zero Trust Authentication","text":"<p>The JavaScript/TypeScript SDK provides a modern, type-safe interface for integrating with the MVP Zero Trust Authentication system. It works in both browser and Node.js environments with full TypeScript support.</p>"},{"location":"sdk/javascript/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Quick Start</li> <li>Authentication</li> <li>Token Management</li> <li>User Management</li> <li>OAuth Integration</li> <li>React Integration</li> <li>Vue.js Integration</li> <li>Node.js Backend Integration</li> <li>Error Handling</li> <li>Utilities</li> <li>API Reference</li> </ul>"},{"location":"sdk/javascript/#installation","title":"Installation","text":""},{"location":"sdk/javascript/#npm","title":"NPM","text":"<pre><code>npm install @mvp/zerotrust-sdk\n</code></pre>"},{"location":"sdk/javascript/#yarn","title":"Yarn","text":"<pre><code>yarn add @mvp/zerotrust-sdk\n</code></pre>"},{"location":"sdk/javascript/#cdn-browser","title":"CDN (Browser)","text":"<pre><code>&lt;script src=\"https://unpkg.com/@mvp/zerotrust-sdk@latest/dist/index.min.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"sdk/javascript/#quick-start","title":"Quick Start","text":""},{"location":"sdk/javascript/#typescriptes6","title":"TypeScript/ES6","text":"<pre><code>import { ZeroTrustClient } from '@mvp/zerotrust-sdk';\n\nconst client = new ZeroTrustClient({\n  baseURL: 'https://auth.example.com',\n  apiKey: 'your-api-key',\n  timeout: 30000,\n  debug: true\n});\n\n// Test connection\nasync function initialize() {\n  try {\n    await client.healthCheck();\n    console.log('\u2705 Connected to Zero Trust Auth service!');\n  } catch (error) {\n    console.error('\u274c Connection failed:', error);\n  }\n}\n\ninitialize();\n</code></pre>"},{"location":"sdk/javascript/#commonjs-nodejs","title":"CommonJS (Node.js)","text":"<pre><code>const { ZeroTrustClient } = require('@mvp/zerotrust-sdk');\n\nconst client = new ZeroTrustClient({\n  baseURL: 'https://auth.example.com',\n  apiKey: 'your-api-key'\n});\n</code></pre>"},{"location":"sdk/javascript/#browser-global","title":"Browser (Global)","text":"<pre><code>&lt;script src=\"https://unpkg.com/@mvp/zerotrust-sdk@latest/dist/index.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  const client = new ZeroTrust.ZeroTrustClient({\n    baseURL: 'https://auth.example.com',\n    apiKey: 'your-api-key'\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"sdk/javascript/#authentication","title":"Authentication","text":""},{"location":"sdk/javascript/#user-login","title":"User Login","text":"<pre><code>import { ZeroTrustClient, AuthenticationRequest } from '@mvp/zerotrust-sdk';\n\nconst client = new ZeroTrustClient({\n  baseURL: 'https://auth.example.com',\n  apiKey: 'your-api-key'\n});\n\nasync function login(email: string, password: string) {\n  try {\n    const response = await client.authenticate({\n      email,\n      password,\n      remember: true\n    });\n\n    if (response.requiresMFA) {\n      console.log('MFA required:', response.mfaChallenge);\n      // Handle MFA flow\n      return { requiresMFA: true, challenge: response.mfaChallenge };\n    }\n\n    console.log('\u2705 Login successful!');\n    console.log('Access Token:', response.accessToken);\n    console.log('User:', response.user.displayName);\n    console.log('Trust Score:', response.trustScore);\n\n    // Store tokens securely\n    localStorage.setItem('accessToken', response.accessToken);\n    localStorage.setItem('refreshToken', response.refreshToken);\n\n    return response;\n  } catch (error) {\n    console.error('\u274c Login failed:', error);\n    throw error;\n  }\n}\n\n// Usage\nlogin('user@example.com', 'secure-password');\n</code></pre>"},{"location":"sdk/javascript/#token-validation","title":"Token Validation","text":"<pre><code>async function validateToken(token: string) {\n  try {\n    const response = await client.validateToken({\n      token,\n      requiredScopes: ['read:profile', 'write:profile']\n    });\n\n    if (!response.valid) {\n      console.log('\u274c Token is invalid');\n      return false;\n    }\n\n    console.log('\u2705 Token is valid!');\n    console.log('User ID:', response.claims?.sub);\n    console.log('Email:', response.claims?.email);\n    console.log('Roles:', response.claims?.roles);\n    console.log('Trust Score:', response.trustScore);\n\n    return true;\n  } catch (error) {\n    console.error('Token validation error:', error);\n    return false;\n  }\n}\n</code></pre>"},{"location":"sdk/javascript/#token-refresh","title":"Token Refresh","text":"<pre><code>async function refreshAccessToken(refreshToken: string) {\n  try {\n    const response = await client.refreshToken({\n      refreshToken\n    });\n\n    console.log('\u2705 Token refreshed successfully!');\n\n    // Update stored tokens\n    localStorage.setItem('accessToken', response.accessToken);\n    localStorage.setItem('refreshToken', response.refreshToken);\n\n    return response;\n  } catch (error) {\n    console.error('\u274c Token refresh failed:', error);\n    // Redirect to login\n    throw error;\n  }\n}\n</code></pre>"},{"location":"sdk/javascript/#logout","title":"Logout","text":"<pre><code>async function logout(token?: string) {\n  try {\n    await client.logout({\n      token: token || localStorage.getItem('accessToken'),\n      everywhere: true // Logout from all devices\n    });\n\n    // Clear stored tokens\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n\n    console.log('\u2705 Logged out successfully');\n  } catch (error) {\n    console.error('Logout error:', error);\n  }\n}\n</code></pre>"},{"location":"sdk/javascript/#token-management","title":"Token Management","text":""},{"location":"sdk/javascript/#automatic-token-refresh","title":"Automatic Token Refresh","text":"<pre><code>import { ZeroTrustUtils } from '@mvp/zerotrust-sdk';\n\nclass TokenManager {\n  private client: ZeroTrustClient;\n  private refreshTimeout?: NodeJS.Timeout;\n\n  constructor(client: ZeroTrustClient) {\n    this.client = client;\n  }\n\n  async getValidToken(): Promise&lt;string | null&gt; {\n    const accessToken = localStorage.getItem('accessToken');\n    const refreshToken = localStorage.getItem('refreshToken');\n    const expiresAt = localStorage.getItem('tokenExpiresAt');\n\n    if (!accessToken || !expiresAt) {\n      return null;\n    }\n\n    // Check if token is expiring soon (within 5 minutes)\n    if (ZeroTrustUtils.isTokenExpiringSoon(expiresAt, 300)) {\n      if (!refreshToken) {\n        return null;\n      }\n\n      try {\n        const response = await this.client.refreshToken({ refreshToken });\n\n        localStorage.setItem('accessToken', response.accessToken);\n        localStorage.setItem('refreshToken', response.refreshToken);\n        localStorage.setItem('tokenExpiresAt', response.expiresAt);\n\n        this.scheduleRefresh(response.expiresAt);\n        return response.accessToken;\n      } catch (error) {\n        console.error('Token refresh failed:', error);\n        this.clearTokens();\n        return null;\n      }\n    }\n\n    return accessToken;\n  }\n\n  scheduleRefresh(expiresAt: string) {\n    if (this.refreshTimeout) {\n      clearTimeout(this.refreshTimeout);\n    }\n\n    const expiryTime = new Date(expiresAt).getTime();\n    const now = Date.now();\n    const refreshTime = expiryTime - now - (5 * 60 * 1000); // 5 minutes before expiry\n\n    if (refreshTime &gt; 0) {\n      this.refreshTimeout = setTimeout(() =&gt; {\n        this.getValidToken();\n      }, refreshTime);\n    }\n  }\n\n  clearTokens() {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('tokenExpiresAt');\n\n    if (this.refreshTimeout) {\n      clearTimeout(this.refreshTimeout);\n    }\n  }\n}\n\n// Usage\nconst tokenManager = new TokenManager(client);\n\nasync function makeAuthenticatedRequest(url: string) {\n  const token = await tokenManager.getValidToken();\n  if (!token) {\n    throw new Error('No valid token available');\n  }\n\n  return fetch(url, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n}\n</code></pre>"},{"location":"sdk/javascript/#user-management","title":"User Management","text":""},{"location":"sdk/javascript/#get-user-profile","title":"Get User Profile","text":"<pre><code>async function getUserProfile() {\n  const token = localStorage.getItem('accessToken');\n  if (!token) {\n    throw new Error('No access token available');\n  }\n\n  try {\n    const user = await client.getUserProfile(token);\n\n    console.log('User Profile:');\n    console.log('  ID:', user.id);\n    console.log('  Email:', user.email);\n    console.log('  Name:', `${user.firstName} ${user.lastName}`);\n    console.log('  Display Name:', user.displayName);\n    console.log('  Roles:', user.roles);\n    console.log('  Trust Score:', user.trustScore);\n    console.log('  Active:', user.isActive);\n    console.log('  Verified:', user.isVerified);\n    console.log('  MFA Enabled:', user.mfaEnabled);\n\n    return user;\n  } catch (error) {\n    console.error('Failed to get user profile:', error);\n    throw error;\n  }\n}\n</code></pre>"},{"location":"sdk/javascript/#update-user-profile","title":"Update User Profile","text":"<pre><code>async function updateUserProfile(updates: Partial&lt;User&gt;) {\n  const token = localStorage.getItem('accessToken');\n  if (!token) {\n    throw new Error('No access token available');\n  }\n\n  try {\n    const updatedUser = await client.updateUserProfile(token, updates);\n\n    console.log('\u2705 Profile updated successfully!');\n    console.log('Updated Name:', updatedUser.displayName);\n\n    return updatedUser;\n  } catch (error) {\n    console.error('Failed to update profile:', error);\n    throw error;\n  }\n}\n\n// Usage\nupdateUserProfile({\n  firstName: 'John',\n  lastName: 'Doe',\n  displayName: 'John Doe',\n  metadata: {\n    department: 'Engineering',\n    location: 'San Francisco'\n  }\n});\n</code></pre>"},{"location":"sdk/javascript/#oauth-integration","title":"OAuth Integration","text":""},{"location":"sdk/javascript/#oauth-flow-implementation","title":"OAuth Flow Implementation","text":"<pre><code>import { ZeroTrustUtils } from '@mvp/zerotrust-sdk';\n\nclass OAuthManager {\n  private clientId: string;\n  private redirectUri: string;\n  private baseUrl: string;\n\n  constructor(clientId: string, redirectUri: string, baseUrl: string) {\n    this.clientId = clientId;\n    this.redirectUri = redirectUri;\n    this.baseUrl = baseUrl;\n  }\n\n  async initiateOAuthFlow(scopes: string[] = []): Promise&lt;string&gt; {\n    // Generate state and PKCE parameters\n    const state = ZeroTrustUtils.generateState();\n    const codeVerifier = ZeroTrustUtils.generateCodeVerifier();\n    const codeChallenge = await ZeroTrustUtils.generateCodeChallenge(codeVerifier);\n\n    // Store PKCE verifier and state for later verification\n    sessionStorage.setItem('oauth_state', state);\n    sessionStorage.setItem('code_verifier', codeVerifier);\n\n    // Build authorization URL\n    const authUrl = ZeroTrustUtils.buildAuthURLWithPKCE(\n      this.baseUrl,\n      this.clientId,\n      this.redirectUri,\n      state,\n      codeChallenge,\n      scopes\n    );\n\n    // Redirect to authorization server\n    window.location.href = authUrl;\n\n    return authUrl;\n  }\n\n  async handleCallback(): Promise&lt;{ code: string; state: string }&gt; {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n    const state = urlParams.get('state');\n    const error = urlParams.get('error');\n\n    if (error) {\n      const errorDescription = urlParams.get('error_description');\n      throw new Error(`OAuth error: ${error} - ${errorDescription}`);\n    }\n\n    if (!code || !state) {\n      throw new Error('Authorization code or state missing from callback');\n    }\n\n    // Verify state parameter\n    const storedState = sessionStorage.getItem('oauth_state');\n    if (state !== storedState) {\n      throw new Error('State parameter mismatch - possible CSRF attack');\n    }\n\n    // Clean up stored parameters\n    sessionStorage.removeItem('oauth_state');\n\n    return { code, state };\n  }\n\n  getCodeVerifier(): string | null {\n    return sessionStorage.getItem('code_verifier');\n  }\n\n  clearCodeVerifier(): void {\n    sessionStorage.removeItem('code_verifier');\n  }\n}\n\n// Usage\nconst oauthManager = new OAuthManager(\n  'your-client-id',\n  'https://app.example.com/callback',\n  'https://auth.example.com'\n);\n\n// Initiate OAuth flow\ndocument.getElementById('login-button')?.addEventListener('click', () =&gt; {\n  oauthManager.initiateOAuthFlow(['read:profile', 'write:profile']);\n});\n\n// Handle callback (in your callback page)\nasync function handleOAuthCallback() {\n  try {\n    const { code } = await oauthManager.handleCallback();\n    const codeVerifier = oauthManager.getCodeVerifier();\n\n    if (!codeVerifier) {\n      throw new Error('Code verifier not found');\n    }\n\n    // Exchange code for tokens (implement token exchange endpoint)\n    const tokenResponse = await fetch('/api/oauth/token', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        code,\n        codeVerifier,\n        clientId: 'your-client-id',\n        redirectUri: 'https://app.example.com/callback'\n      })\n    });\n\n    const tokens = await tokenResponse.json();\n\n    // Store tokens\n    localStorage.setItem('accessToken', tokens.accessToken);\n    localStorage.setItem('refreshToken', tokens.refreshToken);\n\n    oauthManager.clearCodeVerifier();\n\n    // Redirect to app\n    window.location.href = '/dashboard';\n  } catch (error) {\n    console.error('OAuth callback error:', error);\n  }\n}\n</code></pre>"},{"location":"sdk/javascript/#react-integration","title":"React Integration","text":""},{"location":"sdk/javascript/#react-hook-for-authentication","title":"React Hook for Authentication","text":"<pre><code>import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { ZeroTrustClient, User, AuthenticationResponse } from '@mvp/zerotrust-sdk';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) =&gt; Promise&lt;AuthenticationResponse&gt;;\n  logout: () =&gt; Promise&lt;void&gt;;\n  refreshToken: () =&gt; Promise&lt;void&gt;;\n}\n\nconst AuthContext = createContext&lt;AuthContextType | undefined&gt;(undefined);\n\nexport const useAuth = () =&gt; {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n  client: ZeroTrustClient;\n}\n\nexport const AuthProvider: React.FC&lt;AuthProviderProps&gt; = ({ children, client }) =&gt; {\n  const [user, setUser] = useState&lt;User | null&gt;(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const isAuthenticated = !!user;\n\n  useEffect(() =&gt; {\n    initializeAuth();\n  }, []);\n\n  const initializeAuth = async () =&gt; {\n    const token = localStorage.getItem('accessToken');\n    if (!token) {\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const validationResponse = await client.validateToken({ token });\n      if (validationResponse.valid) {\n        const userProfile = await client.getUserProfile(token);\n        setUser(userProfile);\n      } else {\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('refreshToken');\n      }\n    } catch (error) {\n      console.error('Auth initialization error:', error);\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string): Promise&lt;AuthenticationResponse&gt; =&gt; {\n    setIsLoading(true);\n    try {\n      const response = await client.authenticate({ email, password });\n\n      if (!response.requiresMFA) {\n        localStorage.setItem('accessToken', response.accessToken);\n        localStorage.setItem('refreshToken', response.refreshToken);\n        setUser(response.user);\n      }\n\n      return response;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async () =&gt; {\n    setIsLoading(true);\n    try {\n      const token = localStorage.getItem('accessToken');\n      if (token) {\n        await client.logout({ token });\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      setUser(null);\n      setIsLoading(false);\n    }\n  };\n\n  const refreshToken = async () =&gt; {\n    const refreshTokenValue = localStorage.getItem('refreshToken');\n    if (!refreshTokenValue) {\n      throw new Error('No refresh token available');\n    }\n\n    try {\n      const response = await client.refreshToken({ refreshToken: refreshTokenValue });\n      localStorage.setItem('accessToken', response.accessToken);\n      localStorage.setItem('refreshToken', response.refreshToken);\n    } catch (error) {\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      setUser(null);\n      throw error;\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n    refreshToken\n  };\n\n  return &lt;AuthContext.Provider value={value}&gt;{children}&lt;/AuthContext.Provider&gt;;\n};\n</code></pre>"},{"location":"sdk/javascript/#login-component","title":"Login Component","text":"<pre><code>import React, { useState } from 'react';\nimport { useAuth } from './AuthProvider';\n\nconst LoginForm: React.FC = () =&gt; {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { login } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) =&gt; {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    try {\n      const response = await login(email, password);\n\n      if (response.requiresMFA) {\n        // Handle MFA flow\n        console.log('MFA required:', response.mfaChallenge);\n      } else {\n        console.log('Login successful!');\n      }\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Login failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit} className=\"space-y-4\"&gt;\n      &lt;div&gt;\n        &lt;label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\"&gt;\n          Email\n        &lt;/label&gt;\n        &lt;input\n          id=\"email\"\n          type=\"email\"\n          value={email}\n          onChange={(e) =&gt; setEmail(e.target.value)}\n          required\n          className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md\"\n        /&gt;\n      &lt;/div&gt;\n\n      &lt;div&gt;\n        &lt;label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\"&gt;\n          Password\n        &lt;/label&gt;\n        &lt;input\n          id=\"password\"\n          type=\"password\"\n          value={password}\n          onChange={(e) =&gt; setPassword(e.target.value)}\n          required\n          className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md\"\n        /&gt;\n      &lt;/div&gt;\n\n      {error &amp;&amp; (\n        &lt;div className=\"text-red-600 text-sm\"&gt;{error}&lt;/div&gt;\n      )}\n\n      &lt;button\n        type=\"submit\"\n        disabled={isLoading}\n        className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50\"\n      &gt;\n        {isLoading ? 'Signing in...' : 'Sign in'}\n      &lt;/button&gt;\n    &lt;/form&gt;\n  );\n};\n\nexport default LoginForm;\n</code></pre>"},{"location":"sdk/javascript/#protected-route-component","title":"Protected Route Component","text":"<pre><code>import React from 'react';\nimport { useAuth } from './AuthProvider';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRoles?: string[];\n  fallback?: React.ReactNode;\n}\n\nconst ProtectedRoute: React.FC&lt;ProtectedRouteProps&gt; = ({\n  children,\n  requiredRoles = [],\n  fallback = &lt;div&gt;Access denied&lt;/div&gt;\n}) =&gt; {\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return &lt;div&gt;Loading...&lt;/div&gt;;\n  }\n\n  if (!isAuthenticated) {\n    return &lt;div&gt;Please log in to access this page&lt;/div&gt;;\n  }\n\n  if (requiredRoles.length &gt; 0 &amp;&amp; user) {\n    const hasRequiredRole = requiredRoles.some(role =&gt; user.roles.includes(role));\n    if (!hasRequiredRole) {\n      return fallback;\n    }\n  }\n\n  return &lt;&gt;{children}&lt;/&gt;;\n};\n\nexport default ProtectedRoute;\n</code></pre>"},{"location":"sdk/javascript/#vuejs-integration","title":"Vue.js Integration","text":""},{"location":"sdk/javascript/#vue-composition-api","title":"Vue Composition API","text":"<pre><code>import { ref, computed, onMounted } from 'vue';\nimport { ZeroTrustClient, User } from '@mvp/zerotrust-sdk';\n\nconst client = new ZeroTrustClient({\n  baseURL: 'https://auth.example.com',\n  apiKey: 'your-api-key'\n});\n\nexport function useAuth() {\n  const user = ref&lt;User | null&gt;(null);\n  const isLoading = ref(false);\n  const error = ref&lt;string | null&gt;(null);\n\n  const isAuthenticated = computed(() =&gt; !!user.value);\n\n  onMounted(() =&gt; {\n    initializeAuth();\n  });\n\n  const initializeAuth = async () =&gt; {\n    const token = localStorage.getItem('accessToken');\n    if (!token) return;\n\n    try {\n      isLoading.value = true;\n      const validationResponse = await client.validateToken({ token });\n\n      if (validationResponse.valid) {\n        const userProfile = await client.getUserProfile(token);\n        user.value = userProfile;\n      } else {\n        clearTokens();\n      }\n    } catch (err) {\n      console.error('Auth initialization error:', err);\n      clearTokens();\n    } finally {\n      isLoading.value = false;\n    }\n  };\n\n  const login = async (email: string, password: string) =&gt; {\n    try {\n      isLoading.value = true;\n      error.value = null;\n\n      const response = await client.authenticate({ email, password });\n\n      if (!response.requiresMFA) {\n        localStorage.setItem('accessToken', response.accessToken);\n        localStorage.setItem('refreshToken', response.refreshToken);\n        user.value = response.user;\n      }\n\n      return response;\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Login failed';\n      throw err;\n    } finally {\n      isLoading.value = false;\n    }\n  };\n\n  const logout = async () =&gt; {\n    try {\n      const token = localStorage.getItem('accessToken');\n      if (token) {\n        await client.logout({ token });\n      }\n    } finally {\n      clearTokens();\n      user.value = null;\n    }\n  };\n\n  const clearTokens = () =&gt; {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  };\n\n  return {\n    user: readonly(user),\n    isAuthenticated,\n    isLoading: readonly(isLoading),\n    error: readonly(error),\n    login,\n    logout\n  };\n}\n</code></pre>"},{"location":"sdk/javascript/#nodejs-backend-integration","title":"Node.js Backend Integration","text":""},{"location":"sdk/javascript/#expressjs-middleware","title":"Express.js Middleware","text":"<pre><code>import express, { Request, Response, NextFunction } from 'express';\nimport { ZeroTrustClient, Claims } from '@mvp/zerotrust-sdk';\n\nconst client = new ZeroTrustClient({\n  baseURL: 'https://auth.example.com',\n  apiKey: 'your-api-key'\n});\n\ninterface AuthenticatedRequest extends Request {\n  claims?: Claims;\n  userId?: string;\n}\n\n// Authentication middleware\nexport const authenticate = async (\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n) =&gt; {\n  const token = extractBearerToken(req);\n\n  if (!token) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n\n  try {\n    const response = await client.validateToken({ token });\n\n    if (!response.valid) {\n      return res.status(401).json({ error: 'Invalid token' });\n    }\n\n    req.claims = response.claims;\n    req.userId = response.claims?.sub;\n    next();\n  } catch (error) {\n    console.error('Authentication error:', error);\n    res.status(401).json({ error: 'Authentication failed' });\n  }\n};\n\n// Role-based authorization middleware\nexport const requireRoles = (requiredRoles: string[]) =&gt; {\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction) =&gt; {\n    if (!req.claims) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    const userRoles = req.claims.roles || [];\n    const hasRequiredRole = requiredRoles.some(role =&gt; userRoles.includes(role));\n\n    if (!hasRequiredRole) {\n      return res.status(403).json({ \n        error: 'Insufficient permissions',\n        required: requiredRoles,\n        current: userRoles\n      });\n    }\n\n    next();\n  };\n};\n\nfunction extractBearerToken(req: Request): string | null {\n  const authHeader = req.headers.authorization;\n  if (!authHeader) return null;\n\n  const match = authHeader.match(/^Bearer (.+)$/);\n  return match ? match[1] : null;\n}\n\n// Usage\nconst app = express();\n\n// Public routes\napp.post('/api/auth/login', async (req, res) =&gt; {\n  try {\n    const { email, password } = req.body;\n    const response = await client.authenticate({ email, password });\n    res.json(response);\n  } catch (error) {\n    res.status(401).json({ error: 'Authentication failed' });\n  }\n});\n\n// Protected routes\napp.get('/api/profile', authenticate, async (req: AuthenticatedRequest, res) =&gt; {\n  try {\n    const token = extractBearerToken(req);\n    const user = await client.getUserProfile(token!);\n    res.json(user);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to get profile' });\n  }\n});\n\n// Admin-only routes\napp.get('/api/admin/users', \n  authenticate, \n  requireRoles(['admin']), \n  (req, res) =&gt; {\n    res.json({ message: 'Admin access granted' });\n  }\n);\n</code></pre>"},{"location":"sdk/javascript/#error-handling","title":"Error Handling","text":""},{"location":"sdk/javascript/#comprehensive-error-handling","title":"Comprehensive Error Handling","text":"<pre><code>import { ZeroTrustAPIError, ZeroTrustUtils } from '@mvp/zerotrust-sdk';\n\nclass AuthService {\n  private client: ZeroTrustClient;\n\n  constructor(client: ZeroTrustClient) {\n    this.client = client;\n  }\n\n  async authenticateWithRetry(email: string, password: string, maxRetries = 3) {\n    let lastError: Error;\n\n    for (let attempt = 1; attempt &lt;= maxRetries; attempt++) {\n      try {\n        return await this.client.authenticate({ email, password });\n      } catch (error) {\n        lastError = error as Error;\n\n        // Don't retry authentication errors\n        if (ZeroTrustUtils.isAuthenticationError(error as Error)) {\n          throw error;\n        }\n\n        // Only retry if error is retryable\n        if (!ZeroTrustUtils.isRetryableError(error as Error)) {\n          throw error;\n        }\n\n        if (attempt &lt; maxRetries) {\n          const delay = Math.min(1000 * Math.pow(2, attempt - 1), 10000);\n          await new Promise(resolve =&gt; setTimeout(resolve, delay));\n        }\n      }\n    }\n\n    throw new Error(`Authentication failed after ${maxRetries} attempts: ${lastError.message}`);\n  }\n\n  handleAuthError(error: Error): string {\n    if (error instanceof ZeroTrustAPIError) {\n      switch (error.code) {\n        case 'INVALID_CREDENTIALS':\n          return 'Invalid email or password';\n        case 'ACCOUNT_LOCKED':\n          return 'Account is temporarily locked. Please try again later.';\n        case 'MFA_REQUIRED':\n          return 'Multi-factor authentication is required';\n        case 'RATE_LIMITED':\n          return 'Too many attempts. Please wait before trying again.';\n        default:\n          return error.message;\n      }\n    }\n\n    return 'An unexpected error occurred. Please try again.';\n  }\n}\n\n// Usage\nconst authService = new AuthService(client);\n\nasync function loginWithErrorHandling(email: string, password: string) {\n  try {\n    const response = await authService.authenticateWithRetry(email, password);\n    console.log('Login successful:', response);\n    return response;\n  } catch (error) {\n    const errorMessage = authService.handleAuthError(error as Error);\n    console.error('Login error:', errorMessage);\n    throw new Error(errorMessage);\n  }\n}\n</code></pre>"},{"location":"sdk/javascript/#utilities","title":"Utilities","text":""},{"location":"sdk/javascript/#email-and-security-utilities","title":"Email and Security Utilities","text":"<pre><code>import { ZeroTrustUtils } from '@mvp/zerotrust-sdk';\n\n// Email validation\nconst email = '  USER@EXAMPLE.COM  ';\nconst sanitizedEmail = ZeroTrustUtils.sanitizeEmail(email);\nconst isValid = ZeroTrustUtils.validateEmail(sanitizedEmail);\nconsole.log(`Sanitized: ${sanitizedEmail}, Valid: ${isValid}`);\n\n// Token expiration checking\nconst expiresAt = '2024-12-31T23:59:59Z';\nconst isExpired = ZeroTrustUtils.isTokenExpired(expiresAt);\nconst expiringSoon = ZeroTrustUtils.isTokenExpiringSoon(expiresAt, 300); // 5 minutes\nconsole.log(`Expired: ${isExpired}, Expiring soon: ${expiringSoon}`);\n\n// OAuth state and PKCE generation\nconst state = ZeroTrustUtils.generateState();\nconst verifier = ZeroTrustUtils.generateCodeVerifier();\nconst challenge = await ZeroTrustUtils.generateCodeChallenge(verifier);\nconsole.log('OAuth State:', state);\nconsole.log('PKCE Verifier:', verifier);\nconsole.log('PKCE Challenge:', challenge);\n\n// Error classification\ntry {\n  await client.authenticate({ email: 'invalid', password: 'wrong' });\n} catch (error) {\n  const isAuthError = ZeroTrustUtils.isAuthenticationError(error as Error);\n  const isRetryable = ZeroTrustUtils.isRetryableError(error as Error);\n  console.log(`Auth error: ${isAuthError}, Retryable: ${isRetryable}`);\n}\n</code></pre>"},{"location":"sdk/javascript/#api-reference","title":"API Reference","text":""},{"location":"sdk/javascript/#client-configuration","title":"Client Configuration","text":"<pre><code>interface ClientConfig {\n  baseURL: string;        // Required: Base URL of the auth service\n  apiKey: string;         // Required: API key for authentication\n  timeout?: number;       // Request timeout in milliseconds (default: 30000)\n  maxRetries?: number;    // Max retry attempts (default: 3)\n  retryDelay?: number;    // Delay between retries in milliseconds (default: 1000)\n  fetch?: typeof fetch;   // Custom fetch implementation\n  debug?: boolean;        // Enable debug logging\n}\n</code></pre>"},{"location":"sdk/javascript/#authentication-methods","title":"Authentication Methods","text":"<pre><code>// Authenticate user\nauthenticate(request: AuthenticationRequest): Promise&lt;AuthenticationResponse&gt;\n\n// Validate token\nvalidateToken(request: TokenValidationRequest): Promise&lt;TokenValidationResponse&gt;\n\n// Refresh token\nrefreshToken(request: RefreshTokenRequest): Promise&lt;AuthenticationResponse&gt;\n\n// Logout user\nlogout(request: LogoutRequest): Promise&lt;void&gt;\n\n// Health check\nhealthCheck(): Promise&lt;void&gt;\n</code></pre>"},{"location":"sdk/javascript/#user-management-methods","title":"User Management Methods","text":"<pre><code>// Get user profile\ngetUserProfile(token: string): Promise&lt;User&gt;\n\n// Update user profile\nupdateUserProfile(token: string, user: Partial&lt;User&gt;): Promise&lt;User&gt;\n</code></pre>"},{"location":"sdk/javascript/#utility-methods","title":"Utility Methods","text":"<pre><code>// Token utilities\nstatic isTokenExpired(expiresAt: string): boolean\nstatic isTokenExpiringSoon(expiresAt: string, thresholdSeconds: number): boolean\nstatic generateState(): string\nstatic generateCodeVerifier(): string\nstatic generateCodeChallenge(verifier: string): Promise&lt;string&gt;\n\n// URL utilities\nstatic buildAuthURL(baseURL: string, clientId: string, redirectURI: string, state: string, scopes?: string[]): string\nstatic buildAuthURLWithPKCE(baseURL: string, clientId: string, redirectURI: string, state: string, codeChallenge: string, scopes?: string[]): string\nstatic extractAuthCode(callbackURL: string): { code: string; state: string }\n\n// Security utilities\nstatic sanitizeEmail(email: string): string\nstatic validateEmail(email: string): boolean\nstatic isAuthenticationError(error: Error): boolean\nstatic isRetryableError(error: Error): boolean\n</code></pre> <p>For complete TypeScript type definitions, see the type definitions file.</p>"},{"location":"sdk/python/","title":"Python SDK for MVP Zero Trust Authentication","text":"<p>The Python SDK provides a comprehensive, type-hinted interface for integrating with the MVP Zero Trust Authentication system. It works with Python 3.8+ and includes support for popular frameworks like FastAPI, Django, and Flask.</p>"},{"location":"sdk/python/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Quick Start</li> <li>Authentication</li> <li>Token Management</li> <li>User Management</li> <li>FastAPI Integration</li> <li>Django Integration</li> <li>Flask Integration</li> <li>Async Support</li> <li>Error Handling</li> <li>Utilities</li> <li>API Reference</li> </ul>"},{"location":"sdk/python/#installation","title":"Installation","text":""},{"location":"sdk/python/#pypi","title":"PyPI","text":"<pre><code>pip install zerotrust-sdk\n</code></pre>"},{"location":"sdk/python/#poetry","title":"Poetry","text":"<pre><code>poetry add zerotrust-sdk\n</code></pre>"},{"location":"sdk/python/#development-installation","title":"Development Installation","text":"<pre><code>git clone https://github.com/mvp/zerotrust-auth.git\ncd zerotrust-auth/sdk/python\npip install -e .\n</code></pre>"},{"location":"sdk/python/#quick-start","title":"Quick Start","text":""},{"location":"sdk/python/#basic-client-setup","title":"Basic Client Setup","text":"<pre><code>from zerotrust_sdk import ZeroTrustClient\n\n# Initialize the client\nclient = ZeroTrustClient(\n    base_url=\"https://auth.example.com\",\n    api_key=\"your-api-key\",\n    timeout=30,\n    debug=True\n)\n\n# Test connection\ntry:\n    client.health_check()\n    print(\"\u2705 Connected to Zero Trust Auth service!\")\nexcept Exception as error:\n    print(f\"\u274c Connection failed: {error}\")\n\n# Always close the client when done\nclient.close()\n</code></pre>"},{"location":"sdk/python/#context-manager-usage","title":"Context Manager Usage","text":"<pre><code>from zerotrust_sdk import ZeroTrustClient\n\n# Recommended: Use context manager for automatic cleanup\nwith ZeroTrustClient(\n    base_url=\"https://auth.example.com\",\n    api_key=\"your-api-key\"\n) as client:\n    # Test connection\n    client.health_check()\n    print(\"\u2705 Connected to Zero Trust Auth service!\")\n\n    # Your code here...\n\n# Client is automatically closed\n</code></pre>"},{"location":"sdk/python/#authentication","title":"Authentication","text":""},{"location":"sdk/python/#user-login","title":"User Login","text":"<pre><code>from zerotrust_sdk import ZeroTrustClient, AuthenticationRequest\n\ndef authenticate_user(email: str, password: str):\n    with ZeroTrustClient(\n        base_url=\"https://auth.example.com\",\n        api_key=\"your-api-key\"\n    ) as client:\n        try:\n            response = client.authenticate(\n                email=email,\n                password=password,\n                remember=True\n            )\n\n            if response.requires_mfa:\n                print(f\"MFA required: {response.mfa_challenge}\")\n                # Handle MFA flow here\n                return {\"requires_mfa\": True, \"challenge\": response.mfa_challenge}\n\n            print(\"\u2705 Authentication successful!\")\n            print(f\"Access Token: {response.access_token}\")\n            print(f\"User: {response.user.display_name} ({response.user.email})\")\n            print(f\"Trust Score: {response.trust_score}\")\n            print(f\"Expires At: {response.expires_at}\")\n\n            return response\n\n        except Exception as error:\n            print(f\"\u274c Authentication failed: {error}\")\n            raise\n\n# Usage\nresult = authenticate_user(\"user@example.com\", \"secure-password\")\n</code></pre>"},{"location":"sdk/python/#token-validation","title":"Token Validation","text":"<pre><code>def validate_token(client: ZeroTrustClient, token: str) -&gt; bool:\n    try:\n        response = client.validate_token(\n            token=token,\n            required_scopes=[\"read:profile\", \"write:profile\"],\n            audience=\"api.example.com\"\n        )\n\n        if not response.valid:\n            print(\"\u274c Token is invalid\")\n            return False\n\n        print(\"\u2705 Token is valid!\")\n        print(f\"User ID: {response.claims.subject}\")\n        print(f\"Email: {response.claims.email}\")\n        print(f\"Roles: {response.claims.roles}\")\n        print(f\"Trust Score: {response.trust_score}\")\n\n        return True\n\n    except Exception as error:\n        print(f\"Token validation error: {error}\")\n        return False\n</code></pre>"},{"location":"sdk/python/#token-refresh","title":"Token Refresh","text":"<pre><code>def refresh_access_token(client: ZeroTrustClient, refresh_token: str):\n    try:\n        response = client.refresh_token(refresh_token)\n\n        print(\"\u2705 Token refreshed successfully!\")\n        print(f\"New Access Token: {response.access_token}\")\n        print(f\"Expires At: {response.expires_at}\")\n\n        return response\n\n    except Exception as error:\n        print(f\"\u274c Token refresh failed: {error}\")\n        raise\n</code></pre>"},{"location":"sdk/python/#logout","title":"Logout","text":"<pre><code>def logout_user(client: ZeroTrustClient, token: str = None):\n    try:\n        client.logout(\n            token=token,\n            everywhere=True  # Logout from all devices\n        )\n        print(\"\u2705 Logged out successfully\")\n\n    except Exception as error:\n        print(f\"Logout error: {error}\")\n</code></pre>"},{"location":"sdk/python/#token-management","title":"Token Management","text":""},{"location":"sdk/python/#token-manager-class","title":"Token Manager Class","text":"<pre><code>import time\nfrom datetime import datetime, timezone\nfrom typing import Optional\nfrom zerotrust_sdk import ZeroTrustClient, ZeroTrustUtils\n\nclass TokenManager:\n    def __init__(self, client: ZeroTrustClient):\n        self.client = client\n        self._access_token: Optional[str] = None\n        self._refresh_token: Optional[str] = None\n        self._expires_at: Optional[datetime] = None\n\n    def set_tokens(self, access_token: str, refresh_token: str, expires_at: str):\n        \"\"\"Store tokens securely.\"\"\"\n        self._access_token = access_token\n        self._refresh_token = refresh_token\n        self._expires_at = datetime.fromisoformat(expires_at.replace('Z', '+00:00'))\n\n    def get_valid_token(self) -&gt; Optional[str]:\n        \"\"\"Get a valid access token, refreshing if necessary.\"\"\"\n        if not self._access_token or not self._expires_at:\n            return None\n\n        # Check if token is expiring soon (within 5 minutes)\n        if ZeroTrustUtils.is_token_expiring_soon(self._expires_at, 300):\n            if not self._refresh_token:\n                return None\n\n            try:\n                response = self.client.refresh_token(self._refresh_token)\n                self.set_tokens(\n                    response.access_token,\n                    response.refresh_token,\n                    response.expires_at\n                )\n                return response.access_token\n\n            except Exception as error:\n                print(f\"Token refresh failed: {error}\")\n                self.clear_tokens()\n                return None\n\n        return self._access_token\n\n    def clear_tokens(self):\n        \"\"\"Clear stored tokens.\"\"\"\n        self._access_token = None\n        self._refresh_token = None\n        self._expires_at = None\n\n# Usage\nwith ZeroTrustClient(\n    base_url=\"https://auth.example.com\",\n    api_key=\"your-api-key\"\n) as client:\n    token_manager = TokenManager(client)\n\n    # After login\n    auth_response = client.authenticate(\"user@example.com\", \"password\")\n    token_manager.set_tokens(\n        auth_response.access_token,\n        auth_response.refresh_token,\n        auth_response.expires_at\n    )\n\n    # Later, get a valid token\n    valid_token = token_manager.get_valid_token()\n    if valid_token:\n        # Use token for API calls\n        pass\n</code></pre>"},{"location":"sdk/python/#user-management","title":"User Management","text":""},{"location":"sdk/python/#get-user-profile","title":"Get User Profile","text":"<pre><code>def get_user_profile(client: ZeroTrustClient, token: str):\n    try:\n        user = client.get_user_profile(token)\n\n        print(\"User Profile:\")\n        print(f\"  ID: {user.id}\")\n        print(f\"  Email: {user.email}\")\n        print(f\"  Name: {user.first_name} {user.last_name}\")\n        print(f\"  Display Name: {user.display_name}\")\n        print(f\"  Roles: {user.roles}\")\n        print(f\"  Trust Score: {user.trust_score}\")\n        print(f\"  Active: {user.is_active}\")\n        print(f\"  Verified: {user.is_verified}\")\n        print(f\"  MFA Enabled: {user.mfa_enabled}\")\n\n        return user\n\n    except Exception as error:\n        print(f\"Failed to get user profile: {error}\")\n        raise\n</code></pre>"},{"location":"sdk/python/#update-user-profile","title":"Update User Profile","text":"<pre><code>def update_user_profile(client: ZeroTrustClient, token: str, updates: dict):\n    try:\n        updated_user = client.update_user_profile(token, updates)\n\n        print(\"\u2705 Profile updated successfully!\")\n        print(f\"Updated Name: {updated_user.display_name}\")\n\n        return updated_user\n\n    except Exception as error:\n        print(f\"Failed to update profile: {error}\")\n        raise\n\n# Usage\nupdates = {\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"display_name\": \"John Doe\",\n    \"metadata\": {\n        \"department\": \"Engineering\",\n        \"location\": \"San Francisco\"\n    }\n}\n\nwith ZeroTrustClient(base_url=\"...\", api_key=\"...\") as client:\n    updated_user = update_user_profile(client, token, updates)\n</code></pre>"},{"location":"sdk/python/#fastapi-integration","title":"FastAPI Integration","text":""},{"location":"sdk/python/#fastapi-authentication-dependency","title":"FastAPI Authentication Dependency","text":"<pre><code>from fastapi import FastAPI, Depends, HTTPException, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom typing import Optional, List\nfrom zerotrust_sdk import ZeroTrustClient, Claims\n\napp = FastAPI(title=\"Zero Trust API\")\n\n# Initialize SDK client\nclient = ZeroTrustClient(\n    base_url=\"https://auth.example.com\",\n    api_key=\"your-api-key\"\n)\n\nsecurity = HTTPBearer()\n\nclass AuthService:\n    def __init__(self, client: ZeroTrustClient):\n        self.client = client\n\n    async def get_current_user(\n        self, \n        credentials: HTTPAuthorizationCredentials = Depends(security)\n    ) -&gt; Claims:\n        try:\n            response = self.client.validate_token(credentials.credentials)\n\n            if not response.valid:\n                raise HTTPException(\n                    status_code=status.HTTP_401_UNAUTHORIZED,\n                    detail=\"Invalid token\"\n                )\n\n            return response.claims\n\n        except Exception:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Authentication failed\"\n            )\n\n    def require_roles(self, required_roles: List[str]):\n        async def role_checker(current_user: Claims = Depends(self.get_current_user)):\n            user_roles = current_user.roles or []\n            has_required_role = any(role in user_roles for role in required_roles)\n\n            if not has_required_role:\n                raise HTTPException(\n                    status_code=status.HTTP_403_FORBIDDEN,\n                    detail=f\"Insufficient permissions. Required roles: {required_roles}\"\n                )\n\n            return current_user\n\n        return role_checker\n\n    def require_scopes(self, required_scopes: List[str]):\n        async def scope_checker(current_user: Claims = Depends(self.get_current_user)):\n            user_scopes = current_user.permissions or []\n            has_required_scope = all(scope in user_scopes for scope in required_scopes)\n\n            if not has_required_scope:\n                raise HTTPException(\n                    status_code=status.HTTP_403_FORBIDDEN,\n                    detail=f\"Insufficient permissions. Required scopes: {required_scopes}\"\n                )\n\n            return current_user\n\n        return scope_checker\n\nauth_service = AuthService(client)\n\n# Public endpoints\n@app.post(\"/auth/login\")\nasync def login(email: str, password: str):\n    try:\n        response = client.authenticate(email, password)\n        return {\n            \"access_token\": response.access_token,\n            \"refresh_token\": response.refresh_token,\n            \"token_type\": \"bearer\",\n            \"expires_at\": response.expires_at,\n            \"user\": {\n                \"id\": response.user.id,\n                \"email\": response.user.email,\n                \"display_name\": response.user.display_name\n            }\n        }\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid credentials\"\n        )\n\n# Protected endpoints\n@app.get(\"/profile\")\nasync def get_profile(current_user: Claims = Depends(auth_service.get_current_user)):\n    return {\n        \"user_id\": current_user.subject,\n        \"email\": current_user.email,\n        \"roles\": current_user.roles,\n        \"trust_score\": current_user.trust_score\n    }\n\n# Role-protected endpoints\n@app.get(\"/admin/users\")\nasync def list_users(\n    current_user: Claims = Depends(auth_service.require_roles([\"admin\"]))\n):\n    return {\"message\": \"Admin access granted\", \"user\": current_user.subject}\n\n# Scope-protected endpoints\n@app.put(\"/profile\")\nasync def update_profile(\n    updates: dict,\n    current_user: Claims = Depends(auth_service.require_scopes([\"write:profile\"]))\n):\n    # Update profile logic here\n    return {\"message\": \"Profile updated\", \"user\": current_user.subject}\n\n# Health check\n@app.get(\"/health\")\nasync def health_check():\n    try:\n        client.health_check()\n        return {\"status\": \"healthy\"}\n    except Exception:\n        raise HTTPException(\n            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,\n            detail=\"Auth service unavailable\"\n        )\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"sdk/python/#fastapi-middleware","title":"FastAPI Middleware","text":"<pre><code>from fastapi import FastAPI, Request, Response\nfrom fastapi.middleware.base import BaseHTTPMiddleware\nfrom zerotrust_sdk import ZeroTrustClient\nimport time\n\nclass AuthMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app, client: ZeroTrustClient, skip_paths: List[str] = None):\n        super().__init__(app)\n        self.client = client\n        self.skip_paths = skip_paths or [\"/health\", \"/docs\", \"/openapi.json\"]\n\n    async def dispatch(self, request: Request, call_next):\n        # Skip authentication for certain paths\n        if request.url.path in self.skip_paths:\n            return await call_next(request)\n\n        # Extract token from Authorization header\n        auth_header = request.headers.get(\"authorization\")\n        if not auth_header or not auth_header.startswith(\"Bearer \"):\n            return Response(\n                content='{\"error\": \"Authentication required\"}',\n                status_code=401,\n                media_type=\"application/json\"\n            )\n\n        token = auth_header[7:]  # Remove \"Bearer \" prefix\n\n        try:\n            response = self.client.validate_token(token)\n            if not response.valid:\n                return Response(\n                    content='{\"error\": \"Invalid token\"}',\n                    status_code=401,\n                    media_type=\"application/json\"\n                )\n\n            # Add claims to request state\n            request.state.claims = response.claims\n            request.state.user_id = response.claims.subject\n\n            return await call_next(request)\n\n        except Exception:\n            return Response(\n                content='{\"error\": \"Authentication failed\"}',\n                status_code=401,\n                media_type=\"application/json\"\n            )\n\n# Usage\napp = FastAPI()\nclient = ZeroTrustClient(base_url=\"...\", api_key=\"...\")\n\napp.add_middleware(\n    AuthMiddleware,\n    client=client,\n    skip_paths=[\"/health\", \"/auth/login\", \"/docs\"]\n)\n</code></pre>"},{"location":"sdk/python/#django-integration","title":"Django Integration","text":""},{"location":"sdk/python/#django-authentication-backend","title":"Django Authentication Backend","text":"<pre><code>from django.contrib.auth.backends import BaseBackend\nfrom django.contrib.auth.models import User\nfrom django.conf import settings\nfrom zerotrust_sdk import ZeroTrustClient\n\nclass ZeroTrustAuthBackend(BaseBackend):\n    def __init__(self):\n        self.client = ZeroTrustClient(\n            base_url=settings.ZEROTRUST_BASE_URL,\n            api_key=settings.ZEROTRUST_API_KEY\n        )\n\n    def authenticate(self, request, username=None, password=None, **kwargs):\n        if username is None or password is None:\n            return None\n\n        try:\n            response = self.client.authenticate(username, password)\n\n            if response.requires_mfa:\n                # Handle MFA flow\n                return None\n\n            # Get or create Django user\n            user, created = User.objects.get_or_create(\n                username=response.user.email,\n                defaults={\n                    'email': response.user.email,\n                    'first_name': response.user.first_name,\n                    'last_name': response.user.last_name,\n                    'is_active': response.user.is_active,\n                }\n            )\n\n            # Store tokens in session\n            request.session['access_token'] = response.access_token\n            request.session['refresh_token'] = response.refresh_token\n            request.session['expires_at'] = response.expires_at\n\n            return user\n\n        except Exception as e:\n            return None\n\n    def get_user(self, user_id):\n        try:\n            return User.objects.get(pk=user_id)\n        except User.DoesNotExist:\n            return None\n\n# settings.py\nAUTHENTICATION_BACKENDS = [\n    'path.to.ZeroTrustAuthBackend',\n    'django.contrib.auth.backends.ModelBackend',  # Fallback\n]\n\nZEROTRUST_BASE_URL = 'https://auth.example.com'\nZEROTRUST_API_KEY = 'your-api-key'\n</code></pre>"},{"location":"sdk/python/#django-middleware","title":"Django Middleware","text":"<pre><code>from django.http import JsonResponse\nfrom django.utils.deprecation import MiddlewareMixin\nfrom django.conf import settings\nfrom zerotrust_sdk import ZeroTrustClient\n\nclass ZeroTrustTokenMiddleware(MiddlewareMixin):\n    def __init__(self, get_response):\n        super().__init__(get_response)\n        self.client = ZeroTrustClient(\n            base_url=settings.ZEROTRUST_BASE_URL,\n            api_key=settings.ZEROTRUST_API_KEY\n        )\n        self.skip_paths = ['/admin/', '/auth/', '/health/']\n\n    def process_request(self, request):\n        # Skip certain paths\n        if any(request.path.startswith(path) for path in self.skip_paths):\n            return None\n\n        # Extract token from Authorization header\n        auth_header = request.META.get('HTTP_AUTHORIZATION')\n        if not auth_header or not auth_header.startswith('Bearer '):\n            return JsonResponse({'error': 'Authentication required'}, status=401)\n\n        token = auth_header[7:]  # Remove \"Bearer \" prefix\n\n        try:\n            response = self.client.validate_token(token)\n            if not response.valid:\n                return JsonResponse({'error': 'Invalid token'}, status=401)\n\n            # Add claims to request\n            request.zerotrust_claims = response.claims\n            request.zerotrust_user_id = response.claims.subject\n\n        except Exception:\n            return JsonResponse({'error': 'Authentication failed'}, status=401)\n\n        return None\n\n# settings.py\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'path.to.ZeroTrustTokenMiddleware',\n    # ... other middleware\n]\n</code></pre>"},{"location":"sdk/python/#django-decorators","title":"Django Decorators","text":"<pre><code>from functools import wraps\nfrom django.http import JsonResponse\nfrom django.conf import settings\nfrom zerotrust_sdk import ZeroTrustClient\n\nclient = ZeroTrustClient(\n    base_url=settings.ZEROTRUST_BASE_URL,\n    api_key=settings.ZEROTRUST_API_KEY\n)\n\ndef require_auth(view_func):\n    @wraps(view_func)\n    def wrapped_view(request, *args, **kwargs):\n        auth_header = request.META.get('HTTP_AUTHORIZATION')\n        if not auth_header or not auth_header.startswith('Bearer '):\n            return JsonResponse({'error': 'Authentication required'}, status=401)\n\n        token = auth_header[7:]\n\n        try:\n            response = client.validate_token(token)\n            if not response.valid:\n                return JsonResponse({'error': 'Invalid token'}, status=401)\n\n            request.zerotrust_claims = response.claims\n            return view_func(request, *args, **kwargs)\n\n        except Exception:\n            return JsonResponse({'error': 'Authentication failed'}, status=401)\n\n    return wrapped_view\n\ndef require_roles(*required_roles):\n    def decorator(view_func):\n        @wraps(view_func)\n        def wrapped_view(request, *args, **kwargs):\n            if not hasattr(request, 'zerotrust_claims'):\n                return JsonResponse({'error': 'Authentication required'}, status=401)\n\n            user_roles = request.zerotrust_claims.roles or []\n            has_required_role = any(role in user_roles for role in required_roles)\n\n            if not has_required_role:\n                return JsonResponse({\n                    'error': 'Insufficient permissions',\n                    'required_roles': list(required_roles)\n                }, status=403)\n\n            return view_func(request, *args, **kwargs)\n\n        return wrapped_view\n    return decorator\n\n# Usage in views\nfrom django.http import JsonResponse\n\n@require_auth\ndef profile_view(request):\n    return JsonResponse({\n        'user_id': request.zerotrust_claims.subject,\n        'email': request.zerotrust_claims.email,\n        'roles': request.zerotrust_claims.roles\n    })\n\n@require_auth\n@require_roles('admin')\ndef admin_view(request):\n    return JsonResponse({'message': 'Admin access granted'})\n</code></pre>"},{"location":"sdk/python/#flask-integration","title":"Flask Integration","text":""},{"location":"sdk/python/#flask-authentication","title":"Flask Authentication","text":"<pre><code>from flask import Flask, request, jsonify, g\nfrom functools import wraps\nfrom zerotrust_sdk import ZeroTrustClient\nimport os\n\napp = Flask(__name__)\n\n# Initialize client\nclient = ZeroTrustClient(\n    base_url=os.getenv('ZEROTRUST_BASE_URL'),\n    api_key=os.getenv('ZEROTRUST_API_KEY')\n)\n\ndef require_auth(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        auth_header = request.headers.get('Authorization')\n        if not auth_header or not auth_header.startswith('Bearer '):\n            return jsonify({'error': 'Authentication required'}), 401\n\n        token = auth_header[7:]  # Remove \"Bearer \" prefix\n\n        try:\n            response = client.validate_token(token)\n            if not response.valid:\n                return jsonify({'error': 'Invalid token'}), 401\n\n            g.claims = response.claims\n            g.user_id = response.claims.subject\n\n            return f(*args, **kwargs)\n\n        except Exception as e:\n            return jsonify({'error': 'Authentication failed'}), 401\n\n    return decorated_function\n\ndef require_roles(*required_roles):\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            if not hasattr(g, 'claims'):\n                return jsonify({'error': 'Authentication required'}), 401\n\n            user_roles = g.claims.roles or []\n            has_required_role = any(role in user_roles for role in required_roles)\n\n            if not has_required_role:\n                return jsonify({\n                    'error': 'Insufficient permissions',\n                    'required_roles': list(required_roles)\n                }), 403\n\n            return f(*args, **kwargs)\n\n        return decorated_function\n    return decorator\n\n# Public routes\n@app.route('/auth/login', methods=['POST'])\ndef login():\n    data = request.get_json()\n    email = data.get('email')\n    password = data.get('password')\n\n    try:\n        response = client.authenticate(email, password)\n        return jsonify({\n            'access_token': response.access_token,\n            'refresh_token': response.refresh_token,\n            'expires_at': response.expires_at,\n            'user': {\n                'id': response.user.id,\n                'email': response.user.email,\n                'display_name': response.user.display_name\n            }\n        })\n    except Exception as e:\n        return jsonify({'error': 'Invalid credentials'}), 401\n\n# Protected routes\n@app.route('/profile')\n@require_auth\ndef get_profile():\n    return jsonify({\n        'user_id': g.claims.subject,\n        'email': g.claims.email,\n        'roles': g.claims.roles,\n        'trust_score': g.claims.trust_score\n    })\n\n# Role-protected routes\n@app.route('/admin/users')\n@require_auth\n@require_roles('admin')\ndef list_users():\n    return jsonify({\n        'message': 'Admin access granted',\n        'user': g.user_id\n    })\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"sdk/python/#async-support","title":"Async Support","text":""},{"location":"sdk/python/#async-client-implementation","title":"Async Client Implementation","text":"<pre><code>import asyncio\nimport aiohttp\nfrom typing import Optional\nfrom zerotrust_sdk import AuthenticationRequest, TokenValidationRequest\n\nclass AsyncZeroTrustClient:\n    def __init__(self, base_url: str, api_key: str, timeout: int = 30):\n        self.base_url = base_url.rstrip('/')\n        self.api_key = api_key\n        self.timeout = aiohttp.ClientTimeout(total=timeout)\n        self.session: Optional[aiohttp.ClientSession] = None\n\n    async def __aenter__(self):\n        self.session = aiohttp.ClientSession(\n            timeout=self.timeout,\n            headers={\n                'Content-Type': 'application/json',\n                'X-API-Key': self.api_key,\n                'User-Agent': 'MVP-ZeroTrust-SDK/1.0.0 (Python-Async)'\n            }\n        )\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        if self.session:\n            await self.session.close()\n\n    async def authenticate(self, email: str, password: str, **kwargs):\n        request_data = {\n            'email': email,\n            'password': password,\n            **kwargs\n        }\n\n        async with self.session.post(\n            f'{self.base_url}/api/v1/auth/login',\n            json=request_data\n        ) as response:\n            if response.status &gt;= 400:\n                error_data = await response.json()\n                raise Exception(f\"Authentication failed: {error_data.get('message', 'Unknown error')}\")\n\n            return await response.json()\n\n    async def validate_token(self, token: str, **kwargs):\n        request_data = {\n            'token': token,\n            **kwargs\n        }\n\n        async with self.session.post(\n            f'{self.base_url}/api/v1/auth/validate',\n            json=request_data\n        ) as response:\n            if response.status &gt;= 400:\n                error_data = await response.json()\n                raise Exception(f\"Token validation failed: {error_data.get('message', 'Unknown error')}\")\n\n            return await response.json()\n\n    async def health_check(self):\n        async with self.session.get(f'{self.base_url}/health') as response:\n            if response.status != 200:\n                raise Exception(f\"Health check failed with status: {response.status}\")\n\n# Usage\nasync def main():\n    async with AsyncZeroTrustClient(\n        base_url=\"https://auth.example.com\",\n        api_key=\"your-api-key\"\n    ) as client:\n        # Test connection\n        await client.health_check()\n        print(\"\u2705 Connected to Zero Trust Auth service!\")\n\n        # Authenticate user\n        auth_response = await client.authenticate(\"user@example.com\", \"password\")\n        print(f\"Access token: {auth_response['access_token']}\")\n\n        # Validate token\n        validation_response = await client.validate_token(auth_response['access_token'])\n        print(f\"Token valid: {validation_response['valid']}\")\n\n# Run async example\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"sdk/python/#error-handling","title":"Error Handling","text":""},{"location":"sdk/python/#comprehensive-error-handling","title":"Comprehensive Error Handling","text":"<pre><code>from zerotrust_sdk import ZeroTrustClient, ZeroTrustAPIError, ZeroTrustUtils\nimport time\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass AuthService:\n    def __init__(self, client: ZeroTrustClient):\n        self.client = client\n\n    def authenticate_with_retry(self, email: str, password: str, max_retries: int = 3):\n        \"\"\"Authenticate with automatic retry logic.\"\"\"\n        last_error = None\n\n        for attempt in range(1, max_retries + 1):\n            try:\n                return self.client.authenticate(email, password)\n\n            except Exception as error:\n                last_error = error\n                logger.warning(f\"Authentication attempt {attempt} failed: {error}\")\n\n                # Don't retry authentication errors\n                if ZeroTrustUtils.is_authentication_error(error):\n                    raise error\n\n                # Only retry if error is retryable\n                if not ZeroTrustUtils.is_retryable_error(error):\n                    raise error\n\n                if attempt &lt; max_retries:\n                    delay = min(2 ** (attempt - 1), 10)  # Exponential backoff, max 10s\n                    logger.info(f\"Retrying in {delay} seconds...\")\n                    time.sleep(delay)\n\n        raise Exception(f\"Authentication failed after {max_retries} attempts: {last_error}\")\n\n    def handle_auth_error(self, error: Exception) -&gt; str:\n        \"\"\"Convert authentication errors to user-friendly messages.\"\"\"\n        if isinstance(error, ZeroTrustAPIError):\n            error_messages = {\n                'INVALID_CREDENTIALS': 'Invalid email or password',\n                'ACCOUNT_LOCKED': 'Account is temporarily locked. Please try again later.',\n                'MFA_REQUIRED': 'Multi-factor authentication is required',\n                'RATE_LIMITED': 'Too many attempts. Please wait before trying again.',\n                'TOKEN_EXPIRED': 'Your session has expired. Please log in again.',\n                'INSUFFICIENT_PERMISSIONS': 'You do not have permission to access this resource.'\n            }\n            return error_messages.get(error.code, error.message)\n\n        return 'An unexpected error occurred. Please try again.'\n\n# Usage\nwith ZeroTrustClient(base_url=\"...\", api_key=\"...\") as client:\n    auth_service = AuthService(client)\n\n    try:\n        response = auth_service.authenticate_with_retry(\"user@example.com\", \"password\")\n        print(\"Login successful!\")\n\n    except Exception as error:\n        error_message = auth_service.handle_auth_error(error)\n        print(f\"Login failed: {error_message}\")\n</code></pre>"},{"location":"sdk/python/#custom-exception-classes","title":"Custom Exception Classes","text":"<pre><code>from zerotrust_sdk import ZeroTrustAPIError\n\nclass AuthenticationError(Exception):\n    \"\"\"Raised when authentication fails.\"\"\"\n    pass\n\nclass AuthorizationError(Exception):\n    \"\"\"Raised when user lacks required permissions.\"\"\"\n    pass\n\nclass TokenExpiredError(Exception):\n    \"\"\"Raised when token has expired.\"\"\"\n    pass\n\ndef handle_sdk_errors(func):\n    \"\"\"Decorator to convert SDK errors to custom exceptions.\"\"\"\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except ZeroTrustAPIError as e:\n            if e.code in ['INVALID_CREDENTIALS', 'INVALID_TOKEN']:\n                raise AuthenticationError(e.message) from e\n            elif e.code in ['INSUFFICIENT_PERMISSIONS', 'MISSING_SCOPE']:\n                raise AuthorizationError(e.message) from e\n            elif e.code == 'TOKEN_EXPIRED':\n                raise TokenExpiredError(e.message) from e\n            else:\n                raise  # Re-raise unknown API errors\n        except Exception as e:\n            # Handle non-API errors\n            raise\n\n    return wrapper\n\n@handle_sdk_errors\ndef login_user(client: ZeroTrustClient, email: str, password: str):\n    return client.authenticate(email, password)\n\n# Usage\ntry:\n    response = login_user(client, \"user@example.com\", \"wrong-password\")\nexcept AuthenticationError as e:\n    print(f\"Authentication failed: {e}\")\nexcept AuthorizationError as e:\n    print(f\"Authorization failed: {e}\")\nexcept TokenExpiredError as e:\n    print(f\"Token expired: {e}\")\n</code></pre>"},{"location":"sdk/python/#utilities","title":"Utilities","text":""},{"location":"sdk/python/#security-and-validation-utilities","title":"Security and Validation Utilities","text":"<pre><code>from zerotrust_sdk import ZeroTrustUtils\nfrom datetime import datetime, timezone\n\n# Email validation\nemail = \"  USER@EXAMPLE.COM  \"\nsanitized_email = ZeroTrustUtils.sanitize_email(email)\nis_valid = ZeroTrustUtils.validate_email(sanitized_email)\nprint(f\"Sanitized: {sanitized_email}, Valid: {is_valid}\")\n\n# Token expiration checking\nexpires_at = \"2024-12-31T23:59:59Z\"\nis_expired = ZeroTrustUtils.is_token_expired(expires_at)\nexpiring_soon = ZeroTrustUtils.is_token_expiring_soon(expires_at, 300)  # 5 minutes\nprint(f\"Expired: {is_expired}, Expiring soon: {expiring_soon}\")\n\n# Error classification\ntry:\n    client.authenticate(\"invalid@example.com\", \"wrong-password\")\nexcept Exception as error:\n    is_auth_error = ZeroTrustUtils.is_authentication_error(error)\n    is_retryable = ZeroTrustUtils.is_retryable_error(error)\n    print(f\"Auth error: {is_auth_error}, Retryable: {is_retryable}\")\n</code></pre>"},{"location":"sdk/python/#configuration-management","title":"Configuration Management","text":"<pre><code>import os\nfrom dataclasses import dataclass\nfrom typing import Optional\n\n@dataclass\nclass ZeroTrustConfig:\n    base_url: str\n    api_key: str\n    timeout: int = 30\n    max_retries: int = 3\n    debug: bool = False\n\n    @classmethod\n    def from_env(cls) -&gt; 'ZeroTrustConfig':\n        \"\"\"Load configuration from environment variables.\"\"\"\n        return cls(\n            base_url=os.getenv('ZEROTRUST_BASE_URL', ''),\n            api_key=os.getenv('ZEROTRUST_API_KEY', ''),\n            timeout=int(os.getenv('ZEROTRUST_TIMEOUT', '30')),\n            max_retries=int(os.getenv('ZEROTRUST_MAX_RETRIES', '3')),\n            debug=os.getenv('ZEROTRUST_DEBUG', 'false').lower() == 'true'\n        )\n\n    def validate(self) -&gt; None:\n        \"\"\"Validate configuration.\"\"\"\n        if not self.base_url:\n            raise ValueError(\"ZEROTRUST_BASE_URL is required\")\n        if not self.api_key:\n            raise ValueError(\"ZEROTRUST_API_KEY is required\")\n        if self.timeout &lt;= 0:\n            raise ValueError(\"Timeout must be positive\")\n\n# Usage\nconfig = ZeroTrustConfig.from_env()\nconfig.validate()\n\nwith ZeroTrustClient(\n    base_url=config.base_url,\n    api_key=config.api_key,\n    timeout=config.timeout,\n    debug=config.debug\n) as client:\n    # Use client...\n    pass\n</code></pre>"},{"location":"sdk/python/#api-reference","title":"API Reference","text":""},{"location":"sdk/python/#client-configuration","title":"Client Configuration","text":"<pre><code>class ZeroTrustClient:\n    def __init__(\n        self,\n        base_url: str,          # Required: Base URL of the auth service\n        api_key: str,           # Required: API key for authentication\n        timeout: int = 30,      # Request timeout in seconds\n        max_retries: int = 3,   # Max retry attempts\n        retry_delay: float = 1.0, # Delay between retries in seconds\n        debug: bool = False     # Enable debug logging\n    )\n</code></pre>"},{"location":"sdk/python/#authentication-methods","title":"Authentication Methods","text":"<pre><code># Authenticate user\ndef authenticate(self, email: str, password: str, mfa: str = None, remember: bool = False) -&gt; AuthenticationResponse\n\n# Validate token\ndef validate_token(self, token: str, audience: str = None, required_scopes: List[str] = None) -&gt; TokenValidationResponse\n\n# Refresh token\ndef refresh_token(self, refresh_token: str) -&gt; AuthenticationResponse\n\n# Logout user\ndef logout(self, token: str = None, session_id: str = None, everywhere: bool = False) -&gt; None\n\n# Health check\ndef health_check(self) -&gt; None\n</code></pre>"},{"location":"sdk/python/#user-management-methods","title":"User Management Methods","text":"<pre><code># Get user profile\ndef get_user_profile(self, token: str) -&gt; User\n\n# Update user profile\ndef update_user_profile(self, token: str, user_data: Dict[str, Any]) -&gt; User\n</code></pre>"},{"location":"sdk/python/#utility-methods","title":"Utility Methods","text":"<pre><code># Token utilities\n@staticmethod\ndef is_token_expired(expires_at: Union[str, datetime, int]) -&gt; bool\n\n@staticmethod\ndef is_token_expiring_soon(expires_at: Union[str, datetime, int], threshold_seconds: int) -&gt; bool\n\n# Security utilities\n@staticmethod\ndef sanitize_email(email: str) -&gt; str\n\n@staticmethod\ndef validate_email(email: str) -&gt; bool\n\n# Error utilities\n@staticmethod\ndef is_authentication_error(error: Exception) -&gt; bool\n\n@staticmethod\ndef is_retryable_error(error: Exception) -&gt; bool\n</code></pre> <p>For complete type annotations and class definitions, see the Python SDK source code.</p>"},{"location":"security/SECURITY-SCANNING-QUICK-REFERENCE/","title":"Security Scanning Quick Reference","text":""},{"location":"security/SECURITY-SCANNING-QUICK-REFERENCE/#quick-commands","title":"\ud83d\ude80 Quick Commands","text":"<pre><code># Install security tools (one-time setup)\nmake security-install\n\n# Run quick security scan (2-3 minutes)\nmake security-scan-quick\n\n# Run comprehensive security scan (5-10 minutes)\nmake security-scan\n\n# Run specific checks from Makefile\nmake check-deps     # Dependency vulnerabilities only\nmake lint          # Code quality issues\n</code></pre>"},{"location":"security/SECURITY-SCANNING-QUICK-REFERENCE/#what-gets-scanned","title":"\ud83d\udccb What Gets Scanned","text":""},{"location":"security/SECURITY-SCANNING-QUICK-REFERENCE/#quick-scan-make-security-scan-quick","title":"Quick Scan (<code>make security-scan-quick</code>)","text":"<ul> <li>\u2705 Dependencies: Known vulnerabilities (govulncheck)</li> <li>\u2705 Code Quality: Static analysis (staticcheck)</li> <li>\u2705 Secrets: Exposed credentials (gitleaks)</li> </ul>"},{"location":"security/SECURITY-SCANNING-QUICK-REFERENCE/#full-scan-make-security-scan","title":"Full Scan (<code>make security-scan</code>)","text":"<p>All of the above plus: - \u2705 Container: Dockerfile security (hadolint, trivy) - \u2705 SAST: Security patterns (gosec, semgrep) - \u2705 Licenses: Compliance check (go-licenses)</p>"},{"location":"security/SECURITY-SCANNING-QUICK-REFERENCE/#manual-tool-usage","title":"\ud83d\udee0\ufe0f Manual Tool Usage","text":"<pre><code># Individual tool commands (if installed)\ngovulncheck ./...                    # Go vulnerabilities\ngosec -fmt text ./...                # Security issues\ngitleaks detect --source .           # Secret scanning\nstaticcheck ./...                    # Static analysis\nhadolint Dockerfile                  # Dockerfile linting\ntrivy fs .                          # Filesystem vulnerabilities\ngo-licenses check ./...             # License compliance\n</code></pre>"},{"location":"security/SECURITY-SCANNING-QUICK-REFERENCE/#output-files","title":"\ud83d\udcca Output Files","text":"<ul> <li><code>security-report.md</code> - Summary of all scans</li> <li><code>license-report.txt</code> - Detailed license information</li> <li>Console output with color-coded results</li> </ul>"},{"location":"security/SECURITY-SCANNING-QUICK-REFERENCE/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":"<pre><code># Check if tools are installed\nwhich govulncheck gosec gitleaks\n\n# Install missing Go tools\ngo install golang.org/x/vuln/cmd/govulncheck@latest\ngo install github.com/securego/gosec/v2/cmd/gosec@latest\ngo install honnef.co/go/tools/cmd/staticcheck@latest\ngo install github.com/google/go-licenses@latest\n\n# Install missing system tools (macOS)\nbrew install gitleaks hadolint trivy\n\n# Install missing system tools (Linux)\n# See tool-specific installation guides\n</code></pre>"},{"location":"security/SECURITY-SCANNING-QUICK-REFERENCE/#common-issues","title":"\ud83d\udea8 Common Issues","text":"Issue Solution Script not found Run from project root directory Permission denied Makefile handles this automatically Tool not found Run <code>make security-install</code> Scan failures Check output for specific issues"},{"location":"security/SECURITY-SCANNING-QUICK-REFERENCE/#cicd-integration","title":"\ud83d\udcc8 CI/CD Integration","text":"<p>Security scans run automatically on: - Every push to <code>main</code> branch - Every pull request - Daily schedule (cron)</p> <p>Check GitHub Actions tab for results.</p>"},{"location":"security/SECURITY-SCANNING-QUICK-REFERENCE/#security-policies","title":"\ud83d\udd12 Security Policies","text":"<ul> <li>Security Policy</li> <li>Security Architecture</li> <li>Detailed Setup Guide</li> </ul>"},{"location":"security/incident-response/","title":"Incident Response Plan","text":"<p>This document is a placeholder for Incident Response Plan. Information regarding the incident response plan will be added here.</p> <p>This file was auto-generated as part of a documentation update initiative.</p>"},{"location":"security/policies/","title":"Security Policies","text":"<p>This document is a placeholder for Security Policies. Information regarding security policies and procedures will be added here.</p> <p>This file was auto-generated as part of a documentation update initiative.</p>"},{"location":"security/security-scanning-setup/","title":"Security Scanning Infrastructure Setup","text":"<p>This document describes the security scanning infrastructure implemented for the MVP Zero Trust Auth system, including local scanning capabilities and CI/CD integration.</p>"},{"location":"security/security-scanning-setup/#overview","title":"Overview","text":"<p>The security scanning infrastructure provides comprehensive security analysis through multiple scanning tools and methodologies:</p> <ul> <li>Dependency Vulnerability Scanning: Identifies known vulnerabilities in dependencies</li> <li>Secret Detection: Prevents accidental commit of sensitive information</li> <li>Container Security: Validates Docker container security</li> <li>Static Application Security Testing (SAST): Identifies security issues in source code</li> <li>License Compliance: Ensures dependency licenses are compatible</li> </ul>"},{"location":"security/security-scanning-setup/#local-security-scanning","title":"Local Security Scanning","text":""},{"location":"security/security-scanning-setup/#quick-start","title":"Quick Start","text":"<pre><code># Install security scanning tools\nmake security-install\n\n# Run comprehensive security scan\nmake security-scan\n\n# Run quick security scan (faster, skips some checks)\nmake security-scan-quick\n</code></pre>"},{"location":"security/security-scanning-setup/#makefile-targets","title":"Makefile Targets","text":"<p>The following security-related targets are available in the Makefile:</p> Target Description <code>ensure-security-script</code> Verifies security script exists and is executable <code>security-scan</code> Runs comprehensive security scan <code>security-scan-quick</code> Runs quick security scan (dependency + secrets only) <code>security-install</code> Installs required security scanning tools"},{"location":"security/security-scanning-setup/#security-scanning-script","title":"Security Scanning Script","text":"<p>The main security scanning logic is implemented in <code>scripts/security-scan.sh</code>:</p>"},{"location":"security/security-scanning-setup/#features","title":"Features","text":"<ol> <li>Tool Installation Management</li> <li>Automatic installation of Go-based security tools</li> <li>Progress tracking with success/failure reporting</li> <li> <p>Graceful handling of installation failures</p> </li> <li> <p>Scanning Modes</p> </li> <li>Comprehensive Mode: All security scans</li> <li> <p>Quick Mode (<code>--quick</code>): Only dependency and secret scans</p> </li> <li> <p>Security Scans Performed</p> </li> </ol> <p>Dependency Vulnerability Scan:    - <code>govulncheck</code>: Go vulnerability database check    - <code>staticcheck</code>: Static analysis for bugs and performance</p> <p>Secret Detection:    - <code>gitleaks</code>: Detects secrets in git history</p> <p>Container Security (Full scan only):    - <code>hadolint</code>: Dockerfile linting    - <code>trivy</code>: Container vulnerability scanning</p> <p>SAST (Full scan only):    - <code>gosec</code>: Go security checker    - <code>semgrep</code>: Pattern-based static analysis</p> <p>License Compliance (Full scan only):    - <code>go-licenses</code>: Go dependency license checker</p> <ol> <li>Output and Reporting</li> <li>Color-coded console output</li> <li>Detailed scan summary</li> <li>Security report generation (<code>security-report.md</code>)</li> </ol>"},{"location":"security/security-scanning-setup/#implementation-details","title":"Implementation Details","text":""},{"location":"security/security-scanning-setup/#dry-principle-applied","title":"DRY Principle Applied","text":"<p>The Makefile implementation follows the DRY principle:</p> <pre><code># Single source of truth for script verification\nensure-security-script: ## Ensure security script exists and is executable\n    @if [ ! -f scripts/security-scan.sh ]; then \\\n        echo \"\u274c Security scan script not found at scripts/security-scan.sh\"; \\\n        exit 1; \\\n    fi\n    @chmod +x scripts/security-scan.sh\n\n# All security targets depend on ensure-security-script\nsecurity-scan: ensure-security-script ## Run comprehensive security scan\n    @echo \"\ud83d\udd12 Running comprehensive security scan...\"\n    @./scripts/security-scan.sh || (echo \"\u274c Security scan failed\" &amp;&amp; exit 1)\n    @echo \"\u2705 Security scan completed\"\n</code></pre>"},{"location":"security/security-scanning-setup/#error-handling","title":"Error Handling","text":"<p>The security scanning script includes comprehensive error handling:</p> <pre><code># Track installation results\nlocal failed_tools=()\n\n# Install govulncheck\nprint_status \"Installing govulncheck...\"\nif go install golang.org/x/vuln/cmd/govulncheck@latest; then\n    print_success \"govulncheck installed\"\nelse\n    failed_tools+=(\"govulncheck\")\n    print_warning \"Failed to install govulncheck\"\nfi\n\n# Report results\nif [ ${#failed_tools[@]} -eq 0 ]; then\n    print_success \"All Go security tools installed successfully\"\nelse\n    print_warning \"Some tools failed to install: ${failed_tools[*]}\"\n    print_status \"You may need to install them manually or check your Go environment\"\nfi\n</code></pre>"},{"location":"security/security-scanning-setup/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"security/security-scanning-setup/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>The security scanning is integrated into CI/CD through <code>.github/workflows/security.yml</code>:</p>"},{"location":"security/security-scanning-setup/#workflow-jobs","title":"Workflow Jobs","text":"<ol> <li>dependency-scan</li> <li>Go vulnerability checking with govulncheck</li> <li>Static analysis with staticcheck</li> <li>Nancy dependency scanning</li> <li> <p>Gosec security scanning</p> </li> <li> <p>container-scan</p> </li> <li>Trivy filesystem vulnerability scanning</li> <li> <p>Hadolint Dockerfile linting</p> </li> <li> <p>secret-scan</p> </li> <li> <p>Gitleaks secret detection with custom configuration</p> </li> <li> <p>license-check</p> </li> <li>go-licenses for license compliance</li> <li> <p>Optional FOSSA integration</p> </li> <li> <p>sast</p> </li> <li>CodeQL analysis for Go and JavaScript</li> <li>Security-extended queries</li> </ol>"},{"location":"security/security-scanning-setup/#security-configuration-files","title":"Security Configuration Files","text":""},{"location":"security/security-scanning-setup/#gitleaks-configuration-gitleakstoml","title":"Gitleaks Configuration (<code>.gitleaks.toml</code>)","text":"<p>Custom rules for secret detection:</p> <pre><code># MVP Zero Trust Auth - Secret Detection\ntitle = \"MVP Zero Trust Auth - Secret Detection\"\n\n[extend]\nuseDefault = true\n\n[[rules]]\ndescription = \"JWT Token\"\nid = \"jwt\"\nregex = '''ey[A-Za-z0-9_-]*\\.[A-Za-z0-9._-]*\\.[A-Za-z0-9._-]*'''\ntags = [\"key\", \"JWT\"]\n\n[allowlist]\ndescription = \"Allowlist for known safe patterns\"\nregexes = [\n    '''development-secret-do-not-use-in-production''',\n    '''demo-token-admin-123''',\n    '''mvp_password''',\n    '''mvp_user'''\n]\n</code></pre>"},{"location":"security/security-scanning-setup/#docker-security-dockerignore","title":"Docker Security (<code>.dockerignore</code>)","text":"<p>Prevents sensitive files from being included in Docker builds:</p> <pre><code># Security\n*.pem\n*.key\n*.crt\nsecrets/\n.env\n.env.*\n\n# Development\n.git/\n.github/\ndocs/\ntests/\n</code></pre>"},{"location":"security/security-scanning-setup/#security-scan-output","title":"Security Scan Output","text":""},{"location":"security/security-scanning-setup/#console-output-example","title":"Console Output Example","text":"<pre><code>\ud83d\udd12 Running comprehensive security scan...\n[INFO] Starting security scan for MVP Zero Trust Auth...\n[INFO] === Running Dependency Scan ===\n[INFO] Running govulncheck...\n[SUCCESS] govulncheck passed\n[INFO] Running staticcheck...\n[SUCCESS] staticcheck passed\n[INFO] === Running Secret Scan ===\n[INFO] Running gitleaks...\n[SUCCESS] No secrets detected\n[INFO] === Running Container Security Scan ===\n[INFO] Running hadolint on Dockerfile...\n[SUCCESS] Dockerfile linting passed\n[INFO] === Running SAST Scan ===\n[INFO] Running gosec...\n[SUCCESS] gosec scan passed\n[INFO] === Running License Check ===\n[INFO] Checking Go module licenses...\n[SUCCESS] License check passed\n[SUCCESS] Security report generated: security-report.md\n\n[SUCCESS] Security scan completed!\n\n=========================================\n           SECURITY SCAN SUMMARY         \n=========================================\nMode: Comprehensive Scan\nScans performed:\n  \u2713 Dependency vulnerability scan\n  \u2713 Secret detection\n  \u2713 Container security scan\n  \u2713 Static application security testing\n  \u2713 License compliance check\n=========================================\n\n[INFO] Review the security-report.md file for detailed results\n</code></pre>"},{"location":"security/security-scanning-setup/#security-report","title":"Security Report","text":"<p>A <code>security-report.md</code> file is generated with:</p> <ul> <li>Scan timestamp</li> <li>Summary of scans performed</li> <li>Recommendations for addressing findings</li> <li>Next steps for security improvement</li> </ul>"},{"location":"security/security-scanning-setup/#best-practices","title":"Best Practices","text":""},{"location":"security/security-scanning-setup/#running-security-scans","title":"Running Security Scans","text":"<ol> <li> <p>During Development <pre><code># Quick scan during active development\nmake security-scan-quick\n</code></pre></p> </li> <li> <p>Before Commits <pre><code># Comprehensive scan before pushing code\nmake security-scan\n</code></pre></p> </li> <li> <p>CI/CD Pipeline</p> </li> <li>Automatically runs on every push and PR</li> <li>Blocks merge if critical issues found</li> </ol>"},{"location":"security/security-scanning-setup/#tool-installation","title":"Tool Installation","text":"<p>Install all security tools locally:</p> <pre><code># One-time setup\nmake security-install\n\n# Verify installation\nwhich govulncheck gosec staticcheck go-licenses\n</code></pre>"},{"location":"security/security-scanning-setup/#handling-findings","title":"Handling Findings","text":"<ol> <li>Vulnerabilities: Update dependencies immediately</li> <li>Secrets: Rotate exposed credentials, update <code>.gitleaks.toml</code></li> <li>Code Issues: Fix security issues identified by SAST</li> <li>License Issues: Review and ensure compliance</li> </ol>"},{"location":"security/security-scanning-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"security/security-scanning-setup/#common-issues","title":"Common Issues","text":""},{"location":"security/security-scanning-setup/#security-script-not-found","title":"Security script not found","text":"<pre><code>\u274c Security scan script not found at scripts/security-scan.sh\n</code></pre> <p>Solution: Ensure you're in the project root directory</p>"},{"location":"security/security-scanning-setup/#tool-installation-failures","title":"Tool installation failures","text":"<pre><code>[WARNING] Some tools failed to install: gosec govulncheck\n</code></pre> <p>Solution:  1. Check Go installation: <code>go version</code> 2. Ensure <code>$GOPATH/bin</code> is in PATH 3. Install manually if needed</p>"},{"location":"security/security-scanning-setup/#permission-denied","title":"Permission denied","text":"<pre><code>permission denied: ./scripts/security-scan.sh\n</code></pre> <p>Solution: The Makefile automatically handles this, but you can manually run: <pre><code>chmod +x scripts/security-scan.sh\n</code></pre></p>"},{"location":"security/security-scanning-setup/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>Additional Scanners</li> <li>Integration with Snyk or Dependabot</li> <li>OWASP dependency check</li> <li> <p>Infrastructure as Code scanning</p> </li> <li> <p>Reporting Improvements</p> </li> <li>SARIF format support</li> <li>HTML report generation</li> <li> <p>Trend analysis over time</p> </li> <li> <p>Automation</p> </li> <li>Pre-commit hooks</li> <li>Automated fix suggestions</li> <li>Security baseline management</li> </ol>"},{"location":"security/security-scanning-setup/#references","title":"References","text":"<ul> <li>govulncheck Documentation</li> <li>Gosec - Go Security Checker</li> <li>Gitleaks Documentation</li> <li>Trivy Scanner</li> <li>Hadolint - Dockerfile Linter</li> </ul>"},{"location":"security/threat-model/","title":"Threat Model","text":"<p>This document is a placeholder for Threat Model. Information regarding threat modeling and analysis will be added here.</p> <p>This file was auto-generated as part of a documentation update initiative.</p>"},{"location":"security/playbooks/","title":"Security Playbooks","text":"<p>This document is a placeholder for Security Playbooks. Information regarding security incident response playbooks will be added here. This directory will contain detailed playbooks for various security scenarios.</p> <p>This file was auto-generated as part of a documentation update initiative.</p>"},{"location":"testing/e2e-testing-guide/","title":"E2E Testing Guide with Playwright","text":"<p>This guide covers how to run and manage End-to-End (E2E) tests using Playwright from the project root.</p>"},{"location":"testing/e2e-testing-guide/#quick-start","title":"Quick Start","text":""},{"location":"testing/e2e-testing-guide/#one-time-setup","title":"One-Time Setup","text":"<pre><code># Install frontend dependencies and Playwright\nmake frontend-install\n\n# Setup E2E test environment (starts backend services if needed)\nmake test-e2e-setup\n</code></pre>"},{"location":"testing/e2e-testing-guide/#running-e2e-tests","title":"Running E2E Tests","text":"<pre><code># Run all E2E tests (headless mode)\nmake test-e2e\n\n# Run tests with UI mode (interactive)\nmake test-e2e-ui\n\n# Run tests in headed mode (see browser)\nmake test-e2e-headed\n\n# Debug tests (step through)\nmake test-e2e-debug\n\n# Run tests on Chrome only\nmake test-e2e-chrome\n\n# Show test report\nmake test-e2e-report\n</code></pre>"},{"location":"testing/e2e-testing-guide/#available-makefile-targets","title":"Available Makefile Targets","text":"Target Description Use Case <code>test-e2e-setup</code> Setup E2E environment First-time setup or environment check <code>test-e2e</code> Run all E2E tests CI/CD or regular test runs <code>test-e2e-ui</code> Interactive UI mode Debugging and test development <code>test-e2e-debug</code> Debug mode Step through failing tests <code>test-e2e-headed</code> Headed browser mode Watch tests execute <code>test-e2e-chrome</code> Chrome only Quick single-browser testing <code>test-e2e-report</code> Show HTML report Review test results <code>test-e2e-codegen</code> Record new tests Generate test code <code>test-all</code> Run unit + E2E tests Complete test suite"},{"location":"testing/e2e-testing-guide/#test-recording","title":"Test Recording","text":"<p>Use Playwright's code generator to record new tests:</p> <pre><code># Start the test recorder\nmake test-e2e-codegen\n\n# This will:\n# 1. Open a browser window\n# 2. Navigate to http://localhost:5175\n# 3. Record your interactions\n# 4. Generate test code\n</code></pre>"},{"location":"testing/e2e-testing-guide/#prerequisites","title":"Prerequisites","text":"<p>The E2E tests require:</p> <ol> <li> <p>Backend Services: PostgreSQL, Redis, etc.    <pre><code>make dev-up  # Starts all backend services\n</code></pre></p> </li> <li> <p>Frontend Dev Server (optional for some tests):    <pre><code>make dev-frontend  # In a separate terminal\n</code></pre></p> </li> <li> <p>Playwright Browsers: Automatically installed on first run</p> </li> </ol>"},{"location":"testing/e2e-testing-guide/#test-environment","title":"Test Environment","text":""},{"location":"testing/e2e-testing-guide/#default-test-credentials","title":"Default Test Credentials","text":"<ul> <li>Username: <code>admin</code></li> <li>Password: <code>password</code></li> </ul>"},{"location":"testing/e2e-testing-guide/#service-urls","title":"Service URLs","text":"<ul> <li>Frontend: http://localhost:5175</li> <li>Backend API: http://localhost:8080</li> <li>Grafana: http://localhost:3000 (admin/admin)</li> <li>Jaeger: http://localhost:16686</li> </ul>"},{"location":"testing/e2e-testing-guide/#writing-e2e-tests","title":"Writing E2E Tests","text":""},{"location":"testing/e2e-testing-guide/#test-structure","title":"Test Structure","text":"<p>E2E tests are located in <code>frontend/tests/e2e/</code>:</p> <pre><code>frontend/tests/e2e/\n\u251c\u2500\u2500 auth.spec.ts          # Authentication flows\n\u251c\u2500\u2500 dashboard.spec.ts     # Dashboard functionality\n\u251c\u2500\u2500 devices.spec.ts       # Device management\n\u251c\u2500\u2500 admin.spec.ts         # Admin panel tests\n\u2514\u2500\u2500 fixtures/\n    \u251c\u2500\u2500 users.ts          # Test user data\n    \u2514\u2500\u2500 devices.ts        # Test device data\n</code></pre>"},{"location":"testing/e2e-testing-guide/#example-test","title":"Example Test","text":"<pre><code>// frontend/tests/e2e/auth.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest('should successfully login as admin user', async ({ page }) =&gt; {\n  // Navigate to login page\n  await page.goto('/login');\n\n  // Fill login form\n  await page.fill('input[name=\"username\"]', 'admin');\n  await page.fill('input[name=\"password\"]', 'password');\n\n  // Submit form\n  await page.click('button[type=\"submit\"]');\n\n  // Verify successful login\n  await expect(page).toHaveURL('/dashboard');\n  await expect(page.locator('text=Welcome')).toBeVisible();\n});\n</code></pre>"},{"location":"testing/e2e-testing-guide/#cicd-integration","title":"CI/CD Integration","text":"<p>E2E tests run automatically in CI/CD:</p> <pre><code># Example GitHub Actions usage\n- name: Setup E2E environment\n  run: make test-e2e-setup\n\n- name: Run E2E tests\n  run: make test-e2e\n</code></pre>"},{"location":"testing/e2e-testing-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"testing/e2e-testing-guide/#common-issues","title":"Common Issues","text":""},{"location":"testing/e2e-testing-guide/#1-backend-services-not-running","title":"1. Backend Services Not Running","text":"<pre><code># Error: Connection refused to localhost:8080\n\n# Solution:\nmake dev-up        # Start backend services\nmake test-e2e-setup  # Verify environment\n</code></pre>"},{"location":"testing/e2e-testing-guide/#2-playwright-browsers-not-installed","title":"2. Playwright Browsers Not Installed","text":"<pre><code># Error: Executable doesn't exist at...\n\n# Solution:\ncd frontend &amp;&amp; npx playwright install\n# Or simply run any test command - it auto-installs\n</code></pre>"},{"location":"testing/e2e-testing-guide/#3-port-conflicts","title":"3. Port Conflicts","text":"<pre><code># Error: Port 5175 already in use\n\n# Solution:\n# Kill the process using the port\nlsof -ti:5175 | xargs kill -9\n</code></pre>"},{"location":"testing/e2e-testing-guide/#4-test-timeouts","title":"4. Test Timeouts","text":"<pre><code># Increase timeout in playwright.config.ts\nuse: {\n  timeout: 60000,  // 60 seconds\n}\n</code></pre>"},{"location":"testing/e2e-testing-guide/#debug-mode","title":"Debug Mode","text":"<p>For failing tests, use debug mode:</p> <pre><code># Step through test execution\nmake test-e2e-debug\n\n# Or add breakpoint in test\ntest('my test', async ({ page }) =&gt; {\n  await page.pause();  // Debugger will pause here\n});\n</code></pre>"},{"location":"testing/e2e-testing-guide/#view-test-results","title":"View Test Results","text":"<p>After running tests:</p> <pre><code># Open HTML report\nmake test-e2e-report\n\n# Report includes:\n# - Test results summary\n# - Screenshots of failures\n# - Test execution timeline\n# - Detailed error traces\n</code></pre>"},{"location":"testing/e2e-testing-guide/#best-practices","title":"Best Practices","text":""},{"location":"testing/e2e-testing-guide/#1-test-independence","title":"1. Test Independence","text":"<p>Each test should be independent:</p> <pre><code>test.beforeEach(async ({ page }) =&gt; {\n  // Reset to clean state\n  await page.goto('/');\n  await page.evaluate(() =&gt; localStorage.clear());\n});\n</code></pre>"},{"location":"testing/e2e-testing-guide/#2-use-data-attributes","title":"2. Use Data Attributes","text":"<p>Add data attributes for reliable selectors:</p> <pre><code>&lt;button data-testid=\"submit-login\"&gt;Login&lt;/button&gt;\n</code></pre> <pre><code>await page.click('[data-testid=\"submit-login\"]');\n</code></pre>"},{"location":"testing/e2e-testing-guide/#3-wait-for-elements","title":"3. Wait for Elements","text":"<p>Use proper wait strategies:</p> <pre><code>// Good - waits for element\nawait page.waitForSelector('[data-testid=\"dashboard\"]');\n\n// Better - explicit expectation\nawait expect(page.locator('[data-testid=\"dashboard\"]')).toBeVisible();\n</code></pre>"},{"location":"testing/e2e-testing-guide/#4-parallel-execution","title":"4. Parallel Execution","text":"<p>Configure parallel execution in <code>playwright.config.ts</code>:</p> <pre><code>export default {\n  workers: process.env.CI ? 1 : undefined,  // Serial in CI, parallel locally\n  fullyParallel: true,\n};\n</code></pre>"},{"location":"testing/e2e-testing-guide/#advanced-usage","title":"Advanced Usage","text":""},{"location":"testing/e2e-testing-guide/#running-specific-tests","title":"Running Specific Tests","text":"<pre><code># Run tests matching pattern\ncd frontend &amp;&amp; npx playwright test auth\n\n# Run single test file\ncd frontend &amp;&amp; npx playwright test tests/e2e/auth.spec.ts\n\n# Run tests with specific tag\ncd frontend &amp;&amp; npx playwright test --grep @smoke\n</code></pre>"},{"location":"testing/e2e-testing-guide/#multiple-browsers","title":"Multiple Browsers","text":"<pre><code># Test on all browsers\nmake test-e2e\n\n# Test specific browser from frontend dir\ncd frontend &amp;&amp; npx playwright test --project=firefox\n</code></pre>"},{"location":"testing/e2e-testing-guide/#custom-environment-variables","title":"Custom Environment Variables","text":"<pre><code># Use different API URL\nAPI_URL=http://localhost:3001 make test-e2e\n\n# Use different base URL\nBASE_URL=http://staging.example.com make test-e2e\n</code></pre>"},{"location":"testing/e2e-testing-guide/#continuous-improvement","title":"Continuous Improvement","text":"<ol> <li>Add Visual Testing: Use Playwright's screenshot comparison</li> <li>Performance Testing: Measure page load times</li> <li>Accessibility Testing: Integrate axe-core</li> <li>Mobile Testing: Add mobile viewport tests</li> </ol>"},{"location":"testing/e2e-testing-guide/#summary","title":"Summary","text":"<p>The Playwright E2E testing setup provides:</p> <ul> <li>\u2705 Easy-to-use Makefile commands from project root</li> <li>\u2705 Automatic environment setup</li> <li>\u2705 Multiple testing modes (UI, debug, headed)</li> <li>\u2705 Test recording capabilities</li> <li>\u2705 Comprehensive test reporting</li> <li>\u2705 CI/CD ready configuration</li> </ul> <p>Run <code>make help</code> to see all available E2E testing commands.</p>"},{"location":"reference/tags/","title":"Documentation Tags","text":"<p>This page lists all tags used throughout the documentation to help you find related content.</p>"},{"location":"reference/tags/#available-tags","title":"Available Tags","text":""},{"location":"reference/tags/#tag-categories","title":"Tag Categories","text":""},{"location":"reference/tags/#by-technology","title":"By Technology","text":"<ul> <li><code>kubernetes</code> - Kubernetes deployment and configuration</li> <li><code>docker</code> - Docker containers and containerization</li> <li><code>istio</code> - Service mesh and traffic management</li> <li><code>prometheus</code> - Monitoring and metrics</li> <li><code>grafana</code> - Dashboards and visualization</li> <li><code>postgresql</code> - Database configuration and management</li> <li><code>redis</code> - Caching and session management</li> </ul>"},{"location":"reference/tags/#by-function","title":"By Function","text":"<ul> <li><code>authentication</code> - User authentication and authorization</li> <li><code>security</code> - Security policies and procedures</li> <li><code>api</code> - API documentation and usage</li> <li><code>deployment</code> - Deployment guides and procedures</li> <li><code>development</code> - Development setup and workflows</li> <li><code>testing</code> - Testing strategies and procedures</li> <li><code>troubleshooting</code> - Problem resolution and debugging</li> </ul>"},{"location":"reference/tags/#by-audience","title":"By Audience","text":"<ul> <li><code>developer</code> - For software developers</li> <li><code>operator</code> - For platform operators</li> <li><code>admin</code> - For system administrators</li> <li><code>security-team</code> - For security professionals</li> </ul>"},{"location":"reference/tags/#by-complexity","title":"By Complexity","text":"<ul> <li><code>beginner</code> - Basic concepts and getting started</li> <li><code>intermediate</code> - Moderate complexity topics</li> <li><code>advanced</code> - Advanced configuration and customization</li> <li><code>expert</code> - Expert-level topics and edge cases</li> </ul>"}]}