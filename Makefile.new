# MVP Zero Trust Auth System - Enhanced Makefile
# Organized for improved usability and Redis integration

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================
DB_HOST ?= localhost
DB_PORT ?= 5432
DB_NAME ?= mvp_db
DB_USER ?= mvp_user
DB_PASSWORD ?= mvp_password
NATS_URL ?= nats://localhost:4222
REDIS_HOST ?= localhost
REDIS_PORT ?= 6379
REDIS_URL ?= redis://$(REDIS_HOST):$(REDIS_PORT)
COMPOSE_FILE ?= docker-compose.yml
ENV_FILE ?= .env

# =============================================================================
# PHONY TARGETS
# =============================================================================
.PHONY: help help-dev help-services help-test help-monitor help-quality \
        dev-setup dev-up dev-down dev-logs dev-clean dev-status dev-urls \
        services-up services-down services-status services-logs \
        redis-up redis-down redis-cli redis-monitor redis-stats redis-flush redis-health \
        db-up db-down db-migrate db-seed db-backup db-restore db-health db-stats \
        nats-up nats-down nats-monitor nats-health \
        prometheus-up grafana-up jaeger-up \
        app-build app-run app-test app-clean \
        test-unit test-integration test-e2e test-load test-all test-coverage \
        quality-check lint fmt security-scan check-deps \
        monitor-up monitor-down monitor-dashboards monitor-health \
        health-all health-detailed status info urls ports clean

# =============================================================================
# HELP SYSTEM
# =============================================================================
help: ## Show main help with command categories
	@echo "üöÄ MVP Zero Trust Auth System - Development Commands"
	@echo ""
	@echo "üìã Command Categories:"
	@echo "  help-dev       Development workflow commands"
	@echo "  help-services  Infrastructure service management"
	@echo "  help-test      Testing and quality assurance"
	@echo "  help-monitor   Monitoring and observability"
	@echo "  help-quality   Code quality and security"
	@echo ""
	@echo "üîó Quick Start:"
	@echo "  make dev-setup  # Initial environment setup"
	@echo "  make dev-up     # Start development environment"
	@echo "  make dev-status # Check service status"
	@echo ""
	@echo "üìä Current Environment:"
	@echo "  Database: $(DB_HOST):$(DB_PORT)/$(DB_NAME)"
	@echo "  Redis:    $(REDIS_HOST):$(REDIS_PORT)"
	@echo "  NATS:     $(NATS_URL)"
	@echo ""
	@echo "üí° Use 'make help-<category>' for detailed commands"

help-dev: ## Development workflow commands
	@echo "üõ†Ô∏è  Development Commands:"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / && $$0 ~ /dev-/ {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / && $$0 ~ /app-/ {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

help-services: ## Infrastructure service management commands
	@echo "‚öôÔ∏è  Service Management Commands:"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / && ($$0 ~ /services-/ || $$0 ~ /redis-/ || $$0 ~ /db-/ || $$0 ~ /nats-/) {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

help-test: ## Testing and quality commands
	@echo "üß™ Testing Commands:"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / && $$0 ~ /test-/ {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

help-monitor: ## Monitoring and observability commands
	@echo "üìä Monitoring Commands:"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / && ($$0 ~ /monitor-/ || $$0 ~ /health-/) {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

help-quality: ## Code quality and security commands
	@echo "üîç Quality & Security Commands:"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / && ($$0 ~ /quality-/ || $$0 ~ /lint/ || $$0 ~ /security-/ || $$0 ~ /fmt/) {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# =============================================================================
# DEVELOPMENT ENVIRONMENT
# =============================================================================
dev-setup: ## Set up complete development environment
	@echo "üîß Setting up development environment..."
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "üìù Creating .env file from example..."; \
		cp .env.example $(ENV_FILE) || echo "‚ö†Ô∏è  No .env.example found"; \
	fi
	@./scripts/setup-dev.sh || (echo "‚ùå Development setup failed" && exit 1)
	@echo "‚úÖ Development environment setup complete"

dev-up: ## Start complete development environment
	@echo "üöÄ Starting development environment..."
	@docker-compose -f $(COMPOSE_FILE) --env-file $(ENV_FILE) up -d || (echo "‚ùå Failed to start services" && exit 1)
	@echo "‚úÖ Development environment started"
	@$(MAKE) dev-urls

dev-down: ## Stop development environment
	@echo "üõë Stopping development environment..."
	@docker-compose -f $(COMPOSE_FILE) down -v
	@echo "‚úÖ Development environment stopped"

dev-logs: ## Show logs from all development services
	@docker-compose -f $(COMPOSE_FILE) logs -f

dev-clean: ## Clean development environment completely
	@echo "üßπ Cleaning development environment..."
	@docker-compose -f $(COMPOSE_FILE) down -v --remove-orphans
	@docker system prune -f
	@docker volume prune -f
	@echo "‚úÖ Development environment cleaned"

dev-status: ## Show status of all development services
	@echo "üìä Development Environment Status:"
	@echo ""
	@docker-compose -f $(COMPOSE_FILE) ps --format "table {{.Name}}\t{{.State}}\t{{.Status}}\t{{.Ports}}"

dev-urls: ## Show all service URLs
	@echo "üîó Service URLs:"
	@echo "  Application:     http://localhost:8080"
	@echo "  Frontend:        http://localhost:5173"
	@echo "  Grafana:         http://localhost:3000 (admin/admin)"
	@echo "  Prometheus:      http://localhost:9090"
	@echo "  Jaeger:          http://localhost:16686"
	@echo "  Envoy Admin:     http://localhost:9901"
	@echo "  NATS Monitor:    http://localhost:8222"

# =============================================================================
# SERVICE MANAGEMENT
# =============================================================================
services-up: ## Start infrastructure services only
	@echo "üöÄ Starting infrastructure services..."
	@docker-compose -f $(COMPOSE_FILE) up -d postgres redis nats prometheus grafana jaeger
	@echo "‚úÖ Infrastructure services started"

services-down: ## Stop infrastructure services
	@echo "üõë Stopping infrastructure services..."
	@docker-compose -f $(COMPOSE_FILE) stop postgres redis nats prometheus grafana jaeger
	@echo "‚úÖ Infrastructure services stopped"

services-status: ## Show status of infrastructure services
	@echo "üìä Infrastructure Services Status:"
	@docker-compose -f $(COMPOSE_FILE) ps postgres redis nats prometheus grafana jaeger

services-logs: ## Show logs from infrastructure services
	@docker-compose -f $(COMPOSE_FILE) logs -f postgres redis nats prometheus grafana jaeger

# =============================================================================
# REDIS MANAGEMENT
# =============================================================================
redis-up: ## Start Redis service only
	@echo "üöÄ Starting Redis..."
	@docker-compose -f $(COMPOSE_FILE) up -d redis
	@echo "‚úÖ Redis started"

redis-down: ## Stop Redis service
	@echo "üõë Stopping Redis..."
	@docker-compose -f $(COMPOSE_FILE) stop redis
	@echo "‚úÖ Redis stopped"

redis-cli: ## Connect to Redis CLI
	@echo "üíª Connecting to Redis CLI..."
	@docker-compose -f $(COMPOSE_FILE) exec redis redis-cli

redis-monitor: ## Monitor Redis operations in real-time
	@echo "üìä Monitoring Redis operations..."
	@docker-compose -f $(COMPOSE_FILE) exec redis redis-cli MONITOR

redis-stats: ## Show Redis statistics and info
	@echo "üìä Redis Statistics:"
	@echo ""
	@echo "=== Server Info ==="
	@docker-compose -f $(COMPOSE_FILE) exec redis redis-cli INFO server | grep -E "(redis_version|os|arch|uptime)"
	@echo ""
	@echo "=== Memory Usage ==="
	@docker-compose -f $(COMPOSE_FILE) exec redis redis-cli INFO memory | grep -E "(used_memory_human|maxmemory_human|mem_fragmentation_ratio)"
	@echo ""
	@echo "=== Clients ==="
	@docker-compose -f $(COMPOSE_FILE) exec redis redis-cli INFO clients
	@echo ""
	@echo "=== Stats ==="
	@docker-compose -f $(COMPOSE_FILE) exec redis redis-cli INFO stats | grep -E "(total_commands_processed|total_connections_received|keyspace_hits|keyspace_misses)"
	@echo ""
	@echo "=== Keyspace ==="
	@docker-compose -f $(COMPOSE_FILE) exec redis redis-cli INFO keyspace

redis-flush: ## Flush all Redis data (WARNING: destructive)
	@echo "‚ö†Ô∏è  This will remove ALL data from Redis!"
	@read -p "Are you sure? [y/N] " -n 1 -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		echo ""; \
		docker-compose -f $(COMPOSE_FILE) exec redis redis-cli FLUSHALL; \
		echo "‚úÖ Redis data flushed"; \
	else \
		echo ""; \
		echo "‚ùå Operation cancelled"; \
	fi

redis-health: ## Check Redis health
	@echo "üè• Checking Redis health..."
	@if docker-compose -f $(COMPOSE_FILE) exec redis redis-cli ping > /dev/null 2>&1; then \
		echo "‚úÖ Redis is healthy"; \
		$(MAKE) redis-stats; \
	else \
		echo "‚ùå Redis is not responding"; \
		exit 1; \
	fi

# =============================================================================
# DATABASE MANAGEMENT
# =============================================================================
db-up: ## Start PostgreSQL service only
	@echo "üöÄ Starting PostgreSQL..."
	@docker-compose -f $(COMPOSE_FILE) up -d postgres
	@echo "‚úÖ PostgreSQL started"

db-down: ## Stop PostgreSQL service
	@echo "üõë Stopping PostgreSQL..."
	@docker-compose -f $(COMPOSE_FILE) stop postgres
	@echo "‚úÖ PostgreSQL stopped"

db-migrate: ## Run database migrations
	@echo "üìä Running database migrations..."
	@if [ -f scripts/sql/init/migrations.sql ]; then \
		docker-compose -f $(COMPOSE_FILE) exec -T postgres psql -U $(DB_USER) -d $(DB_NAME) -f /docker-entrypoint-initdb.d/migrations.sql; \
	else \
		echo "‚ö†Ô∏è  No migrations.sql found, skipping database migrations"; \
	fi
	@echo "‚úÖ Database migrations completed"

db-health: ## Check database health
	@echo "üè• Checking database health..."
	@if docker-compose -f $(COMPOSE_FILE) exec postgres pg_isready -U $(DB_USER) > /dev/null 2>&1; then \
		echo "‚úÖ Database is healthy"; \
	else \
		echo "‚ùå Database is not responding"; \
		exit 1; \
	fi

db-stats: ## Show database statistics
	@echo "üìä Database Statistics:"
	@docker-compose -f $(COMPOSE_FILE) exec postgres psql -U $(DB_USER) -d $(DB_NAME) -c "\
		SELECT schemaname,tablename,n_tup_ins as inserts,n_tup_upd as updates,n_tup_del as deletes \
		FROM pg_stat_user_tables ORDER BY schemaname,tablename;"

# =============================================================================
# NATS MANAGEMENT  
# =============================================================================
nats-up: ## Start NATS service only
	@echo "üöÄ Starting NATS..."
	@docker-compose -f $(COMPOSE_FILE) up -d nats
	@echo "‚úÖ NATS started"

nats-down: ## Stop NATS service
	@echo "üõë Stopping NATS..."
	@docker-compose -f $(COMPOSE_FILE) stop nats
	@echo "‚úÖ NATS stopped"

nats-monitor: ## Show NATS monitoring dashboard
	@echo "üìä NATS Monitor: http://localhost:8222"
	@command -v open >/dev/null 2>&1 && open http://localhost:8222 || echo "Open http://localhost:8222 in your browser"

nats-health: ## Check NATS health
	@echo "üè• Checking NATS health..."
	@if curl -s http://localhost:8222/healthz > /dev/null 2>&1; then \
		echo "‚úÖ NATS is healthy"; \
	else \
		echo "‚ùå NATS is not responding"; \
		exit 1; \
	fi

# =============================================================================
# MONITORING SERVICES
# =============================================================================
prometheus-up: ## Start Prometheus only
	@echo "üöÄ Starting Prometheus..."
	@docker-compose -f $(COMPOSE_FILE) up -d prometheus
	@echo "‚úÖ Prometheus started at http://localhost:9090"

grafana-up: ## Start Grafana only
	@echo "üöÄ Starting Grafana..."
	@docker-compose -f $(COMPOSE_FILE) up -d grafana
	@echo "‚úÖ Grafana started at http://localhost:3000 (admin/admin)"

jaeger-up: ## Start Jaeger only
	@echo "üöÄ Starting Jaeger..."
	@docker-compose -f $(COMPOSE_FILE) up -d jaeger
	@echo "‚úÖ Jaeger started at http://localhost:16686"

monitor-up: ## Start complete monitoring stack
	@echo "üöÄ Starting monitoring stack..."
	@docker-compose -f $(COMPOSE_FILE) up -d prometheus grafana jaeger loki promtail
	@echo "‚úÖ Monitoring stack started"
	@echo "üîó Monitoring URLs:"
	@echo "  Prometheus: http://localhost:9090"
	@echo "  Grafana:    http://localhost:3000 (admin/admin)"
	@echo "  Jaeger:     http://localhost:16686"

monitor-down: ## Stop monitoring stack
	@echo "üõë Stopping monitoring stack..."
	@docker-compose -f $(COMPOSE_FILE) stop prometheus grafana jaeger loki promtail
	@echo "‚úÖ Monitoring stack stopped"

monitor-dashboards: ## Setup monitoring dashboards
	@echo "üìä Setting up monitoring dashboards..."
	@./scripts/setup-monitoring.sh || (echo "‚ùå Dashboard setup failed" && exit 1)
	@echo "‚úÖ Monitoring dashboards configured"

# =============================================================================
# APPLICATION MANAGEMENT
# =============================================================================
app-build: ## Build application
	@echo "üî® Building application..."
	@./scripts/build.sh || (echo "‚ùå Build failed" && exit 1)
	@echo "‚úÖ Application build completed"

app-run: app-build ## Build and run application
	@echo "üöÄ Starting application..."
	@./bin/server

app-test: ## Run application tests
	@echo "üß™ Running application tests..."
	@go test -race -v ./...
	@echo "‚úÖ Application tests completed"

app-clean: ## Clean application build artifacts
	@echo "üßπ Cleaning application artifacts..."
	@rm -rf bin/ coverage.out coverage.html
	@echo "‚úÖ Application artifacts cleaned"

# =============================================================================
# TESTING
# =============================================================================
test-unit: ## Run unit tests
	@echo "üß™ Running unit tests..."
	@go test -race -v ./...
	@echo "‚úÖ Unit tests completed"

test-integration: ## Run integration tests (requires services)
	@echo "üß™ Running integration tests..."
	@echo "üìù Ensuring test infrastructure is running..."
	@$(MAKE) services-up
	@sleep 5
	@go test -v ./tests/integration/... --timeout=60s || (echo "‚ùå Integration tests failed" && exit 1)
	@echo "‚úÖ Integration tests completed"

test-e2e: ## Run end-to-end tests
	@echo "üé≠ Running E2E tests..."
	@cd frontend && npm ci && npx playwright test
	@echo "‚úÖ E2E tests completed"

test-load: ## Run load tests
	@echo "üß™ Running load tests..."
	@docker run --rm -i --network host loadimpact/k6 run - < tests/load/basic-load-test.js
	@echo "‚úÖ Load tests completed"

test-coverage: ## Run tests with coverage
	@echo "üß™ Running tests with coverage..."
	@go test -race -coverprofile=coverage.out -covermode=atomic ./...
	@go tool cover -html=coverage.out -o coverage.html
	@echo "‚úÖ Coverage report: coverage.html"

test-all: test-unit test-integration test-e2e ## Run all tests
	@echo "‚úÖ All tests completed successfully!"

# =============================================================================
# HEALTH CHECKS
# =============================================================================
health-all: ## Check health of all services
	@echo "üè• Checking health of all services..."
	@echo ""
	@$(MAKE) redis-health || true
	@echo ""
	@$(MAKE) db-health || true
	@echo ""
	@$(MAKE) nats-health || true
	@echo ""
	@echo "üè• Health check completed"

health-detailed: ## Detailed health check with metrics
	@echo "üè• Detailed Health Check Report"
	@echo "================================"
	@echo ""
	@echo "üî¥ Redis:"
	@$(MAKE) redis-health || true
	@echo ""
	@echo "üîµ Database:"
	@$(MAKE) db-health || true
	@echo ""
	@echo "üü¢ NATS:"
	@$(MAKE) nats-health || true
	@echo ""
	@echo "üìä Service Status:"
	@$(MAKE) services-status

# =============================================================================
# QUALITY & SECURITY
# =============================================================================
quality-check: ## Run all quality checks
	@echo "üîç Running quality checks..."
	@$(MAKE) fmt
	@$(MAKE) lint
	@$(MAKE) test-coverage
	@$(MAKE) security-scan
	@echo "‚úÖ Quality checks completed"

lint: ## Run code linter
	@echo "üîç Running linter..."
	@command -v golangci-lint >/dev/null 2>&1 || (echo "‚ùå golangci-lint not installed" && exit 1)
	@golangci-lint run
	@echo "‚úÖ Linting completed"

fmt: ## Format code
	@echo "üé® Formatting code..."
	@go fmt ./...
	@go mod tidy
	@echo "‚úÖ Code formatting completed"

security-scan: ## Run security scan
	@echo "üîí Running security scan..."
	@./scripts/security-scan.sh || (echo "‚ùå Security scan failed" && exit 1)
	@echo "‚úÖ Security scan completed"

check-deps: ## Check for dependency vulnerabilities
	@echo "üîç Checking dependencies..."
	@command -v govulncheck >/dev/null 2>&1 || go install golang.org/x/vuln/cmd/govulncheck@latest
	@govulncheck ./...
	@echo "‚úÖ Dependency check completed"

# =============================================================================
# UTILITY COMMANDS
# =============================================================================
status: ## Show comprehensive system status
	@echo "üìä System Status Overview"
	@echo "========================="
	@echo ""
	@$(MAKE) dev-status
	@echo ""
	@$(MAKE) health-all

info: ## Show environment information
	@echo "‚ÑπÔ∏è  Environment Information"
	@echo "=========================="
	@echo "Database: $(DB_HOST):$(DB_PORT)/$(DB_NAME)"
	@echo "Redis:    $(REDIS_HOST):$(REDIS_PORT)"
	@echo "NATS:     $(NATS_URL)"
	@echo "Environment File: $(ENV_FILE)"
	@echo "Compose File: $(COMPOSE_FILE)"

urls: dev-urls ## Show all service URLs (alias)

ports: ## Show all exposed ports
	@echo "üîå Exposed Ports:"
	@echo "  8080  - Application (HTTP)"
	@echo "  8443  - Application (HTTPS)"
	@echo "  5173  - Frontend Dev Server"
	@echo "  3000  - Grafana"
	@echo "  9090  - Prometheus"
	@echo "  16686 - Jaeger UI"
	@echo "  9901  - Envoy Admin"
	@echo "  5432  - PostgreSQL"
	@echo "  6379  - Redis"
	@echo "  4222  - NATS"
	@echo "  8222  - NATS Monitor"

clean: dev-clean app-clean ## Clean all artifacts and containers

# =============================================================================
# SHORTCUTS & ALIASES
# =============================================================================
# Common shortcuts for frequently used commands
up: dev-up
down: dev-down
logs: dev-logs
build: app-build
run: app-run
test: test-unit