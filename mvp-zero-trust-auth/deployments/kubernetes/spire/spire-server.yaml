apiVersion: v1
kind: Namespace
metadata:
  name: spire-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spire-server
  namespace: spire-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: spire-server-role
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["validatingadmissionwebhooks", "mutatingadmissionwebhooks"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: spire-server-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spire-server-role
subjects:
- kind: ServiceAccount
  name: spire-server
  namespace: spire-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-server
  namespace: spire-system
data:
  server.conf: |
    server {
        bind_address = "0.0.0.0"
        bind_port = "8081"
        trust_domain = "mvp.local"
        data_dir = "/opt/spire/data"
        log_level = "INFO"
        log_format = "json"

        ca_subject = {
            country = ["US"]
            organization = ["MVP Zero Trust"]
            common_name = "MVP CA"
        }

        # Certificate TTL for demo purposes (15 minutes)
        ca_ttl = "24h"
        default_svid_ttl = "15m"
    }

    plugins {
        DataStore "sql" {
            plugin_data {
                database_type = "postgres"
                connection_string = "postgres://spire:spire@postgres:5432/spire?sslmode=disable"
            }
        }

        NodeAttestor "k8s_sat" {
            plugin_data {
                clusters = {
                    "mvp-cluster" = {
                        service_account_allow_list = ["spire-system:spire-agent"]
                        audience = ["spire-server"]
                    }
                }
            }
        }

        NodeAttestor "docker" {
            plugin_data {
                # Allow all containers for development
                # In production, this should be more restrictive
            }
        }

        KeyManager "memory" {
            plugin_data = {}
        }

        Notifier "k8sbundle" {
            plugin_data {
                # Webhook URL for bundle updates
                webhook_url = "http://envoy:9901/clusters"
            }
        }

        UpstreamAuthority "disk" {
            plugin_data {
                key_file_path = "/opt/spire/conf/server/ca.key"
                cert_file_path = "/opt/spire/conf/server/ca.crt"
            }
        }
    }

    health_checks {
        listener_enabled = true
        bind_address = "0.0.0.0"
        bind_port = "8080"
        live_path = "/live"
        ready_path = "/ready"
    }

    telemetry {
        Prometheus {
            port = 9988
        }
    }
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: spire-server
  namespace: spire-system
  labels:
    app: spire-server
spec:
  serviceName: spire-server
  replicas: 1
  selector:
    matchLabels:
      app: spire-server
  template:
    metadata:
      labels:
        app: spire-server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9988"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: spire-server
      containers:
      - name: spire-server
        image: ghcr.io/spiffe/spire-server:1.8.5
        args:
          - -config
          - /run/spire/config/server.conf
        ports:
        - containerPort: 8081
          name: grpc
        - containerPort: 8080
          name: health
        - containerPort: 9988
          name: metrics
        volumeMounts:
        - name: spire-config
          mountPath: /run/spire/config
          readOnly: true
        - name: spire-data
          mountPath: /run/spire/data
        - name: spire-server-socket
          mountPath: /tmp/spire-server/private
        livenessProbe:
          httpGet:
            path: /live
            port: 8080
          failureThreshold: 2
          initialDelaySeconds: 15
          periodSeconds: 60
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: spire-config
        configMap:
          name: spire-server
      - name: spire-server-socket
        hostPath:
          path: /run/spire/sockets
          type: DirectoryOrCreate
  volumeClaimTemplates:
  - metadata:
      name: spire-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: spire-server
  namespace: spire-system
  labels:
    app: spire-server
spec:
  type: ClusterIP
  ports:
    - name: grpc
      port: 8081
      targetPort: 8081
      protocol: TCP
    - name: health
      port: 8080
      targetPort: 8080
      protocol: TCP
    - name: metrics
      port: 9988
      targetPort: 9988
      protocol: TCP
  selector:
    app: spire-server
