# =============================================================================
# MVP Zero Trust Auth System - User-Friendly Makefile
# =============================================================================
# Organized by common usage patterns and user workflows
# =============================================================================

SHELL := /bin/bash
.DEFAULT_GOAL := help
MAKEFLAGS += --warn-undefined-variables
MAKEFLAGS += --no-builtin-rules

# Load environment variables from .env file if it exists
ifneq (,$(wildcard ./.env))
    include .env
    export
endif

# Project Configuration
PROJECT_NAME := mvp-zero-trust-auth
VERSION := $(shell git describe --tags --always --dirty 2>/dev/null || echo "dev")
BUILD_DATE := $(shell date -u +'%Y-%m-%dT%H:%M:%SZ')
GIT_COMMIT := $(shell git rev-parse --short HEAD 2>/dev/null || echo "unknown")

# Environment Variables with Defaults
DB_HOST ?= localhost
DB_PORT ?= 5432
DB_NAME ?= mvp_db
DB_USER ?= mvp_user
DB_PASSWORD ?= mvp_password
NATS_URL ?= nats://localhost:4222
REDIS_URL ?= redis://localhost:6379
FRONTEND_DIR := frontend
BUILD_OUTPUT_DIR := bin
COVERAGE_THRESHOLD := 80

# GitHub Configuration (from .env)
GITHUB_TOKEN ?= 
GITHUB_OWNER ?= lsendel
GITHUB_REPO ?= root-zamaz
GITHUB_WIKI_URL := https://github.com/$(GITHUB_OWNER)/$(GITHUB_REPO)/wiki

# Documentation Configuration
DOCS_PORT ?= 8001
DOCS_HOST ?= 127.0.0.1
WIKI_SYNC_ENABLED ?= true
WIKI_BRANCH ?= main
WIKI_SUBDIRECTORY ?= Documentation

# Colors
BLUE := \033[34m
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
RESET := \033[0m
BOLD := \033[1m

# =============================================================================
# üöÄ QUICK START COMMANDS (Most Common)
# =============================================================================

.PHONY: help start stop status dev test build clean

help: ## üìñ Show this help (most common commands at top)
	@printf "\n$(BOLD)$(BLUE)MVP Zero Trust Auth System$(RESET)\n"
	@printf "$(BLUE)================================$(RESET)\n\n"
	@printf "$(BOLD)üîß FIRST TIME SETUP:$(RESET)\n"
	@printf "  $(GREEN)make env-setup$(RESET)   üîß Setup environment configuration (.env)\n"
	@printf "  $(GREEN)make env-check$(RESET)   üîç Check environment configuration\n\n"
	@printf "$(BOLD)üöÄ QUICK START:$(RESET)\n"
	@printf "  $(GREEN)make start$(RESET)       üöÄ Start the full development environment\n"
	@printf "  $(GREEN)make dev$(RESET)         üíª Start development server with hot reload\n"
	@printf "  $(GREEN)make test$(RESET)        üß™ Run all tests\n"
	@printf "  $(GREEN)make build$(RESET)       üî® Build the application\n"
	@printf "  $(GREEN)make stop$(RESET)        üõë Stop all services\n"
	@printf "  $(GREEN)make clean$(RESET)       üßπ Clean all artifacts\n"
	@printf "  $(GREEN)make status$(RESET)      üìä Show system status\n\n"
	@printf "$(BOLD)üìö DETAILED HELP:$(RESET)\n"
	@printf "  $(BLUE)make dev-help$(RESET)        Development workflow commands\n"
	@printf "  $(BLUE)make test-help$(RESET)       Testing and quality commands\n"
	@printf "  $(BLUE)make docs-help$(RESET)       Documentation commands\n"
	@printf "  $(BLUE)make docker-help$(RESET)     Docker and deployment commands\n"
	@printf "  $(BLUE)make db-help$(RESET)         Database management commands\n"
	@printf "  $(BLUE)make matrix-help$(RESET)     Matrix testing across versions\n"
	@printf "  $(BLUE)make show-env$(RESET)        Show current environment config\n"
	@printf "  $(BLUE)make all-targets$(RESET)     Show ALL available targets\n\n"

start: dev-up ## üöÄ Start the full development environment
	@printf "$(GREEN)üöÄ Development environment started!$(RESET)\n"
	@printf "$(BLUE)üìç Frontend: http://localhost:5173$(RESET)\n"
	@printf "$(BLUE)üìç Backend API: http://localhost:8080$(RESET)\n"

stop: dev-down ## üõë Stop all services

status: dev-status ## üìä Show system status

dev: dev-frontend ## üíª Start development with hot reload

test: test-all ## üß™ Run all tests

build: build-all ## üî® Build the application

clean: clean-all ## üßπ Clean all artifacts

# =============================================================================
# üíª DEVELOPMENT WORKFLOW
# =============================================================================

.PHONY: dev-help dev-setup dev-up dev-down dev-frontend dev-status dev-logs

dev-help: ## üíª Show development workflow help
	@printf "\n$(BOLD)$(BLUE)Development Workflow$(RESET)\n"
	@printf "$(BLUE)=====================$(RESET)\n\n"
	@printf "$(BOLD)Setup & Environment:$(RESET)\n"
	@printf "  $(GREEN)make dev-setup$(RESET)    üì¶ Install all dependencies\n"
	@printf "  $(GREEN)make dev-up$(RESET)       üöÄ Start all services (Docker)\n"
	@printf "  $(GREEN)make dev-down$(RESET)     üõë Stop all services\n"
	@printf "  $(GREEN)make dev-status$(RESET)   üìä Check service status\n"
	@printf "  $(GREEN)make dev-logs$(RESET)     üìú View service logs\n\n"
	@printf "$(BOLD)Development Server:$(RESET)\n"
	@printf "  $(GREEN)make dev-frontend$(RESET) üíª Start frontend dev server\n"
	@printf "  $(GREEN)make dev-backend$(RESET)  üîß Start backend dev server\n\n"

dev-setup: ## üì¶ Install all dependencies
	@printf "$(BLUE)üì¶ Setting up development environment...$(RESET)\n"
	@npm install
	@cd $(FRONTEND_DIR) && npm install
	@printf "$(GREEN)‚úÖ Development environment ready$(RESET)\n"

dev-up: ## üöÄ Start all services with Docker Compose
	@printf "$(BLUE)üöÄ Starting development services...$(RESET)\n"
	@docker-compose up -d
	@printf "$(GREEN)‚úÖ Services started$(RESET)\n"

dev-down: ## üõë Stop all services
	@printf "$(BLUE)üõë Stopping services...$(RESET)\n"
	@docker-compose down
	@printf "$(GREEN)‚úÖ Services stopped$(RESET)\n"

dev-frontend: ## üíª Start frontend development server
	@printf "$(BLUE)üíª Starting frontend development server...$(RESET)\n"
	@cd $(FRONTEND_DIR) && npm run dev

dev-backend: ## üîß Start backend development server
	@printf "$(BLUE)üîß Starting backend development server...$(RESET)\n"
	@go run cmd/server/main.go

dev-status: ## üìä Show development environment status
	@printf "$(BLUE)üìä Development Environment Status$(RESET)\n"
	@printf "$(BLUE)===================================$(RESET)\n"
	@printf "Docker Services:\n"
	@docker-compose ps
	@printf "\nSystem Info:\n"
	@printf "Node Version: $$(node --version 2>/dev/null || echo 'Not installed')\n"
	@printf "Go Version: $$(go version 2>/dev/null | cut -d' ' -f3 || echo 'Not installed')\n"

dev-logs: ## üìú View service logs
	@docker-compose logs -f

# =============================================================================
# üß™ TESTING & QUALITY
# =============================================================================

.PHONY: test-help test-all test-unit test-integration test-e2e test-coverage lint lint-fix

test-help: ## üß™ Show testing and quality help
	@printf "\n$(BOLD)$(BLUE)Testing & Quality$(RESET)\n"
	@printf "$(BLUE)==================$(RESET)\n\n"
	@printf "$(BOLD)Testing:$(RESET)\n"
	@printf "  $(GREEN)make test-all$(RESET)         üß™ Run all tests\n"
	@printf "  $(GREEN)make test-unit$(RESET)        üî¨ Run unit tests only\n"
	@printf "  $(GREEN)make test-integration$(RESET) üîó Run integration tests\n"
	@printf "  $(GREEN)make test-e2e$(RESET)         üé≠ Run end-to-end tests\n"
	@printf "  $(GREEN)make test-coverage$(RESET)    üìä Generate coverage report\n"
	@printf "  $(GREEN)make test-watch$(RESET)       üëÄ Run tests in watch mode\n\n"
	@printf "$(BOLD)Quality:$(RESET)\n"
	@printf "  $(GREEN)make lint$(RESET)             üîç Run linting\n"
	@printf "  $(GREEN)make lint-fix$(RESET)         üîß Fix linting issues\n"
	@printf "  $(GREEN)make type-check$(RESET)       üè∑Ô∏è  Run type checking\n"
	@printf "  $(GREEN)make security-audit$(RESET)   üîí Security audit\n\n"

test-all: ## üß™ Run all tests
	@printf "$(BLUE)üß™ Running all tests...$(RESET)\n"
	@npm run test:all

test-unit: ## üî¨ Run unit tests only
	@printf "$(BLUE)üî¨ Running unit tests...$(RESET)\n"
	@npm run test

test-integration: ## üîó Run integration tests
	@printf "$(BLUE)üîó Running integration tests...$(RESET)\n"
	@npm run test:integration

test-e2e: ## üé≠ Run end-to-end tests
	@printf "$(BLUE)üé≠ Running E2E tests...$(RESET)\n"
	@npm run test:e2e

test-coverage: ## üìä Generate test coverage report
	@printf "$(BLUE)üìä Generating coverage report...$(RESET)\n"
	@npm run test:coverage

test-watch: ## üëÄ Run tests in watch mode
	@printf "$(BLUE)üëÄ Running tests in watch mode...$(RESET)\n"
	@cd $(FRONTEND_DIR) && npm run test:watch

test-wiki: ## üìö Test wiki integration
	@printf "$(BLUE)üìö Testing wiki integration...$(RESET)\n"
	@./scripts/test-wiki-integration.sh

# =============================================================================
# üîç CODE QUALITY & LINTING (2025 Best Practices)
# =============================================================================

.PHONY: lint lint-fix lint-go lint-frontend lint-python lint-go-fix lint-frontend-fix lint-python-fix
.PHONY: format format-check format-go format-frontend format-python security-scan type-check
.PHONY: quality-check quality-fix pre-commit-install pre-commit-run quality-ci install-tools

lint: ## üîç Run all linting (Go, JS/TS, Python)
	@printf "$(GREEN)üîç Running comprehensive linting...$(RESET)\n"
	@$(MAKE) lint-go
	@$(MAKE) lint-frontend
	@$(MAKE) lint-python
	@printf "$(GREEN)‚úÖ All linting completed$(RESET)\n"

lint-fix: ## üîß Fix all linting issues (Go, JS/TS, Python)
	@printf "$(GREEN)üîß Auto-fixing linting issues...$(RESET)\n"
	@$(MAKE) lint-go-fix
	@$(MAKE) lint-frontend-fix
	@$(MAKE) lint-python-fix
	@printf "$(GREEN)‚úÖ All auto-fixes completed$(RESET)\n"

# Go linting with golangci-lint
lint-go: ## üîç Run Go linting
	@printf "$(BLUE)üîç Running Go linting...$(RESET)\n"
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run --config .golangci.yml; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  golangci-lint not installed. Installing...$(RESET)\n"; \
		go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.61.0; \
		golangci-lint run --config .golangci.yml; \
	fi

lint-go-fix: ## üîß Fix Go linting issues
	@printf "$(BLUE)üîß Fixing Go linting issues...$(RESET)\n"
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run --config .golangci.yml --fix; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  golangci-lint not installed. Installing...$(RESET)\n"; \
		go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.61.0; \
		golangci-lint run --config .golangci.yml --fix; \
	fi

# Frontend linting with Biome
lint-frontend: ## üîç Run frontend linting (JS/TS)
	@printf "$(BLUE)üîç Running frontend linting...$(RESET)\n"
	@if command -v biome >/dev/null 2>&1; then \
		biome check frontend/src; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  Biome not installed. Using npm fallback...$(RESET)\n"; \
		npm run lint --prefix frontend; \
	fi

lint-frontend-fix: ## üîß Fix frontend linting issues
	@printf "$(BLUE)üîß Fixing frontend linting issues...$(RESET)\n"
	@if command -v biome >/dev/null 2>&1; then \
		biome check --apply frontend/src; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  Biome not installed. Using npm fallback...$(RESET)\n"; \
		npm run lint:fix --prefix frontend; \
	fi

# Python linting with Ruff
lint-python: ## üîç Run Python linting
	@printf "$(BLUE)üîç Running Python linting...$(RESET)\n"
	@if [ -d "sdk/python" ]; then \
		if command -v ruff >/dev/null 2>&1; then \
			ruff check sdk/python; \
		else \
			printf "$(YELLOW)‚ö†Ô∏è  Ruff not installed. Installing...$(RESET)\n"; \
			pip install ruff; \
			ruff check sdk/python; \
		fi; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  No Python SDK found, skipping Python linting$(RESET)\n"; \
	fi

lint-python-fix: ## üîß Fix Python linting issues
	@printf "$(BLUE)üîß Fixing Python linting issues...$(RESET)\n"
	@if [ -d "sdk/python" ]; then \
		if command -v ruff >/dev/null 2>&1; then \
			ruff check --fix sdk/python; \
			ruff format sdk/python; \
		else \
			printf "$(YELLOW)‚ö†Ô∏è  Ruff not installed. Installing...$(RESET)\n"; \
			pip install ruff; \
			ruff check --fix sdk/python; \
			ruff format sdk/python; \
		fi; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  No Python SDK found, skipping Python linting$(RESET)\n"; \
	fi

# =============================================================================
# üé® CODE FORMATTING
# =============================================================================

format: ## üé® Format all code (Go, JS/TS, Python)
	@printf "$(GREEN)üé® Formatting all code...$(RESET)\n"
	@$(MAKE) format-go
	@$(MAKE) format-frontend
	@$(MAKE) format-python
	@printf "$(GREEN)‚úÖ All formatting completed$(RESET)\n"

format-check: ## üîç Check code formatting
	@printf "$(BLUE)üîç Checking code formatting...$(RESET)\n"
	@gofmt -l . | grep -v vendor | grep -v node_modules | head -10
	@if command -v biome >/dev/null 2>&1; then biome check --formatter-enabled=true frontend/src; fi
	@if [ -d "sdk/python" ] && command -v ruff >/dev/null 2>&1; then ruff format --check sdk/python; fi

format-go: ## üé® Format Go code
	@printf "$(BLUE)üé® Formatting Go code...$(RESET)\n"
	@if command -v gofumpt >/dev/null 2>&1; then \
		gofumpt -w .; \
	else \
		gofmt -w .; \
	fi
	@if command -v goimports >/dev/null 2>&1; then \
		goimports -w .; \
	fi

format-frontend: ## üé® Format frontend code
	@printf "$(BLUE)üé® Formatting frontend code...$(RESET)\n"
	@if command -v biome >/dev/null 2>&1; then \
		biome format --write frontend/src; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  Biome not installed. Using prettier fallback...$(RESET)\n"; \
		cd frontend && npx prettier --write "src/**/*.{ts,tsx,js,jsx}"; \
	fi

format-python: ## üé® Format Python code
	@printf "$(BLUE)üé® Formatting Python code...$(RESET)\n"
	@if [ -d "sdk/python" ]; then \
		if command -v ruff >/dev/null 2>&1; then \
			ruff format sdk/python; \
		else \
			printf "$(YELLOW)‚ö†Ô∏è  Ruff not installed. Installing...$(RESET)\n"; \
			pip install ruff; \
			ruff format sdk/python; \
		fi; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  No Python SDK found, skipping Python formatting$(RESET)\n"; \
	fi

# =============================================================================
# üõ°Ô∏è SECURITY & TYPE CHECKING
# =============================================================================

security-scan: ## üõ°Ô∏è Run comprehensive security scans
	@printf "$(GREEN)üõ°Ô∏è Running security scans...$(RESET)\n"
	@$(MAKE) security-go
	@$(MAKE) security-frontend
	@$(MAKE) security-python
	@$(MAKE) security-containers
	@printf "$(GREEN)‚úÖ Security scans completed$(RESET)\n"

security-go: ## üõ°Ô∏è Run Go security scan
	@printf "$(BLUE)üõ°Ô∏è Scanning Go code for vulnerabilities...$(RESET)\n"
	@if command -v gosec >/dev/null 2>&1; then \
		gosec ./...; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  gosec not installed. Installing...$(RESET)\n"; \
		go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest; \
		gosec ./...; \
	fi
	@if command -v govulncheck >/dev/null 2>&1; then \
		govulncheck ./...; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  govulncheck not installed. Installing...$(RESET)\n"; \
		go install golang.org/x/vuln/cmd/govulncheck@latest; \
		govulncheck ./...; \
	fi

security-frontend: ## üõ°Ô∏è Run frontend security audit
	@printf "$(BLUE)üõ°Ô∏è Auditing frontend dependencies...$(RESET)\n"
	@cd frontend && npm audit --audit-level=moderate

security-python: ## üõ°Ô∏è Run Python security scan
	@printf "$(BLUE)üõ°Ô∏è Scanning Python code for vulnerabilities...$(RESET)\n"
	@if [ -d "sdk/python" ]; then \
		if command -v bandit >/dev/null 2>&1; then \
			bandit -r sdk/python -f json -o bandit-report.json; \
		else \
			printf "$(YELLOW)‚ö†Ô∏è  bandit not installed. Installing...$(RESET)\n"; \
			pip install bandit; \
			bandit -r sdk/python -f json -o bandit-report.json; \
		fi; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  No Python SDK found, skipping Python security scan$(RESET)\n"; \
	fi

security-containers: ## üõ°Ô∏è Scan container images for vulnerabilities
	@printf "$(BLUE)üõ°Ô∏è Scanning container images...$(RESET)\n"
	@if command -v trivy >/dev/null 2>&1; then \
		trivy fs .; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  Trivy not installed. Skipping container scan$(RESET)\n"; \
	fi

type-check: ## üè∑Ô∏è Run type checking for all languages
	@printf "$(GREEN)üè∑Ô∏è Running type checking...$(RESET)\n"
	@$(MAKE) type-check-go
	@$(MAKE) type-check-frontend
	@$(MAKE) type-check-python
	@printf "$(GREEN)‚úÖ Type checking completed$(RESET)\n"

type-check-go: ## üè∑Ô∏è Run Go type checking
	@printf "$(BLUE)üè∑Ô∏è Type checking Go code...$(RESET)\n"
	@go vet ./...

type-check-frontend: ## üè∑Ô∏è Run frontend type checking
	@printf "$(BLUE)üè∑Ô∏è Type checking frontend code...$(RESET)\n"
	@cd $(FRONTEND_DIR) && npm run type-check

type-check-python: ## üè∑Ô∏è Run Python type checking
	@printf "$(BLUE)üè∑Ô∏è Type checking Python code...$(RESET)\n"
	@if [ -d "sdk/python" ]; then \
		if command -v mypy >/dev/null 2>&1; then \
			mypy sdk/python --strict --ignore-missing-imports; \
		else \
			printf "$(YELLOW)‚ö†Ô∏è  mypy not installed. Installing...$(RESET)\n"; \
			pip install mypy; \
			mypy sdk/python --strict --ignore-missing-imports; \
		fi; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  No Python SDK found, skipping Python type checking$(RESET)\n"; \
	fi

# =============================================================================
# üîÑ PRE-COMMIT & UNIFIED QUALITY
# =============================================================================

pre-commit-install: ## üîÑ Install pre-commit hooks
	@printf "$(GREEN)üîÑ Installing pre-commit hooks...$(RESET)\n"
	@if command -v pre-commit >/dev/null 2>&1; then \
		pre-commit install; \
		pre-commit install --hook-type commit-msg; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  pre-commit not installed. Installing...$(RESET)\n"; \
		pip install pre-commit; \
		pre-commit install; \
		pre-commit install --hook-type commit-msg; \
	fi

pre-commit-run: ## üîÑ Run pre-commit hooks on all files
	@printf "$(BLUE)üîÑ Running pre-commit hooks...$(RESET)\n"
	@if command -v pre-commit >/dev/null 2>&1; then \
		pre-commit run --all-files; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  pre-commit not installed. Run 'make pre-commit-install' first$(RESET)\n"; \
	fi

quality-check: ## üèÜ Run comprehensive quality checks
	@printf "$(GREEN)üèÜ Running comprehensive quality checks...$(RESET)\n"
	@$(MAKE) lint
	@$(MAKE) type-check
	@$(MAKE) security-scan
	@$(MAKE) format-check
	@printf "$(GREEN)‚úÖ All quality checks completed$(RESET)\n"

quality-fix: ## üîß Auto-fix all quality issues
	@printf "$(GREEN)üîß Auto-fixing all quality issues...$(RESET)\n"
	@$(MAKE) format
	@$(MAKE) lint-fix
	@printf "$(GREEN)‚úÖ All auto-fixes completed$(RESET)\n"

quality-ci: ## ü§ñ Quality checks for CI (fail-fast)
	@printf "$(GREEN)ü§ñ Running CI quality checks...$(RESET)\n"
	@set -e; \
	$(MAKE) format-check; \
	$(MAKE) lint; \
	$(MAKE) type-check; \
	$(MAKE) security-scan
	@printf "$(GREEN)‚úÖ CI quality checks passed$(RESET)\n"

# =============================================================================
# üõ†Ô∏è TOOL INSTALLATION
# =============================================================================

install-tools: ## üõ†Ô∏è Install all development tools
	@printf "$(GREEN)üõ†Ô∏è Installing all development tools...$(RESET)\n"
	@$(MAKE) install-go-tools
	@$(MAKE) install-js-tools
	@$(MAKE) install-python-tools
	@printf "$(GREEN)‚úÖ All tools installed$(RESET)\n"

install-go-tools: ## üõ†Ô∏è Install Go development tools
	@printf "$(BLUE)üõ†Ô∏è Installing Go tools...$(RESET)\n"
	@go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.61.0
	@go install mvdan.cc/gofumpt@latest
	@go install golang.org/x/tools/cmd/goimports@latest
	@go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
	@go install golang.org/x/vuln/cmd/govulncheck@latest

install-js-tools: ## üõ†Ô∏è Install JavaScript/TypeScript tools
	@printf "$(BLUE)üõ†Ô∏è Installing JS/TS tools...$(RESET)\n"
	@if command -v npm >/dev/null 2>&1; then \
		npm install -g @biomejs/biome@latest; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  npm not found$(RESET)\n"; \
	fi

install-python-tools: ## üõ†Ô∏è Install Python development tools
	@printf "$(BLUE)üõ†Ô∏è Installing Python tools...$(RESET)\n"
	@pip install -U ruff mypy bandit pre-commit

# =============================================================================
# üî® BUILD & DEPLOYMENT
# =============================================================================

.PHONY: build-all build-frontend build-backend build-docker build-clean

build-all: build-frontend build-backend ## üî® Build all components
	@printf "$(GREEN)‚úÖ All components built successfully$(RESET)\n"

build-frontend: ## üé® Build frontend for production
	@printf "$(BLUE)üé® Building frontend...$(RESET)\n"
	@cd $(FRONTEND_DIR) && npm run build
	@printf "$(GREEN)‚úÖ Frontend built$(RESET)\n"

build-backend: ## ‚öôÔ∏è Build backend server
	@printf "$(BLUE)‚öôÔ∏è Building backend...$(RESET)\n"
	@mkdir -p $(BUILD_OUTPUT_DIR)
	@CGO_ENABLED=0 go build \
		-ldflags="-X main.version=$(VERSION) -X main.buildDate=$(BUILD_DATE) -X main.gitCommit=$(GIT_COMMIT)" \
		-o $(BUILD_OUTPUT_DIR)/server ./cmd/server
	@printf "$(GREEN)‚úÖ Backend built$(RESET)\n"

build-docker: ## üê≥ Build Docker images
	@printf "$(BLUE)üê≥ Building Docker images...$(RESET)\n"
	@docker build -t $(PROJECT_NAME):$(VERSION) .
	@printf "$(GREEN)‚úÖ Docker images built$(RESET)\n"

build-clean: ## üßπ Clean build artifacts
	@printf "$(BLUE)üßπ Cleaning build artifacts...$(RESET)\n"
	@rm -rf $(BUILD_OUTPUT_DIR)
	@rm -rf $(FRONTEND_DIR)/dist
	@printf "$(GREEN)‚úÖ Build artifacts cleaned$(RESET)\n"

# =============================================================================
# üìö DOCUMENTATION
# =============================================================================

.PHONY: docs-help docs-serve docs-build docs-schema docs-wiki-sync

docs-help: ## üìö Show documentation help
	@printf "\n$(BOLD)$(BLUE)Documentation$(RESET)\n"
	@printf "$(BLUE)==============$(RESET)\n\n"
	@printf "$(BOLD)Local Documentation:$(RESET)\n"
	@printf "  $(GREEN)make docs-serve$(RESET)      üìñ Serve docs locally\n"
	@printf "  $(GREEN)make docs-build$(RESET)      üèóÔ∏è  Build static docs\n"
	@printf "  $(GREEN)make docs-schema$(RESET)     üíæ Generate database schema docs\n\n"
	@printf "$(BOLD)GitHub Integration:$(RESET)\n"
	@printf "  $(GREEN)make docs-wiki-sync$(RESET)  üîÑ Sync docs to GitHub Wiki (requires GITHUB_TOKEN)\n"
	@printf "  $(GREEN)make docs-wiki-test$(RESET)  üß™ Test Wiki Mermaid diagrams (requires GITHUB_TOKEN)\n"
	@printf "  $(GREEN)make docs-test$(RESET)       üß™ Test documentation\n\n"
	@printf "$(BOLD)Environment Setup:$(RESET)\n"
	@printf "  $(GREEN)make env-setup$(RESET)       üîß Create .env file with GITHUB_TOKEN template\n"
	@printf "  $(GREEN)make check-github-token$(RESET) üîë Verify GitHub token configuration\n\n"
	@printf "$(BOLD)Documentation URLs:$(RESET)\n"
	@printf "  Local Server: http://$(DOCS_HOST):$(DOCS_PORT)\n"
	@printf "  Static Files: site/index.html\n"
	@printf "  GitHub Wiki: $(GITHUB_WIKI_URL)\n"
	@printf "  Wiki Sync Status: $(if $(filter true,$(WIKI_SYNC_ENABLED)),$(GREEN)Enabled$(RESET),$(YELLOW)Disabled$(RESET))\n\n"

docs-serve: docs-mkdocs-serve ## üìñ Serve documentation locally

docs-build: docs-mkdocs-build ## üèóÔ∏è Build static documentation

docs-schema: ## üíæ Generate database schema documentation
	@printf "$(BLUE)üíæ Generating schema documentation...$(RESET)\n"
	@make docs-schema-optional

docs-wiki-sync: check-github-token ## üîÑ Sync documentation to GitHub Wiki
	@printf "$(BLUE)üîÑ Syncing to GitHub Wiki...$(RESET)\n"
	@if [ "$(WIKI_SYNC_ENABLED)" = "true" ]; then \
		printf "$(YELLOW)üì§ Syncing to $(GITHUB_WIKI_URL)$(RESET)\n"; \
		if [ -f "scripts/sync-wiki-safe.sh" ]; then \
			GITHUB_TOKEN=$(GITHUB_TOKEN) bash scripts/sync-wiki-safe.sh; \
		else \
			printf "$(RED)‚ùå Wiki sync script not found$(RESET)\n"; \
		fi; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  Wiki sync disabled (WIKI_SYNC_ENABLED=false)$(RESET)\n"; \
	fi

docs-wiki-test: check-github-token ## üß™ Test GitHub Wiki integration with Mermaid
	@printf "$(BLUE)üß™ Testing GitHub Wiki integration...$(RESET)\n"
	@if [ -f "scripts/sync-mermaid-test.sh" ]; then \
		GITHUB_TOKEN=$(GITHUB_TOKEN) bash scripts/sync-mermaid-test.sh; \
	else \
		printf "$(RED)‚ùå Mermaid test script not found$(RESET)\n"; \
	fi

docs-test: test-wiki ## üß™ Test documentation integration

# =============================================================================
# üê≥ DOCKER & DEPLOYMENT
# =============================================================================

.PHONY: docker-help docker-up docker-down docker-logs docker-build

docker-help: ## üê≥ Show Docker and deployment help
	@printf "\n$(BOLD)$(BLUE)Docker & Deployment$(RESET)\n"
	@printf "$(BLUE)=====================$(RESET)\n\n"
	@printf "$(BOLD)Local Development:$(RESET)\n"
	@printf "  $(GREEN)make docker-up$(RESET)       üöÄ Start services with Docker\n"
	@printf "  $(GREEN)make docker-down$(RESET)     üõë Stop Docker services\n"
	@printf "  $(GREEN)make docker-logs$(RESET)     üìú View Docker logs\n"
	@printf "  $(GREEN)make docker-build$(RESET)    üî® Build Docker images\n\n"
	@printf "$(BOLD)Service URLs:$(RESET)\n"
	@printf "  Database: $(DB_HOST):$(DB_PORT)\n"
	@printf "  NATS: $(NATS_URL)\n"
	@printf "  Redis: $(REDIS_URL)\n\n"

docker-up: dev-up ## üöÄ Start services with Docker Compose
docker-down: dev-down ## üõë Stop Docker services  
docker-logs: dev-logs ## üìú View Docker service logs
docker-build: build-docker ## üî® Build Docker images

# =============================================================================
# üóÑÔ∏è DATABASE MANAGEMENT
# =============================================================================

.PHONY: db-help db-migrate db-reset db-backup db-restore

db-help: ## üóÑÔ∏è Show database management help
	@printf "\n$(BOLD)$(BLUE)Database Management$(RESET)\n"
	@printf "$(BLUE)====================$(RESET)\n\n"
	@printf "$(BOLD)Schema Management:$(RESET)\n"
	@printf "  $(GREEN)make db-migrate$(RESET)      üîÑ Run database migrations\n"
	@printf "  $(GREEN)make db-reset$(RESET)        üîÑ Reset database (migrate + seed)\n"
	@printf "  $(GREEN)make db-seed$(RESET)         üå± Seed with sample data\n\n"
	@printf "$(BOLD)Backup & Restore:$(RESET)\n"
	@printf "  $(GREEN)make db-backup$(RESET)       üíæ Backup database\n"
	@printf "  $(GREEN)make db-restore$(RESET)      üì• Restore database\n\n"
	@printf "$(BOLD)Documentation:$(RESET)\n"
	@printf "  $(GREEN)make db-docs$(RESET)         üìö Generate schema docs\n\n"
	@printf "$(BOLD)Connection Info:$(RESET)\n"
	@printf "  Host: $(DB_HOST):$(DB_PORT)\n"
	@printf "  Database: $(DB_NAME)\n"
	@printf "  User: $(DB_USER)\n\n"

db-migrate: ## üîÑ Run database migrations
	@printf "$(BLUE)üîÑ Running database migrations...$(RESET)\n"
	@echo "Migration placeholder - implement based on your migration tool"

db-reset: ## üîÑ Reset database (migrate + seed)
	@printf "$(BLUE)üîÑ Resetting database...$(RESET)\n"
	@make db-migrate
	@make db-seed

db-seed: ## üå± Seed database with sample data
	@printf "$(BLUE)üå± Seeding database...$(RESET)\n"
	@echo "Seed placeholder - implement based on your seeding tool"

db-backup: ## üíæ Backup database
	@printf "$(BLUE)üíæ Backing up database...$(RESET)\n"
	@echo "Backup placeholder - implement with pg_dump or your backup tool"

db-restore: ## üì• Restore database from backup
	@printf "$(BLUE)üì• Restoring database...$(RESET)\n"
	@echo "Restore placeholder - implement with psql or your restore tool"

db-docs: docs-schema ## üìö Generate database documentation

# =============================================================================
# üîÑ MATRIX TESTING
# =============================================================================

.PHONY: matrix-help matrix-test matrix-status matrix-report matrix-clean

matrix-help: ## üîÑ Show matrix testing help
	@printf "\n$(BOLD)$(BLUE)Matrix Testing$(RESET)\n"
	@printf "$(BLUE)===============$(RESET)\n\n"
	@printf "$(BOLD)Cross-Version Testing:$(RESET)\n"
	@printf "  $(GREEN)make matrix-test$(RESET)     üß™ Test across multiple versions\n"
	@printf "  $(GREEN)make matrix-status$(RESET)   üìä Show version matrix status\n"
	@printf "  $(GREEN)make matrix-report$(RESET)   üìã Generate detailed report\n"
	@printf "  $(GREEN)make matrix-clean$(RESET)    üßπ Clean matrix test data\n\n"
	@printf "$(BOLD)Supported Versions:$(RESET)\n"
	@printf "  Node.js: 16.x, 18.x, 20.x\n"
	@printf "  Go: 1.21.x, 1.22.x, 1.23.x\n\n"
	@printf "$(BOLD)Test Matrix:$(RESET)\n"
	@printf "  - Unit tests across all version combinations\n"
	@printf "  - Integration tests with different runtimes\n"
	@printf "  - Performance benchmarks\n"
	@printf "  - Compatibility validation\n\n"

matrix-test: ## üß™ Run matrix testing across multiple versions
	@printf "$(BLUE)üß™ Running matrix tests...$(RESET)\n"
	@echo "Matrix testing placeholder - implement version switching and testing"

matrix-status: ## üìä Show version matrix status
	@printf "$(BLUE)üìä Matrix Testing Status$(RESET)\n"
	@printf "$(BLUE)========================$(RESET)\n"
	@printf "Current Node.js: $$(node --version 2>/dev/null || echo 'Not installed')\n"
	@printf "Current Go: $$(go version 2>/dev/null | cut -d' ' -f3 || echo 'Not installed')\n"
	@printf "Matrix tests: Not yet implemented\n"

matrix-report: ## üìã Generate matrix testing report
	@printf "$(BLUE)üìã Matrix testing report placeholder$(RESET)\n"

matrix-clean: ## üßπ Clean matrix testing data
	@printf "$(BLUE)üßπ Cleaning matrix test data...$(RESET)\n"
	@rm -rf reports/matrix

# =============================================================================
# üßπ CLEANUP & MAINTENANCE
# =============================================================================

.PHONY: clean-all clean-deps clean-cache clean-logs

clean-all: build-clean clean-deps clean-cache clean-logs ## üßπ Clean everything
	@printf "$(GREEN)‚úÖ Complete cleanup finished$(RESET)\n"

clean-deps: ## üßπ Clean dependency caches
	@printf "$(BLUE)üßπ Cleaning dependency caches...$(RESET)\n"
	@rm -rf node_modules
	@rm -rf $(FRONTEND_DIR)/node_modules
	@go clean -modcache
	@printf "$(GREEN)‚úÖ Dependencies cleaned$(RESET)\n"

clean-cache: ## üßπ Clean build caches
	@printf "$(BLUE)üßπ Cleaning build caches...$(RESET)\n"
	@rm -rf .cache
	@rm -rf $(FRONTEND_DIR)/.cache
	@printf "$(GREEN)‚úÖ Caches cleaned$(RESET)\n"

clean-logs: ## üßπ Clean log files
	@printf "$(BLUE)üßπ Cleaning log files...$(RESET)\n"
	@rm -rf logs/
	@printf "$(GREEN)‚úÖ Logs cleaned$(RESET)\n"

# =============================================================================
# üìã ALL TARGETS (Complete List)
# =============================================================================

all-targets: ## üìã Show ALL available targets
	@printf "\n$(BOLD)$(BLUE)All Available Targets$(RESET)\n"
	@printf "$(BLUE)======================$(RESET)\n\n"
	@awk 'BEGIN {FS = ":.*##"} /^[a-zA-Z_0-9-]+:.*##/ { printf "  $(GREEN)%-20s$(RESET) %s\n", $$1, $$2 }' $(MAKEFILE_LIST)

# =============================================================================
# ENVIRONMENT & SETUP TARGETS
# =============================================================================

.PHONY: env-setup env-check check-github-token setup-env show-env

env-setup: ## üîß Setup environment configuration
	@printf "$(BLUE)üîß Setting up environment configuration...$(RESET)\n"
	@if [ ! -f ".env" ]; then \
		printf "$(YELLOW)üìã Creating .env from template...$(RESET)\n"; \
		cp .env.template .env; \
		printf "$(GREEN)‚úÖ Created .env file$(RESET)\n"; \
		printf "$(YELLOW)‚ö†Ô∏è  Please edit .env with your actual values$(RESET)\n"; \
		printf "$(BLUE)üí° Key variables to configure:$(RESET)\n"; \
		printf "  - GITHUB_TOKEN (for wiki sync)\n"; \
		printf "  - DB_PASSWORD (database password)\n"; \
		printf "  - JWT_SECRET (JWT signing key)\n"; \
		printf "  - SESSION_SECRET (session encryption)\n"; \
	else \
		printf "$(GREEN)‚úÖ .env file already exists$(RESET)\n"; \
	fi

env-check: ## üîç Check environment configuration
	@printf "$(BLUE)üîç Environment Configuration Status$(RESET)\n"
	@printf "$(BLUE)====================================$(RESET)\n"
	@printf "Environment file: $(if $(wildcard ./.env),$(GREEN)‚úÖ Found$(RESET),$(RED)‚ùå Missing$(RESET))\n"
	@if [ -f ".env" ]; then \
		printf "GitHub Token: $(if $(GITHUB_TOKEN),$(GREEN)‚úÖ Set$(RESET),$(YELLOW)‚ö†Ô∏è  Missing$(RESET))\n"; \
		printf "Database Config: $(if $(DB_PASSWORD),$(GREEN)‚úÖ Set$(RESET),$(YELLOW)‚ö†Ô∏è  Using defaults$(RESET))\n"; \
		printf "Wiki Sync: $(if $(filter true,$(WIKI_SYNC_ENABLED)),$(GREEN)‚úÖ Enabled$(RESET),$(YELLOW)‚ö†Ô∏è  Disabled$(RESET))\n"; \
	else \
		printf "$(YELLOW)üí° Run 'make env-setup' to create .env file$(RESET)\n"; \
	fi

check-github-token: ## üîë Verify GitHub token is configured
	@if [ -z "$(GITHUB_TOKEN)" ]; then \
		printf "$(RED)‚ùå GITHUB_TOKEN not set$(RESET)\n"; \
		printf "$(BLUE)üí° Setup instructions:$(RESET)\n"; \
		printf "  1. Copy template: make env-setup\n"; \
		printf "  2. Get token: https://github.com/settings/tokens\n"; \
		printf "  3. Add to .env: GITHUB_TOKEN=your_token_here\n"; \
		printf "  4. Required scopes: repo, wiki, workflow\n"; \
		exit 1; \
	else \
		printf "$(GREEN)‚úÖ GitHub token configured$(RESET)\n"; \
	fi

setup-env: env-setup ## üöÄ Complete environment setup (alias for env-setup)

env-generate-template: ## üîß Generate/update .env.template with all configurations
	@printf "$(BLUE)üîß Generating comprehensive .env.template...$(RESET)\n"
	@cat > .env.template << 'EOF' ;\
# Environment Configuration Template\
# Copy this file to .env and configure with your actual values\
# DO NOT commit .env file to version control\
\
# =============================================================================\
# GitHub Integration\
# =============================================================================\
\
# GitHub Personal Access Token for API operations\
# Required for: wiki sync, releases, workflow triggers\
# Scopes needed: repo, wiki, workflow\
# Generate at: https://github.com/settings/tokens\
GITHUB_TOKEN=your_github_token_here\
\
# GitHub Repository Information\
GITHUB_OWNER=$(GITHUB_OWNER)\
GITHUB_REPO=$(GITHUB_REPO)\
\
# =============================================================================\
# Database Configuration\
# =============================================================================\
\
# PostgreSQL Database Settings\
DB_HOST=$(DB_HOST)\
DB_PORT=$(DB_PORT)\
DB_NAME=$(DB_NAME)\
DB_USER=$(DB_USER)\
DB_PASSWORD=your_secure_password_here\
DB_SSLMODE=disable\
\
# Database URL (alternative to individual settings)\
DATABASE_URL=postgresql://$${DB_USER}:$${DB_PASSWORD}@$${DB_HOST}:$${DB_PORT}/$${DB_NAME}?sslmode=$${DB_SSLMODE}\
\
# =============================================================================\
# Service Configuration\
# =============================================================================\
\
# NATS Messaging\
NATS_URL=$(NATS_URL)\
\
# Redis Cache\
REDIS_URL=$(REDIS_URL)\
\
# Application Settings\
APP_ENV=development\
APP_PORT=8080\
APP_HOST=localhost\
\
# =============================================================================\
# Authentication & Security\
# =============================================================================\
\
# JWT Configuration (CRITICAL - Generate secure secrets)\
JWT_SECRET=your_jwt_secret_here_minimum_32_characters\
JWT_EXPIRY=1h\
REFRESH_TOKEN_EXPIRY=7d\
\
# Session Configuration (CRITICAL - Generate secure secrets)\
SESSION_SECRET=your_session_secret_here_minimum_32_characters\
SESSION_TIMEOUT=24h\
\
# CORS Settings\
CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://$(DOCS_HOST):$(DOCS_PORT)\
\
# =============================================================================\
# External Services\
# =============================================================================\
\
# Bytebase Configuration\
BYTEBASE_URL=http://localhost:5678\
BYTEBASE_TOKEN=your_bytebase_token_here\
\
# SPIRE Configuration (Zero Trust Identity)\
SPIRE_SOCKET_PATH=/run/spire/sockets/agent.sock\
SPIRE_TRUST_DOMAIN=zamaz.dev\
\
# =============================================================================\
# Development Tools\
# =============================================================================\
\
# Log Level (debug, info, warn, error)\
LOG_LEVEL=debug\
\
# Enable Development Features\
ENABLE_PPROF=true\
ENABLE_DEBUG_ENDPOINTS=true\
\
# API Documentation\
SWAGGER_ENABLED=true\
SWAGGER_HOST=localhost:8080\
\
# =============================================================================\
# Documentation & Wiki\
# =============================================================================\
\
# MkDocs Configuration\
DOCS_PORT=$(DOCS_PORT)\
DOCS_HOST=$(DOCS_HOST)\
\
# Wiki Sync Configuration\
WIKI_SYNC_ENABLED=$(WIKI_SYNC_ENABLED)\
WIKI_BRANCH=$(WIKI_BRANCH)\
WIKI_SUBDIRECTORY=$(WIKI_SUBDIRECTORY)\
\
# =============================================================================\
# Testing Configuration\
# =============================================================================\
\
# Test Database (separate from main DB)\
TEST_DB_HOST=localhost\
TEST_DB_PORT=5432\
TEST_DB_NAME=mvp_test_db\
TEST_DB_USER=mvp_test_user\
TEST_DB_PASSWORD=test_password\
\
# E2E Testing\
E2E_BASE_URL=http://localhost:8080\
E2E_TIMEOUT=30000\
\
# Load Testing\
LOAD_TEST_USERS=10\
LOAD_TEST_DURATION=5m\
\
# =============================================================================\
# Monitoring & Observability\
# =============================================================================\
\
# Metrics Configuration\
METRICS_ENABLED=true\
METRICS_PORT=9090\
\
# Prometheus\
PROMETHEUS_URL=http://localhost:9090\
\
# Grafana\
GRAFANA_URL=http://localhost:3000\
GRAFANA_API_KEY=your_grafana_api_key_here\
\
# =============================================================================\
# CI/CD Configuration\
# =============================================================================\
\
# Docker Configuration\
DOCKER_REGISTRY=ghcr.io\
DOCKER_IMAGE_NAME=$(GITHUB_OWNER)/$(GITHUB_REPO)\
DOCKER_TAG=latest\
\
# Deployment Configuration\
DEPLOY_ENV=development\
KUBE_NAMESPACE=zamaz-auth-dev\
ARGOCD_SERVER=your-argocd-server.com\
\
# =============================================================================\
# Security Secrets Generation\
# =============================================================================\
# Generate secure secrets with:\
# JWT_SECRET=$$(openssl rand -base64 32)\
# SESSION_SECRET=$$(openssl rand -base64 32)\
EOF
	@printf "$(GREEN)‚úÖ .env.template updated with current configuration$(RESET)\n"
	@printf "$(BLUE)üí° Use 'make env-setup' to create .env from this template$(RESET)\n"

env-secrets: ## üîê Generate secure secrets for JWT and SESSION
	@printf "$(BLUE)üîê Generating secure secrets...$(RESET)\n"
	@printf "$(YELLOW)Add these to your .env file:$(RESET)\n"
	@printf "JWT_SECRET=$$(openssl rand -base64 32)\n"
	@printf "SESSION_SECRET=$$(openssl rand -base64 32)\n"
	@printf "$(BLUE)üí° These secrets are cryptographically secure$(RESET)\n"

show-env: ## üìã Show current environment variables (safe)
	@printf "$(BLUE)üìã Current Environment Configuration$(RESET)\n"
	@printf "$(BLUE)====================================$(RESET)\n"
	@printf "Project: $(GREEN)$(PROJECT_NAME)$(RESET)\n"
	@printf "Version: $(GREEN)$(VERSION)$(RESET)\n"
	@printf "GitHub Owner: $(GREEN)$(GITHUB_OWNER)$(RESET)\n"
	@printf "GitHub Repo: $(GREEN)$(GITHUB_REPO)$(RESET)\n"
	@printf "GitHub Token: $(if $(GITHUB_TOKEN),$(GREEN)‚úÖ Set (****)$(RESET),$(RED)‚ùå Not set$(RESET))\n"
	@printf "Database Host: $(GREEN)$(DB_HOST):$(DB_PORT)$(RESET)\n"
	@printf "Database Name: $(GREEN)$(DB_NAME)$(RESET)\n"
	@printf "Frontend Dir: $(GREEN)$(FRONTEND_DIR)$(RESET)\n"
	@printf "Docs Port: $(GREEN)$(DOCS_HOST):$(DOCS_PORT)$(RESET)\n"
	@printf "Wiki Sync: $(if $(filter true,$(WIKI_SYNC_ENABLED)),$(GREEN)Enabled$(RESET),$(YELLOW)Disabled$(RESET))\n"

# =============================================================================
# MISSING DOCUMENTATION TARGETS (Referenced but not implemented)
# =============================================================================

.PHONY: docs-mkdocs-serve docs-mkdocs-build docs-mkdocs-install docs-schema-optional docs-wiki-preview

docs-mkdocs-install: ## üìö Install MkDocs and dependencies
	@printf "$(BLUE)üìö Installing MkDocs...$(RESET)\n"
	@if [ ! -d ".venv-docs" ]; then \
		printf "$(YELLOW)üì¶ Creating virtual environment...$(RESET)\n"; \
		python3 -m venv .venv-docs; \
	fi
	@./.venv-docs/bin/pip install -q mkdocs mkdocs-material pymdown-extensions
	@printf "$(GREEN)‚úÖ MkDocs environment ready$(RESET)\n"

docs-mkdocs-serve: docs-mkdocs-install ## üìñ Start MkDocs development server
	@printf "$(BLUE)üìñ Starting MkDocs server...$(RESET)\n"
	@printf "$(GREEN)üìç Documentation available at: http://127.0.0.1:8001$(RESET)\n"
	@./.venv-docs/bin/mkdocs serve --dev-addr 127.0.0.1:8001

docs-mkdocs-build: docs-mkdocs-install ## üèóÔ∏è Build MkDocs static site
	@printf "$(BLUE)üèóÔ∏è Building MkDocs static site...$(RESET)\n"
	@./.venv-docs/bin/mkdocs build
	@printf "$(GREEN)‚úÖ Static documentation built$(RESET)\n"

docs-schema-optional: ## üíæ Generate schema documentation if database available
	@printf "$(BLUE)üíæ Generating schema documentation...$(RESET)\n"
	@mkdir -p docs/combined/schema
	@if command -v tbls >/dev/null 2>&1; then \
		if tbls doc --force docs/schema 2>/dev/null; then \
			printf "$(GREEN)‚úÖ Schema documentation generated$(RESET)\n"; \
			cp -r docs/schema/* docs/combined/schema/ 2>/dev/null || true; \
		else \
			printf "$(YELLOW)‚ö†Ô∏è  Database not available - skipping schema docs$(RESET)\n"; \
			echo "Database connection required for schema generation" > docs/combined/schema/README.md; \
		fi; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  tbls not installed - skipping schema docs$(RESET)\n"; \
		echo "Install tbls to generate schema documentation" > docs/combined/schema/README.md; \
	fi

docs-wiki-preview: ## üîç Preview wiki sync (safe mode)
	@printf "$(BLUE)üîç Previewing wiki sync...$(RESET)\n"
	@if [ -f "scripts/sync-wiki-safe.sh" ]; then \
		bash scripts/sync-wiki-safe.sh; \
	else \
		printf "$(YELLOW)‚ö†Ô∏è  Wiki sync script not found$(RESET)\n"; \
		printf "$(BLUE)üí° Create scripts/sync-wiki-safe.sh for wiki integration$(RESET)\n"; \
	fi

# =============================================================================
# INCLUDE EXISTING ADVANCED TARGETS
# =============================================================================
# Keep all existing advanced targets from the original Makefile below this line
# This preserves existing functionality while providing better organization

