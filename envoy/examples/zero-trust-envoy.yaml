# Advanced Zero Trust Envoy Configuration Example
# This shows how your current setup could be enhanced

admin:
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
  - name: mtls_listener
    address:
      socket_address: { address: 0.0.0.0, port_value: 8443 }
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: secure_ingress
          route_config:
            name: secure_route
            virtual_hosts:
            - name: secure_service
              domains: ["*"]
              routes:
              - match: { prefix: "/api/" }
                route: 
                  cluster: mvp_service_secure
                  # Add Zero Trust headers
                  request_headers_to_add:
                  - header:
                      key: "X-SPIFFE-ID"
                      value: "%DOWNSTREAM_TLS_SUBJECT%"
                  - header:
                      key: "X-Trust-Level"
                      value: "verified"
              - match: { prefix: "/health" }
                route: { cluster: mvp_service_secure }
          http_filters:
          # JWT Validation Filter
          - name: envoy.filters.http.jwt_authn
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
              providers:
                mvp_provider:
                  remote_jwks:
                    http_uri:
                      uri: http://mvp_service:8080/api/auth/jwks
                      cluster: mvp_service_secure
                      timeout: 5s
              rules:
              - match: { prefix: "/api/" }
                requires: { provider_name: "mvp_provider" }
          # Rate Limiting
          - name: envoy.filters.http.local_ratelimit
            typed_config:
              "@type": type.googleapis.com/udpa.type.v1.TypedStruct
              type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
              value:
                stat_prefix: rate_limiter
                token_bucket:
                  max_tokens: 100
                  tokens_per_fill: 100
                  fill_interval: 60s
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      # mTLS Configuration
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            # SPIRE SDS Configuration
            tls_certificate_sds_secret_configs:
            - name: "spiffe://mvp.local/envoy"
              sds_config:
                resource_api_version: V3
                api_config_source:
                  transport_api_version: V3
                  api_type: GRPC
                  grpc_services:
                  - envoy_grpc:
                      cluster_name: spire_agent
            validation_context_sds_secret_config:
              name: "spiffe://mvp.local"
              sds_config:
                resource_api_version: V3
                api_config_source:
                  transport_api_version: V3
                  api_type: GRPC
                  grpc_services:
                  - envoy_grpc:
                      cluster_name: spire_agent
          require_client_certificate: true

  clusters:
  # Enhanced backend cluster with health checks
  - name: mvp_service_secure
    connect_timeout: 30s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    health_checks:
    - timeout: 5s
      interval: 10s
      healthy_threshold: 2
      unhealthy_threshold: 3
      http_health_check:
        path: "/health"
        request_headers_to_add:
        - header:
            key: "X-Health-Check"
            value: "envoy"
    load_assignment:
      cluster_name: mvp_service_secure
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: host.docker.internal
                port_value: 8080
    # Upstream mTLS to backend
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        common_tls_context:
          tls_certificate_sds_secret_configs:
          - name: "spiffe://mvp.local/envoy"
            sds_config:
              resource_api_version: V3
              api_config_source:
                transport_api_version: V3
                api_type: GRPC
                grpc_services:
                - envoy_grpc:
                    cluster_name: spire_agent

  # SPIRE Agent cluster for certificate management
  - name: spire_agent
    connect_timeout: 1s
    type: STATIC
    lb_policy: ROUND_ROBIN
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        explicit_http_config:
          http2_protocol_options: {}
    load_assignment:
      cluster_name: spire_agent
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              pipe:
                path: /tmp/spire-agent/public/api.sock