apiVersion: component.github.com/v1alpha1
kind: Component
metadata:
  name: go-keycloak-zerotrust-middleware
  version: 1.0.0
  description: Framework middleware for Zero Trust authentication integration
  labels:
    component.type: middleware
    language: go
    category: authentication
    frameworks: gin,echo,fiber,grpc
spec:
  type: middleware
  language: go
  maintainers:
    - name: Zero Trust Team
      email: zerotrust@yourorg.com
  
  # Dependencies
  dependencies:
    runtime:
      - name: github.com/gin-gonic/gin
        version: ">=1.9.0"
        reason: Gin framework integration
        optional: true
      - name: github.com/labstack/echo/v4
        version: ">=4.11.0"
        reason: Echo framework integration
        optional: true
      - name: github.com/gofiber/fiber/v2
        version: ">=2.52.0"
        reason: Fiber framework integration
        optional: true
      - name: google.golang.org/grpc
        version: ">=1.59.0"
        reason: gRPC interceptor integration
        optional: true
    
    requires:
      - name: go-keycloak-zerotrust-core
        version: ">=1.0.0"
        reason: Core authentication functionality
  
  # Framework support
  frameworks:
    gin:
      middleware: GinMiddleware
      features:
        - authentication
        - authorization
        - trust_level_enforcement
        - device_verification
        - risk_assessment
      
      example: |
        middleware := zerotrust.NewGinMiddleware(client)
        router.Use(middleware.Authenticate())
        router.GET("/api/data", middleware.RequireTrustLevel(50), handler)
    
    echo:
      middleware: EchoMiddleware
      features:
        - authentication
        - authorization
        - trust_level_enforcement
        - device_verification
        - risk_assessment
      
      example: |
        middleware := zerotrust.NewEchoMiddleware(client)
        e.Use(middleware.Authenticate())
        e.GET("/api/data", handler, middleware.RequireTrustLevel(50))
    
    fiber:
      middleware: FiberMiddleware
      features:
        - authentication
        - authorization
        - trust_level_enforcement
        - device_verification
        - risk_assessment
      
      example: |
        middleware := zerotrust.NewFiberMiddleware(client)
        app.Use(middleware.Authenticate())
        app.Get("/api/data", middleware.RequireTrustLevel(50), handler)
    
    grpc:
      interceptor: GRPCInterceptor
      features:
        - unary_authentication
        - stream_authentication
        - authorization
        - trust_level_enforcement
      
      example: |
        interceptor := zerotrust.NewGRPCInterceptor(client)
        s := grpc.NewServer(
          grpc.UnaryInterceptor(interceptor.UnaryInterceptor()),
          grpc.StreamInterceptor(interceptor.StreamInterceptor()),
        )
  
  # Public API
  provides:
    gin:
      - GinMiddleware.Authenticate()
      - GinMiddleware.RequireTrustLevel(int)
      - GinMiddleware.RequireDeviceVerification()
      - GinMiddleware.RequireMaxRiskScore(float64)
      - GinMiddleware.GetClaims(context)
    
    echo:
      - EchoMiddleware.Authenticate()
      - EchoMiddleware.RequireTrustLevel(int)
      - EchoMiddleware.RequireDeviceVerification()
      - EchoMiddleware.RequireMaxRiskScore(float64)
      - EchoMiddleware.GetClaims(context)
    
    fiber:
      - FiberMiddleware.Authenticate()
      - FiberMiddleware.RequireTrustLevel(int)
      - FiberMiddleware.RequireDeviceVerification()
      - FiberMiddleware.RequireMaxRiskScore(float64)
      - FiberMiddleware.GetClaims(context)
    
    grpc:
      - GRPCInterceptor.UnaryInterceptor()
      - GRPCInterceptor.StreamInterceptor()
      - GRPCInterceptor.WithTrustLevel(int)
      - GRPCInterceptor.WithDeviceVerification()
  
  # Configuration
  configuration:
    middleware_config:
      skip_paths: "[]string - paths to skip authentication"
      error_handler: "func - custom error handling"
      claims_extractor: "func - custom claims extraction"
      trust_level_header: "string - header for trust level"
      device_verification_header: "string - header for device status"
    
    gin_specific:
      abort_on_error: "bool - abort request on auth failure"
      set_user_context: "bool - set user in Gin context"
    
    echo_specific:
      skip_successors: "bool - skip middleware chain on failure"
      context_key: "string - context key for user data"
    
    fiber_specific:
      next_handler: "func - custom next handler"
      locals_key: "string - locals key for user data"
    
    grpc_specific:
      metadata_key: "string - metadata key for token"
      skip_methods: "[]string - methods to skip authentication"
  
  # Performance characteristics
  performance:
    benchmarks:
      gin_middleware: "<0.5ms overhead p99"
      echo_middleware: "<0.5ms overhead p99"
      fiber_middleware: "<0.3ms overhead p99"
      grpc_interceptor: "<1ms overhead p99"
    
    throughput:
      gin: "10000+ req/s"
      echo: "12000+ req/s"
      fiber: "15000+ req/s"
      grpc: "8000+ req/s"
  
  # Security features
  security:
    headers:
      - X-Trust-Level
      - X-Device-Verified
      - X-Risk-Score
      - X-User-ID
    
    protection:
      - token_extraction_validation
      - claim_verification
      - trust_level_enforcement
      - device_attestation_check
      - risk_score_evaluation
    
    error_handling:
      - secure_error_responses
      - no_sensitive_data_leakage
      - audit_logging
  
  # Examples and templates
  examples:
    basic_gin:
      file: "examples/gin/basic-auth.go"
      description: "Basic authentication with Gin"
    
    trust_levels:
      file: "examples/gin/trust-levels.go"
      description: "Trust level-based authorization"
    
    device_verification:
      file: "examples/echo/device-verification.go"
      description: "Device verification with Echo"
    
    risk_based:
      file: "examples/fiber/risk-based.go"
      description: "Risk-based access control with Fiber"
    
    grpc_service:
      file: "examples/grpc/secure-service.go"
      description: "Secure gRPC service with interceptors"
  
  # Installation
  installation:
    go_module:
      command: "go get github.com/yourorg/go-keycloak-zerotrust/components/middleware@v1.0.0"
      import: "github.com/yourorg/go-keycloak-zerotrust/components/middleware"
    
    container:
      registry: ghcr.io/yourorg/zerotrust-middleware
      tag: "1.0.0"
      size: "<30MB"
  
  # Compatibility
  compatibility:
    framework_versions:
      gin: [">=1.9.0"]
      echo: [">=4.11.0"]
      fiber: [">=2.52.0"]
      grpc: [">=1.59.0"]
    
    go_versions: ["1.21", "1.22", "1.23"]
    
    breaking_changes:
      - version: "2.0.0"
        description: "Updated middleware interface"
        migration_guide: "docs/migration/middleware-v1-to-v2.md"
  
  # Quality metrics
  quality:
    test_coverage: ">95%"
    framework_compatibility: "100%"
    performance_regression: "none"
    security_audit: "passed"
  
  # Documentation
  documentation:
    framework_guides:
      - gin: "docs/frameworks/gin.md"
      - echo: "docs/frameworks/echo.md"
      - fiber: "docs/frameworks/fiber.md"
      - grpc: "docs/frameworks/grpc.md"
    
    migration_guides:
      - from_basic_auth: "docs/migration/basic-to-zerotrust.md"
      - framework_switching: "docs/migration/framework-switching.md"
  
  # License
  license:
    type: "MIT"
    file: "LICENSE"
    commercial_use: true